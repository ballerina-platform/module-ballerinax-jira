// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# The details of a transition screen.
public type TransitionScreenDetails record {|
    # The ID of the screen.
    string id;
    # The name of the screen.
    string name?;
|};

# Details about a notification associated with an event.
public type EventNotification record {|
    # The email address.
    string emailAddress?;
    # Expand options that include additional event notification details in the response.
    string expand?;
    # The custom user or group field.
    FieldDetails 'field?;
    # The specified group.
    GroupName group?;
    # The ID of the notification.
    int id?;
    # Identifies the recipients of the notification.
    "CurrentAssignee"|"Reporter"|"CurrentUser"|"ProjectLead"|"ComponentLead"|"User"|"Group"|"ProjectRole"|"EmailAddress"|"AllWatchers"|"UserCustomField"|"GroupCustomField" notificationType?;
    # As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
    # 
    #  *  `User` The `parameter` is the user account ID.
    #  *  `Group` The `parameter` is the group name.
    #  *  `ProjectRole` The `parameter` is the project role ID.
    #  *  `UserCustomField` The `parameter` is the ID of the custom field.
    #  *  `GroupCustomField` The `parameter` is the ID of the custom field.
    string 'parameter?;
    # The specified project role.
    ProjectRole projectRole?;
    # The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
    # 
    #  *  `User`, `recipient` is the user account ID.
    #  *  `Group`, `recipient` is the group ID.
    #  *  `ProjectRole`, `recipient` is the project role ID.
    #  *  `UserCustomField`, `recipient` is the ID of the custom field.
    #  *  `GroupCustomField`, `recipient` is the ID of the custom field.
    string recipient?;
    # The specified user.
    UserDetails user?;
|};

# Represents the Queries record for the operation: getContextsForField
public type GetContextsForFieldQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.
    int[] contextId?;
    # Whether to return contexts that apply to all issue types.
    boolean isAnyIssueType?;
    # Whether to return contexts that apply to all projects.
    boolean isGlobalContext?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# List of user account IDs.
public type UserKey record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
|};

# The Forge provided ecosystem rules available.
public type AvailableWorkflowForgeRule record {|
    # The rule description.
    string description?;
    # The unique ARI of the forge rule type.
    string id?;
    # The rule name.
    string name?;
    # The rule key.
    string ruleKey?;
    # The rule type.
    "Condition"|"Validator"|"Function"|"Screen" ruleType?;
|};

# Properties that identify a workflow.
public type WorkflowId record {|
    # Whether the workflow is in the draft state.
    boolean draft;
    # The name of the workflow.
    string name;
|};

# Represents the Queries record for the operation: getNotificationSchemeToProjectMappings
public type GetNotificationSchemeToProjectMappingsQueries record {
    # The list of notifications scheme IDs to be filtered out
    string[] notificationSchemeId?;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of project IDs to be filtered out
    string[] projectId?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# The workflow transition rule conditions tree.
public type WorkflowCondition WorkflowSimpleCondition|WorkflowCompoundCondition;

# Represents the Queries record for the operation: getWorkflowSchemeProjectAssociations
public type GetWorkflowSchemeProjectAssociationsQueries record {
    # The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.
    @constraint:Array {maxLength: 100, minLength: 1}
    int[] projectId;
};

# Update priorities in a scheme
public type UpdatePrioritiesInSchemeRequestBean record {
    # Priorities to add to a scheme
    PrioritySchemeChangesWithoutMappings add?;
    # Priorities to remove from a scheme
    PrioritySchemeChangesWithMappings remove?;
};

# The linked item.
public type RemoteObject record {
    # Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
    Icon icon?;
    # The status of the item.
    Status status?;
    # The summary details of the item.
    string summary?;
    # The title of the item.
    string title;
    # The URL of the item.
    string url;
};

# Represents the Queries record for the operation: getAttachmentContent
public type GetAttachmentContentQueries record {
    # Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.
    boolean redirect = true;
};

# Details of the options for a select list issue field.
public type IssueFieldOption record {|
    IssueFieldOptionConfiguration config?;
    # The unique identifier for the option. This is only unique within the select field's set of options.
    int id;
    # The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.
    record {} properties?;
    # The option's name, which is displayed in Jira.
    string value;
|};

# The default text for a Forge string custom field.
public type CustomFieldContextDefaultValueForgeStringField record {
    # The ID of the context.
    string contextId;
    # The default text. The maximum length is 254 characters.
    string text?;
    string 'type;
};

# The status of the item.
public type Status record {
    # Details of the icon representing the status. If not provided, no status icon displays in Jira.
    Icon icon?;
    # Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
    boolean resolved?;
};

# Details of configurations for a custom field.
public type CustomFieldConfigurations record {|
    # The list of custom field configuration details.
    @constraint:Array {maxLength: 1000, minLength: 1}
    ContextualConfiguration[] configurations;
|};

# The request to evaluate a Jira expression. This bean will be replacing `JiraExpressionEvaluateRequest` as part of new `evaluate` endpoint
public type JiraExpressionEvaluateRequestBean record {|
    # The context in which the Jira expression is evaluated.
    JiraExpressionEvaluateContextBean context?;
    # The Jira expression to evaluate.
    string expression;
|};

public type ResolutionJsonBean record {|
    boolean default?;
    string description?;
    string iconUrl?;
    string id?;
    string name?;
    string self?;
|};

# List of issues and JQL queries.
public type IssuesAndJQLQueries record {|
    # A list of issue IDs.
    int[] issueIds;
    # A list of JQL queries.
    string[] jqls;
|};

# List of pairs (id and value) for precomputation updates.
public type JqlFunctionPrecomputationUpdateRequestBean record {|
    JqlFunctionPrecomputationUpdateBean[] values?;
|};

# Represents the Queries record for the operation: getUserProperty
public type GetUserPropertyQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type JiraVersionField record {|
    string versionId?;
|};

# Represents the Queries record for the operation: updateWorklog
public type UpdateWorklogQueries record {
    # The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
    string newEstimate?;
    # Defines how to update the issue's time estimate, the options are:
    # 
    #  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
    "new"|"leave"|"manual"|"auto" adjustEstimate = "auto";
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.
    string expand = "";
    # Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
    boolean overrideEditableFlag = false;
    # Whether users watching the issue are notified by email.
    boolean notifyUsers = true;
};

public type SimpleListWrapperGroupName record {|
    ListWrapperCallbackGroupName callback?;
    GroupName[] items?;
    int:Signed32 max\-results?;
    ListWrapperCallbackGroupName pagingCallback?;
    int:Signed32 size?;
|};

# Details about a task.
public type TaskProgressBeanJsonNode record {|
    # The description of the task.
    string description?;
    # The execution time of the task, in milliseconds.
    int elapsedRuntime;
    # A timestamp recording when the task was finished.
    int finished?;
    # The ID of the task.
    string id;
    # A timestamp recording when the task progress was last updated.
    int lastUpdate;
    # Information about the progress of the task.
    string message?;
    # The progress of the task, as a percentage complete.
    int progress;
    # The result of the task execution.
    JsonNode result?;
    # The URL of the task.
    string self;
    # A timestamp recording when the task was started.
    int started?;
    # The status of the task.
    "ENQUEUED"|"RUNNING"|"COMPLETE"|"FAILED"|"CANCEL_REQUESTED"|"CANCELLED"|"DEAD" status;
    # A timestamp recording when the task was submitted.
    int submitted;
    # The ID of the user who submitted the task.
    int submittedBy;
|};

# The list of available trigger types.
public type AvailableWorkflowTriggerTypes record {|
    # The description of the trigger rule.
    string description?;
    # The name of the trigger rule.
    string name?;
    # The type identifier of trigger rule.
    string 'type?;
|};

# A page of CreateMetaIssueType with Field.
public type PageOfCreateMetaIssueTypeWithField record {
    # The collection of FieldCreateMetaBeans.
    FieldCreateMetadata[] fields?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults?;
    FieldCreateMetadata[] results?;
    # The index of the first item returned.
    int startAt?;
    # The total number of items in all pages.
    int total?;
};

# A page of items.
public type PageBeanFieldConfigurationItem record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    FieldConfigurationItem[] values?;
|};

public type SimpleListWrapperApplicationRole record {|
    ListWrapperCallbackApplicationRole callback?;
    ApplicationRole[] items?;
    int:Signed32 max\-results?;
    ListWrapperCallbackApplicationRole pagingCallback?;
    int:Signed32 size?;
|};

# Details of changes to a priority scheme's projects that require suggested priority mappings.
public type SuggestedMappingsForProjectsRequestBean record {|
    # The ids of projects being added to the scheme.
    int[] add?;
|};

# Details of a filter for exporting archived issues.
public type ArchivedIssuesFilterRequest record {
    # List archived issues archived by a specified account ID.
    string[] archivedBy?;
    DateRangeFilterRequest archivedDateRange?;
    # List archived issues with a specified issue type ID.
    string[] issueTypes?;
    # List archived issues with a specified project key.
    string[] projects?;
    # List archived issues where the reporter is a specified account ID.
    string[] reporters?;
};

# List of issue level security items in a project.
public type ProjectIssueSecurityLevels record {|
    # Issue level security items list.
    SecurityLevel[] levels;
|};

# Represents the Queries record for the operation: getMyFilters
public type GetMyFiltersQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
    # Include the user's favorite filters in the response.
    boolean includeFavourites = false;
};

# Represents the Queries record for the operation: deleteProjectRole
public type DeleteProjectRoleQueries record {
    # The ID of the project role that will replace the one being deleted.
    int swap?;
};

# A list of projects in which a user is granted permissions.
public type PermittedProjects record {|
    # A list of projects.
    ProjectIdentifierBean[] projects?;
|};

# Details about the complexity of the analysed Jira expression.
public type JiraExpressionComplexity record {|
    # Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
    # 
    #  *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
    #  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
    string expensiveOperations;
    # Variables used in the formula, mapped to the parts of the expression they refer to.
    record {|string...;|} variables?;
|};

# Represents the Queries record for the operation: getAllGadgets
public type GetAllGadgetsQueries record {
    # The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.
    int[] gadgetId?;
    # The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.
    string[] uri?;
    # The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.
    string[] moduleKey?;
};

# A list of webhooks.
public type WebhookDetails record {|
    # The Jira events that trigger the webhook.
    ("jira:issue_created"|"jira:issue_updated"|"jira:issue_deleted"|"comment_created"|"comment_updated"|"comment_deleted"|"issue_property_set"|"issue_property_deleted")[] events;
    # A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
    string[] fieldIdsFilter?;
    # A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
    string[] issuePropertyKeysFilter?;
    # The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
    # 
    #  *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
    #  *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
    string jqlFilter;
|};

# Details of a permission scheme.
public type PermissionScheme record {
    # A description for the permission scheme.
    string description?;
    # The expand options available for the permission scheme.
    string expand?;
    # The ID of the permission scheme.
    int id?;
    # The name of the permission scheme. Must be unique.
    string name;
    # The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.
    PermissionGrant[] permissions?;
    # The scope of the permission scheme.
    Scope scope?;
    # The URL of the permission scheme.
    string self?;
};

# Details of a field configuration to issue type mappings.
public type AssociateFieldConfigurationsWithIssueTypesRequest record {|
    # Field configuration to issue type mappings.
    FieldConfigurationToIssueTypeMapping[] mappings;
|};

@constraint:String {maxLength: 128}
public type BulkGetUsersQueriesAccountIdItemsString string;

# A page of items.
public type PageBeanWebhook record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Webhook[] values?;
|};

# Details about a notification.
public type Notification record {
    # The HTML body of the email notification for the issue.
    string htmlBody?;
    # Restricts the notifications to users with the specified permissions.
    NotificationRecipientsRestrictions restrict?;
    # The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
    string subject?;
    # The plain text body of the email notification for the issue.
    string textBody?;
    # The recipients of the email notification for the issue.
    NotificationRecipients to?;
};

public type JiraDateTimeField record {|
    JiraDateTimeInput dateTime;
    string fieldId;
|};

# This object is used as follows:
# 
#  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
#  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.
public type IssueLinkType record {|
    # The ID of the issue link type and is used as follows:
    # 
    #  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
    #  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.
    string id?;
    # The description of the issue link type inward link and is used as follows:
    # 
    #  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
    #  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    string inward?;
    # The name of the issue link type and is used as follows:
    # 
    #  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
    #  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    string name?;
    # The description of the issue link type outward link and is used as follows:
    # 
    #  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
    #  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    string outward?;
    # The URL of the issue link type. Read only.
    string self?;
|};

# Status details for an issue type.
public type IssueTypeWithStatus record {|
    # The ID of the issue type.
    string id;
    # The name of the issue type.
    string name;
    # The URL of the issue type's status details.
    string self;
    # List of status details for the issue type.
    StatusDetails[] statuses;
    # Whether this issue type represents subtasks.
    boolean subtask;
|};

# Details of a worklog.
public type Worklog record {
    # Details of the user who created the worklog.
    UserDetails author?;
    # A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.
    anydata comment?;
    # The datetime on which the worklog was created.
    string created?;
    # The ID of the worklog record.
    string id?;
    # The ID of the issue this worklog is for.
    string issueId?;
    # Details of properties for the worklog. Optional when creating or updating a worklog.
    EntityProperty[] properties?;
    # The URL of the worklog item.
    string self?;
    # The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
    string started?;
    # The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
    string timeSpent?;
    # The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
    int timeSpentSeconds?;
    # Details of the user who last updated the worklog.
    UserDetails updateAuthor?;
    # The datetime on which the worklog was last updated.
    string updated?;
    # Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
    Visibility visibility?;
};

# An operand that can be part of a list operand.
public type JqlQueryUnitaryOperand ValueOperand|FunctionOperand|KeywordOperand;

# The field configuration for an issue type.
public type FieldConfigurationIssueTypeItem record {|
    # The ID of the field configuration.
    string fieldConfigurationId;
    # The ID of the field configuration scheme.
    string fieldConfigurationSchemeId;
    # The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.
    string issueTypeId;
|};

public type SimplifiedHierarchyLevel record {|
    # The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int aboveLevelId?;
    # The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int belowLevelId?;
    # The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    string externalUuid?;
    int:Signed32 hierarchyLevelNumber?;
    # The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int id?;
    # The issue types available in this hierarchy level.
    int[] issueTypeIds?;
    # The level of this item in the hierarchy.
    int:Signed32 level?;
    # The name of this hierarchy level.
    string name?;
    # The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int projectConfigurationId?;
|};

# A workflow transition rule.
public type WorkflowTransitionRule record {|
    # EXPERIMENTAL. The configuration of the transition rule.
    anydata configuration?;
    # The type of the transition rule.
    string 'type;
|};

# The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
public type MappingsByWorkflow record {|
    # The ID of the new workflow.
    string newWorkflowId;
    # The ID of the old workflow.
    string oldWorkflowId;
    # The list of status mappings.
    WorkflowAssociationStatusMapping[] statusMappings;
|};

# List of all permission schemes.
public type PermissionSchemes record {|
    # Permission schemes list.
    PermissionScheme[] permissionSchemes?;
|};

# Represents the Queries record for the operation: deleteWorkflowTransitionProperty
public type DeleteWorkflowTransitionPropertyQueries record {
    # The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
    "live"|"draft" workflowMode?;
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # The name of the transition property to delete, also known as the name of the property.
    string 'key;
};

# A page of items.
public type PageBeanScreen record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Screen[] values?;
|};

# Details about the roles in a project.
public type ProjectRole record {|
    # The list of users who act in this role.
    RoleActor[] actors?;
    # Whether this role is the admin role for the project.
    boolean admin?;
    # Whether the calling user is part of this role.
    boolean currentUserRole?;
    # Whether this role is the default role for the project
    boolean default?;
    # The description of the project role.
    string description?;
    # The ID of the project role.
    int id?;
    # The name of the project role.
    string name?;
    # Whether the roles are configurable for this project.
    boolean roleConfigurable?;
    # The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    Scope scope?;
    # The URL the project role details.
    string self?;
    # The translated name of the project role.
    string translatedName?;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# A workflow transition.
public type WorkflowTransition record {|
    # The transition ID.
    int:Signed32 id;
    # The transition name.
    string name;
|};

public type IssueTypeUpdateBean record {|
    # The ID of an issue type avatar.
    int avatarId?;
    # The description of the issue type.
    string description?;
    # The unique name for the issue type. The maximum length is 60 characters.
    string name?;
|};

# Represents the Queries record for the operation: createDashboard
public type CreateDashboardQueries record {
    # Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
    boolean extendAdminPermissions = false;
};

# Property key details.
public type PropertyKey record {|
    # The key of the property.
    string 'key?;
    # The URL of the property.
    string self?;
|};

public type IncludedFields record {|
    string[] actuallyIncluded?;
    string[] excluded?;
    string[] included?;
|};

# Defaults for a Forge user custom field.
public type CustomFieldContextDefaultValueForgeUserField record {
    # The ID of the default user.
    string accountId;
    # The ID of the context.
    string contextId;
    string 'type;
    UserFilter userFilter;
};

# A page of changelogs.
public type PageOfChangelogs record {|
    # The list of changelogs.
    Changelog[] histories?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The number of results on the page.
    int:Signed32 total?;
|};

# The default value for a multiple group picker custom field.
public type CustomFieldContextDefaultValueMultipleGroupPicker record {
    # The ID of the context.
    string contextId;
    # The IDs of the default groups.
    string[] groupIds;
    string 'type;
};

# Represents the Queries record for the operation: getChangeLogs
public type GetChangeLogsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
};

public type WorkflowCreateValidateRequest record {|
    WorkflowCreateRequest payload;
    ValidationOptionsForCreate validationOptions?;
|};

# Details of a field that can be used in advanced searches.
public type FieldReferenceData record {|
    # Whether the field provide auto-complete suggestions.
    "true"|"false" auto?;
    # If the item is a custom field, the ID of the custom field.
    string cfid?;
    # Whether this field has been deprecated.
    "true"|"false" deprecated?;
    # The searcher key of the field, only passed when the field is deprecated.
    string deprecatedSearcherKey?;
    # The display name contains the following:
    # 
    #  *  for system fields, the field name. For example, `Summary`.
    #  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
    #  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
    string displayName?;
    # The valid search operators for the field.
    string[] operators?;
    # Whether the field can be used in a query's `ORDER BY` clause.
    "true"|"false" orderable?;
    # Whether the content of this field can be searched.
    "true"|"false" searchable?;
    # The data types of items in the field.
    string[] types?;
    # The field identifier.
    string value?;
|};

# An operand that is a list of values.
public type ListOperand record {
    # Encoded operand, which can be used directly in a JQL query.
    string encodedOperand?;
    # The list of operand values.
    JqlQueryUnitaryOperand[] values;
};

# Details of webhooks to register.
public type WebhookRegistrationDetails record {|
    # The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered.
    string url;
    # A list of webhooks.
    WebhookDetails[] webhooks;
|};

# Represents the Queries record for the operation: getScreensForField
public type GetScreensForFieldQueries record {
    # Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of an issue level security item.
public type SecurityLevel record {|
    # The description of the issue level security item.
    string description?;
    # The ID of the issue level security item.
    string id?;
    # Whether the issue level security item is the default.
    boolean isDefault?;
    # The ID of the issue level security scheme.
    string issueSecuritySchemeId?;
    # The name of the issue level security item.
    string name?;
    # The URL of the issue level security item.
    string self?;
|};

# Details of a custom field context.
public type CustomFieldContextUpdateDetails record {|
    # The description of the custom field context. The maximum length is 255 characters.
    string description?;
    # The name of the custom field context. The name must be unique. The maximum length is 255 characters.
    string name?;
|};

# Details of the status being created.
public type StatusCreate record {|
    # The description of the status.
    string description?;
    # The name of the status.
    @constraint:String {maxLength: 255}
    string name;
    # The category of the status.
    "TODO"|"IN_PROGRESS"|"DONE" statusCategory;
|};

public type JiraTimeTrackingField record {|
    string timeRemaining;
|};

# Bulk Edit Get Fields Response.
public type BulkEditGetFields record {|
    # The end cursor for use in pagination.
    string endingBefore?;
    # List of all the fields
    IssueBulkEditField[] fields?;
    # The start cursor for use in pagination.
    string startingAfter?;
|};

# The default value for a group picker custom field.
public type CustomFieldContextDefaultValueSingleGroupPicker record {
    # The ID of the context.
    string contextId;
    # The ID of the the default group.
    string groupId;
    string 'type;
};

# Represents the Queries record for the operation: getIssueWorklog
public type GetIssueWorklogQueries record {
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.
    string expand = "";
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 5000;
    # The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.
    int startedAfter?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.
    int startedBefore?;
};

public type IssueBulkOperationsFieldOption record {|
|};

# A page of items.
public type PageBeanFieldConfigurationSchemeProjects record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    FieldConfigurationSchemeProjects[] values?;
|};

# Details of an application property.
public type ApplicationProperty record {|
    # The allowed values, if applicable.
    string[] allowedValues?;
    # The default value of the application property.
    string defaultValue?;
    # The description of the application property.
    string desc?;
    string example?;
    # The ID of the application property. The ID and key are the same.
    string id?;
    # The key of the application property. The ID and key are the same.
    string 'key?;
    # The name of the application property.
    string name?;
    # The data type of the application property.
    string 'type?;
    # The new value.
    string value?;
|};

# Properties that identify a published workflow.
public type PublishedWorkflowId record {|
    # The entity ID of the workflow.
    string entityId?;
    # The name of the workflow.
    string name;
|};

# Represents the Queries record for the operation: getWorkflowTransitionRuleConfigurations
public type GetWorkflowTransitionRuleConfigurationsQueries record {
    # The list of workflow names to filter by.
    GetWorkflowTransitionRuleConfigurationsQueriesWorkflowNamesItemsString[] workflowNames?;
    # The types of the transition rules to return.
    ("postfunction"|"condition"|"validator")[] types;
    # The list of `tags` to filter by.
    GetWorkflowTransitionRuleConfigurationsQueriesWithTagsItemsString[] withTags?;
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.
    string expand?;
    # The maximum number of items to return per page.
    @constraint:Int {maxValue: 50}
    int:Signed32 maxResults = 10;
    # The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.
    string[] keys?;
    # Whether draft or published workflows are returned. If not provided, both workflow types are returned.
    boolean draft?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Container for a list of webhook IDs.
public type ContainerForWebhookIDs record {|
    # A list of webhook IDs.
    int[] webhookIds;
|};

# The default value for a multi-select custom field.
public type CustomFieldContextDefaultValueMultipleOption record {
    # The ID of the context.
    string contextId;
    # The list of IDs of the default options.
    string[] optionIds;
    string 'type;
};

# An icon. If no icon is defined:
# 
#  *  for a status icon, no status icon displays in Jira.
#  *  for the remote object icon, the default link icon displays in Jira.
public type Icon record {
    # The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
    string link?;
    # The title of the icon. This is used as follows:
    # 
    #  *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
    #  *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
    string title?;
    # The URL of an icon that displays at 16x16 pixel in Jira.
    string url16x16?;
};

# Represents the Queries record for the operation: updateDraftWorkflowMapping
public type UpdateDraftWorkflowMappingQueries record {
    # The name of the workflow.
    string workflowName;
};

public type SearchRequestBean record {|
    # Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
    # 
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `transitions` Returns all possible transitions for the issue.
    #  *  `operations` Returns all possible operations for the issue.
    #  *  `editmeta` Returns information about how each field can be edited.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    #  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
    string[] expand?;
    # A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    # 
    # The default is `*navigable`.
    # 
    # Examples:
    # 
    #  *  `summary,comment` Returns the summary and comments fields only.
    #  *  `-description` Returns all navigable (default) fields except description.
    #  *  `*all,-comment` Returns all fields except comments.
    # 
    # Multiple `fields` parameters can be included in a request.
    # 
    # Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
    string[] fields?;
    # Reference fields by their key (rather than ID). The default is `false`.
    boolean fieldsByKeys?;
    # A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.
    string jql?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
    string[] properties?;
    # The index of the first item to return in the page of results (page offset). The base index is `0`.
    int:Signed32 startAt?;
    # Determines how to validate the JQL query and treat the validation results. Supported values:
    # 
    #  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
    #  *  `warn` Returns all errors as warnings.
    #  *  `none` No validation is performed.
    #  *  `true` *Deprecated* A legacy synonym for `strict`.
    #  *  `false` *Deprecated* A legacy synonym for `warn`.
    # 
    # The default is `strict`.
    # 
    # Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
    "strict"|"warn"|"none"|"true"|"false" validateQuery?;
|};

public type AddFieldBean record {|
    # The ID of the field to add.
    string fieldId;
|};

# Bulk operation filter details.
public type IssueFilterForBulkPropertySet record {|
    # The value of properties to perform the bulk operation on.
    anydata currentValue?;
    # List of issues to perform the bulk operation on.
    int[] entityIds?;
    # Whether the bulk operation occurs only when the property is present on or absent from an issue.
    boolean hasProperty?;
|};

# A field within a field configuration.
public type FieldConfigurationItem record {|
    # The description of the field within the field configuration.
    string description?;
    # The ID of the field within the field configuration.
    string id;
    # Whether the field is hidden in the field configuration.
    boolean isHidden?;
    # Whether the field is required in the field configuration.
    boolean isRequired?;
    # The renderer type for the field within the field configuration.
    string renderer?;
|};

# Represents the Queries record for the operation: storeAvatar
public type StoreAvatarQueries record {
    # The length of each side of the crop region.
    int:Signed32 size;
    # The X coordinate of the top-left corner of the crop region.
    int:Signed32 x = 0;
    # The Y coordinate of the top-left corner of the crop region.
    int:Signed32 y = 0;
};

# List of changed worklogs.
public type ChangedWorklogs record {|
    boolean lastPage?;
    # The URL of the next list of changed worklogs.
    string nextPage?;
    # The URL of this changed worklogs list.
    string self?;
    # The datetime of the first worklog item in the list.
    int since?;
    # The datetime of the last worklog item in the list.
    int until?;
    # Changed worklog list.
    ChangedWorklog[] values?;
|};

# The date the refreshed webhooks expire.
public type WebhooksExpirationDate record {|
    # The expiration date of all the refreshed webhooks.
    int expirationDate;
|};

# A container for a list of workflow schemes together with the projects they are associated with.
public type ContainerOfWorkflowSchemeAssociations record {|
    # A list of workflow schemes together with projects they are associated with.
    WorkflowSchemeAssociations[] values;
|};

# Represents the Queries record for the operation: bulkDeleteWorklogs
public type BulkDeleteWorklogsQueries record {
    # Defines how to update the issue's time estimate, the options are:
    # 
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being deleted.
    "leave"|"auto" adjustEstimate = "auto";
    # Whether the work log entries should be removed to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
    boolean overrideEditableFlag = false;
};

public type JiraUrlField record {|
    string fieldId;
    string url;
|};

# Details about the Jira instance.
public type ServerInformation record {|
    # The base URL of the Jira instance.
    string baseUrl?;
    # The timestamp when the Jira version was built.
    string buildDate?;
    # The build number of the Jira version.
    int:Signed32 buildNumber?;
    # The type of server deployment. This is always returned as *Cloud*.
    string deploymentType?;
    # The display URL of the Jira instance.
    string displayUrl?;
    # The display URL of Confluence.
    string displayUrlConfluence?;
    # The display URL of the Servicedesk Help Center.
    string displayUrlServicedeskHelpCenter?;
    # Jira instance health check results. Deprecated and no longer returned.
    HealthCheckResult[] healthChecks?;
    # The unique identifier of the Jira version.
    string scmInfo?;
    # The time in Jira when this request was responded to.
    string serverTime?;
    ServerInformation_serverTimeZone serverTimeZone?;
    # The name of the Jira instance.
    string serverTitle?;
    # The version of Jira.
    string version?;
    # The major, minor, and revision version numbers of the Jira version.
    int:Signed32[] versionNumbers?;
|};

# Details of a custom option for a field.
public type CustomFieldOption record {|
    # The URL of these custom field option details.
    string self?;
    # The value of the custom field option.
    string value?;
|};

# The statuses the transition can start from, and the mapping of ports between the statuses.
public type WorkflowTransitionLinks record {|
    # The port that the transition starts from.
    int:Signed32? fromPort?;
    # The status that the transition starts from.
    string? fromStatusReference?;
    # The port that the transition goes to.
    int:Signed32? toPort?;
|};

# The project and issue type mapping.
public type ProjectIssueTypeMapping record {|
    # The ID of the issue type.
    string issueTypeId;
    # The ID of the project.
    string projectId;
|};

public type JiraRichTextInput record {|
    record {} adfValue?;
|};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://auth.atlassian.com/oauth/token";
|};

# Represents the Queries record for the operation: ServiceRegistryResource.services_get
public type ServiceregistryresourceServices_getQueries record {
    # The ID of the services (the strings starting with "b:" need to be decoded in Base64).
    @constraint:Array {maxLength: 20, minLength: 1}
    string[] serviceIds;
};

# Represents the Queries record for the operation: getProjectRoleDetails
public type GetProjectRoleDetailsQueries record {
    # Whether the roles should be filtered to include only those the user is assigned to.
    boolean currentMember = false;
    boolean excludeConnectAddons = false;
};

# A page containing dashboard details.
public type PageOfDashboards record {|
    # List of dashboards.
    Dashboard[] dashboards?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The URL of the next page of results, if any.
    string next?;
    # The URL of the previous page of results, if any.
    string prev?;
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The number of results on the page.
    int:Signed32 total?;
|};

# Details of a gadget position.
public type DashboardGadgetPosition record {|
    int:Signed32 The\ column\ position\ of\ the\ gadget\.;
    int:Signed32 The\ row\ position\ of\ the\ gadget\.;
|};

# The metadata describing an issue field for createmeta.
public type FieldCreateMetadata record {|
    # The list of values allowed in the field.
    anydata[] allowedValues?;
    # The URL that can be used to automatically complete the field.
    string autoCompleteUrl?;
    # The configuration properties.
    record {} configuration?;
    # The default value of the field.
    anydata defaultValue?;
    # The field id.
    string fieldId;
    # Whether the field has a default value.
    boolean hasDefaultValue?;
    # The key of the field.
    string 'key;
    # The name of the field.
    string name;
    # The list of operations that can be performed on the field.
    string[] operations;
    # Whether the field is required.
    boolean required;
    # The data type of the field.
    JsonTypeBean schema;
|};

# Represents the Queries record for the operation: getTrashedFieldsPaginated
public type GetTrashedFieldsPaginatedQueries record {
    "name"|"-name"|"+name"|"trashDate"|"-trashDate"|"+trashDate"|"plannedDeletionDate"|"-plannedDeletionDate"|"+plannedDeletionDate"|"projectsCount"|"-projectsCount"|"+projectsCount" expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # String used to perform a case-insensitive partial match with field names or descriptions.
    string query?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `name` sorts by the field name
    #  *  `trashDate` sorts by the date the field was moved to the trash
    #  *  `plannedDeletionDate` sorts by the planned deletion date
    string orderBy?;
    string[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of the identifiers for a created or updated remote issue link.
public type RemoteIssueLinkIdentifies record {|
    # The ID of the remote issue link, such as the ID of the item on the remote system.
    int id?;
    # The URL of the remote issue link.
    string self?;
|};

# Represents the Queries record for the operation: getWorkflowSchemeIssueType
public type GetWorkflowSchemeIssueTypeQueries record {
    # Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# Details of how to filter and list search auto complete information.
public type SearchAutoCompleteFilter record {|
    # Include collapsed fields for fields that have non-unique names.
    boolean includeCollapsedFields = false;
    # List of project IDs used to filter the visible field details returned.
    int[] projectIds?;
|};

# Details of an avatar.
public type Avatar record {
    # The file name of the avatar icon. Returned for system avatars.
    string fileName?;
    # The ID of the avatar.
    string id;
    # Whether the avatar can be deleted.
    boolean isDeletable?;
    # Whether the avatar is used in Jira. For example, shown as a project's avatar.
    boolean isSelected?;
    # Whether the avatar is a system avatar.
    boolean isSystemAvatar?;
    # The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
    string owner?;
    # The list of avatar icon URLs.
    record {|string...;|} urls?;
};

# The list of statuses that will be updated.
public type StatusUpdateRequest record {|
    # The list of statuses that will be updated.
    StatusUpdate[] statuses;
|};

# The details of the statuses in the associated workflows.
public type StatusMetadata record {|
    # The category of the status.
    "TODO"|"IN_PROGRESS"|"DONE" category?;
    # The ID of the status.
    string id?;
    # The name of the status.
    string name?;
|};

# Represents the Queries record for the operation: getProjectComponents
public type GetProjectComponentsQueries record {
    # The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.
    "jira"|"compass"|"auto" componentSource = "jira";
};

# Represents the Queries record for the operation: createPermissionGrant
public type CreatePermissionGrantQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    # 
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `user` Returns information about the user who is granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `all` Returns all expandable information.
    string expand?;
};

# Represents the Queries record for the operation: findUsersAndGroups
public type FindUsersAndGroupsQueries record {
    # Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
    boolean excludeConnectAddons = false;
    # The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.
    string[] issueTypeId?;
    # The maximum number of items to return in each list.
    int:Signed32 maxResults = 50;
    # The search string.
    string query;
    # Whether the search for groups should be case insensitive.
    boolean caseInsensitive = false;
    # Whether the user avatar should be returned. If an invalid value is provided, the default value is used.
    boolean showAvatar = false;
    # The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.
    string[] projectId?;
    # The size of the avatar to return. If an invalid value is provided, the default value is used.
    "xsmall"|"xsmall@2x"|"xsmall@3x"|"small"|"small@2x"|"small@3x"|"medium"|"medium@2x"|"medium@3x"|"large"|"large@2x"|"large@3x"|"xlarge"|"xlarge@2x"|"xlarge@3x"|"xxlarge"|"xxlarge@2x"|"xxlarge@3x"|"xxxlarge"|"xxxlarge@2x"|"xxxlarge@3x" avatarSize = "xsmall";
    # The custom field ID of the field this request is for.
    string fieldId?;
};

# A page of items.
public type PageBeanIssueTypeSchemeMapping record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeSchemeMapping[] values?;
|};

# The scope of the status.
public type StatusScope record {|
    ProjectId? project?;
    # The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
    "PROJECT"|"GLOBAL" 'type;
|};

# Represents the Queries record for the operation: getAvatarImageByType
public type GetAvatarImageByTypeQueries record {
    # The size of the avatar image. If not provided the default size is returned.
    "xsmall"|"small"|"medium"|"large"|"xlarge" size?;
    # The format to return the avatar image in. If not provided the original content format is returned.
    "png"|"svg" format?;
};

# Details about the issues created and the errors for requests that failed.
public type CreatedIssues record {|
    # Error details for failed issue creation requests.
    BulkOperationErrorResult[] errors?;
    # Details of the issues created.
    CreatedIssue[] issues?;
|};

# Represents the Queries record for the operation: getValidProjectKey
public type GetValidProjectKeyQueries record {
    # The project key.
    string 'key?;
};

# Represents the Queries record for the operation: getCurrentUser
public type GetCurrentUserQueries record {
    # Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `groups` Returns all groups, including nested groups, the user belongs to.
    #  *  `applicationRoles` Returns the application roles the user is assigned to.
    string expand?;
};

# Represents the Queries record for the operation: getCustomFieldsConfigurations
public type GetCustomFieldsConfigurationsQueries record {
    # The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
    int[] fieldContextId?;
    # The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.
    int issueId?;
    # The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.
    string issueTypeId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.
    string projectKeyOrId?;
    # The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: assignPermissionScheme
public type AssignPermissionSchemeQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# Details about a license for the Jira instance.
public type License record {|
    # The applications under this license.
    LicensedApplication[] applications;
|};

public type JsonNode record {|
    boolean array?;
    boolean bigDecimal?;
    boolean bigInteger?;
    int bigIntegerValue?;
    boolean binary?;
    string[] binaryValue?;
    boolean 'boolean?;
    boolean booleanValue?;
    boolean containerNode?;
    decimal decimalValue?;
    boolean double?;
    decimal doubleValue?;
    record {} elements?;
    record {} fieldNames?;
    record {} fields?;
    boolean floatingPointNumber?;
    boolean 'int?;
    int:Signed32 intValue?;
    boolean integralNumber?;
    boolean long?;
    int longValue?;
    boolean missingNode?;
    boolean 'null?;
    boolean number?;
    "INT"|"LONG"|"BIG_INTEGER"|"FLOAT"|"DOUBLE"|"BIG_DECIMAL" numberType?;
    decimal numberValue?;
    boolean 'object?;
    boolean pojo?;
    string textValue?;
    boolean textual?;
    boolean valueAsBoolean?;
    decimal valueAsDouble?;
    int:Signed32 valueAsInt?;
    int valueAsLong?;
    string valueAsText?;
    boolean valueNode?;
|};

# The details of the available dashboard gadget.
public type AvailableDashboardGadget record {|
    # The module key of the gadget type.
    string moduleKey?;
    # The title of the gadget.
    string title;
    # The URI of the gadget type.
    string uri?;
|};

# Details about a created issue or subtask.
public type CreatedIssue record {|
    # The ID of the created issue or subtask.
    string id?;
    # The key of the created issue or subtask.
    string 'key?;
    # The URL of the created issue or subtask.
    string self?;
    # The response code and messages related to any requested transition.
    NestedResponse transition?;
    # The response code and messages related to any requested watchers.
    NestedResponse watchers?;
|};

@constraint:String {maxLength: 20}
public type GetWorkflowTransitionRuleConfigurationsQueriesWithTagsItemsString string;

public type ConnectModules record {
    # A list of app modules in the same format as the `modules` property in the
    # [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
    ConnectModule[] modules;
};

public type SecuritySchemeLevelMemberBean record {|
    # The value corresponding to the specified member type.
    string 'parameter?;
    # The issue security level member type, e.g `reporter`, `group`, `user`.
    string 'type;
|};

# Default values to update.
public type CustomFieldContextDefaultValueUpdate record {|
    CustomFieldContextDefaultValue[] defaultValues?;
|};

# Represents the Queries record for the operation: getIdsOfWorklogsDeletedSince
public type GetIdsOfWorklogsDeletedSinceQueries record {
    # The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.
    int since = 0;
};

# Represents the Queries record for the operation: getValidProjectName
public type GetValidProjectNameQueries record {
    # The project name.
    string name;
};

# Details of the updated priority scheme.
public type UpdatePrioritySchemeResponseBean record {
    PrioritySchemeWithPaginatedPrioritiesAndProjects priorityScheme?;
    # The in-progress issue migration task.
    TaskProgressBeanJsonNode task?;
};

# Represents the Queries record for the operation: findGroups
public type FindGroupsQueries record {
    # This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).
    string accountId?;
    # A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.
    string[] excludeId?;
    # The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
    int:Signed32 maxResults?;
    # The string to find in group names.
    string query?;
    # Whether the search for groups should be case insensitive.
    boolean caseInsensitive = false;
    # As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  
    # A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.
    string[] exclude?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userName?;
};

public type ExpandPrioritySchemePage record {
    int:Signed32 maxResults?;
    int startAt?;
    int total?;
};

# Represents the Queries record for the operation: getOptionsForContext
public type GetOptionsForContextQueries record {
    # Whether only options are returned.
    boolean onlyOptions = false;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The ID of the option.
    int optionId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A page of items.
public type PageBeanFilterDetails record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    FilterDetails[] values?;
|};

# Represents the Queries record for the operation: getAllFieldConfigurationSchemes
public type GetAllFieldConfigurationSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getAllIssueFieldOptions
public type GetAllIssueFieldOptionsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Container for a list of audit records.
public type AuditRecords record {|
    # The number of audit items skipped before the first item in this list.
    int:Signed32 offset?;
    # The requested or default limit on the number of audit items to be returned.
    int:Signed32 'limit?;
    # The total number of audit items returned.
    int total?;
    # The list of audit items.
    AuditRecordBean[] records?;
    
|};

# List of permission grants.
public type PermissionGrants record {|
    # Expand options that include additional permission grant details in the response.
    string expand?;
    # Permission grants list.
    PermissionGrant[] permissions?;
|};

# Represents the Queries record for the operation: updateProject
public type UpdateProjectQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
    # 
    #  *  `description` The project description.
    #  *  `issueTypes` The issue types associated with the project.
    #  *  `lead` The project lead.
    #  *  `projectKeys` All project keys associated with the project.
    string expand?;
};

# A page of items.
public type PageBeanChangelog record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Changelog[] values?;
|};

# Represents the Queries record for the operation: getUserDefaultColumns
public type GetUserDefaultColumnsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Represents the Queries record for the operation: removeWatcher
public type RemoveWatcherQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type ServiceRegistry record {
    # service description
    string? description?;
    # service ID
    string id?;
    # service name
    string name?;
    # organization ID
    string organizationId?;
    # service revision
    string revision?;
    ServiceRegistryTier serviceTier?;
};

public type JiraSingleVersionPickerField record {|
    string fieldId;
    JiraVersionField version;
|};

# Represents the Queries record for the operation: getDashboardsPaginated
public type GetDashboardsPaginatedQueries record {
    # This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.
    string owner?;
    # User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `description` Returns the description of the dashboard.
    #  *  `owner` Returns the owner of the dashboard.
    #  *  `viewUrl` Returns the URL that is used to view the dashboard.
    #  *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
    #  *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
    #  *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
    #  *  `editPermissions` Returns details of the edit permissions defined for the dashboard.
    #  *  `isWritable` Returns whether the current user has permission to edit the dashboard.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
    string groupId?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
    #  *  `favourite_count` Sorts by dashboard popularity.
    #  *  `id` Sorts by dashboard ID.
    #  *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
    #  *  `name` Sorts by dashboard name.
    #  *  `owner` Sorts by dashboard owner name.
    "description"|"-description"|"+description"|"favorite_count"|"-favorite_count"|"+favorite_count"|"id"|"-id"|"+id"|"is_favorite"|"-is_favorite"|"+is_favorite"|"name"|"-name"|"+name"|"owner"|"-owner"|"+owner" orderBy = "name";
    # As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.
    string groupname?;
    # Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # String used to perform a case-insensitive partial match with `name`.
    string dashboardName?;
    # The status to filter by. It may be active, archived or deleted.
    "active"|"archived"|"deleted" status = "active";
};

public type UserBeanAvatarUrls record {|
    # The URL of the user's 16x16 pixel avatar.
    string '16x16?;
    # The URL of the user's 24x24 pixel avatar.
    string '24x24?;
    # The URL of the user's 32x32 pixel avatar.
    string '32x32?;
    # The URL of the user's 48x48 pixel avatar.
    string '48x48?;
|};

# Represents the Queries record for the operation: getPermissionSchemeGrants
public type GetPermissionSchemeGrantsQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    # 
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `user` Returns information about the user who is granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `all` Returns all expandable information.
    string expand?;
};

# Represents the Queries record for the operation: getVisibleIssueFieldOptions
public type GetVisibleIssueFieldOptionsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filters the results to options that are only available in the specified project.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The default text for a Forge collection of strings custom field.
public type CustomFieldContextDefaultValueForgeMultiStringField record {
    string 'type;
    # List of string values. The maximum length for a value is 254 characters.
    string[] values?;
};

# Details about an issue security scheme.
public type SecuritySchemeWithProjects record {
    # The default level ID of the issue security scheme.
    int defaultLevel?;
    # The description of the issue security scheme.
    string description?;
    # The ID of the issue security scheme.
    int id;
    # The name of the issue security scheme.
    string name;
    # The list of project IDs associated with the issue security scheme.
    int[] projectIds?;
    # The URL of the issue security scheme.
    string self;
};

# The identifiers for a project.
public type ProjectIdentifierBean record {|
    # The ID of the project.
    int id?;
    # The key of the project.
    string 'key?;
|};

# A page of items.
public type PageBeanNotificationScheme record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    NotificationScheme[] values?;
|};

public type AttachmentArchiveEntry record {|
    string abbreviatedName?;
    int entryIndex?;
    string mediaType?;
    string name?;
    int size?;
|};

# Details of an operand in a JQL clause.
public type JqlQueryClauseOperand ListOperand|ValueOperand|FunctionOperand|KeywordOperand;

# Details about a failed webhook.
public type FailedWebhook record {|
    # The webhook body.
    string body?;
    # The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
    int failureTime;
    # The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
    string id;
    # The original webhook destination.
    string url;
|};

# The details of an issue type screen scheme.
public type IssueTypeScreenSchemeDetails record {|
    # The description of the issue type screen scheme. The maximum length is 255 characters.
    string description?;
    # The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
    IssueTypeScreenSchemeMapping[] issueTypeMappings;
    # The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
    string name;
|};

# The ID of a priority scheme.
public type PrioritySchemeId record {|
    # The ID of the priority scheme.
    string id?;
    # The in-progress issue migration task.
    TaskProgressBeanJsonNode task?;
|};

# An associated workflow scheme and project.
public type WorkflowSchemeProjectAssociation record {|
    # The ID of the project.
    string projectId;
    # The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.
    string workflowSchemeId?;
|};

# The statuses associated with this workflow.
public type StatusLayoutUpdate record {
    ApprovalConfiguration? approvalConfiguration?;
    WorkflowLayout? layout?;
    # The properties for this status layout.
    record {|string...;|} properties;
    # A unique ID which the status will use to refer to this layout configuration.
    string statusReference;
};

# Details about the time tracking provider.
public type TimeTrackingProvider record {|
    # The key for the time tracking provider. For example, *JIRA*.
    string 'key;
    # The name of the time tracking provider. For example, *JIRA provided time tracking*.
    string name?;
    # The URL of the configuration page for the time tracking provider app. For example, */example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app.
    string url?;
|};

# Represents the Queries record for the operation: search
public type SearchQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `usages` Returns the project and issue types that use the status in their workflow.
    #  *  `workflowUsages` Returns the workflows that use the status.
    string expand?;
    # Term to match status names against or null to search for all statuses in the search scope.
    @constraint:String {maxLength: 255}
    string searchString?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 200;
    # Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.
    string statusCategory?;
    # The project the status is part of or null for global statuses.
    string projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type JiraGroupInput record {|
    string groupName;
|};

public type PrioritySchemeChangesWithoutMappings record {|
    # Affected entity ids.
    int[] ids;
|};

# A page of items.
public type PageBeanDashboard record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Dashboard[] values?;
|};

# Details of a screen scheme.
public type ScreenSchemeDetails record {|
    # The description of the screen scheme. The maximum length is 255 characters.
    string description?;
    # The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
    string name;
    # The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
    ScreenTypes screens;
|};

public type GlobalScopeBean record {|
    # Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
    ("notSelectable"|"defaultValue")[] attributes?;
|};

# Represents the Queries record for the operation: deleteUserProperty
public type DeleteUserPropertyQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type StringList record {|
|};

# Represents the Queries record for the operation: updateWorkflowTransitionProperty
public type UpdateWorkflowTransitionPropertyQueries record {
    # The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
    "live"|"draft" workflowMode?;
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
    string 'key;
};

# Jira instance health check results. Deprecated and no longer returned.
public type HealthCheckResult record {|
    # The description of the Jira health check item.
    string description?;
    # The name of the Jira health check item.
    string name?;
    # Whether the Jira health check item passed or failed.
    boolean passed?;
|};

# Details of issue security scheme level new members.
public type SecuritySchemeMembersRequest record {|
    # The list of level members which should be added to the issue security scheme level.
    SecuritySchemeLevelMemberBean[] members?;
|};

# Change the order of issue priorities.
public type ReorderIssuePriorities record {|
    # The ID of the priority. Required if `position` isn't provided.
    string after?;
    # The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.
    string[] ids;
    # The position for issue priorities to be moved to. Required if `after` isn't provided.
    string position?;
|};

# The IDs of the screens for the screen types of the screen scheme.
public type UpdateScreenTypes record {|
    # The ID of the create screen. To remove the screen association, pass a null.
    string create?;
    # The ID of the default screen. When specified, must include a screen ID as a default screen is required.
    string default?;
    # The ID of the edit screen. To remove the screen association, pass a null.
    string edit?;
    # The ID of the view screen. To remove the screen association, pass a null.
    string view?;
|};

# Details of a workflow status.
public type WorkflowStatus record {|
    # The ID of the issue status.
    string id;
    # The name of the status in the workflow.
    string name;
    # Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable.
    record {} properties?;
|};

# Details of global and project permissions granted to the user.
public type BulkPermissionGrants record {|
    # List of permissions granted to the user.
    string[] globalPermissions;
    # List of project permissions and the projects and issues those permissions provide access to.
    BulkProjectPermissionGrants[] projectPermissions;
|};

# A page of items.
public type PageBean2ComponentJsonBean record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ComponentJsonBean[] values?;
|};

# Represents the Queries record for the operation: getWorklogsForIds
public type GetWorklogsForIdsQueries record {
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
    string expand = "";
};

# A page of items.
public type PageBeanFieldConfigurationDetails record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    FieldConfigurationDetails[] values?;
|};

# Represents the Queries record for the operation: getDefaultValues
public type GetDefaultValuesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The IDs of the contexts.
    int[] contextId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of a workflow transition.
public type Transition record {|
    # The description of the transition.
    string description;
    # The statuses the transition can start from.
    string[] 'from;
    # The ID of the transition.
    string id;
    # The name of the transition.
    string name;
    # The properties of the transition.
    record {} properties?;
    WorkflowRules rules?;
    TransitionScreenDetails screen?;
    # The status the transition goes to.
    string to;
    # The type of the transition.
    "global"|"initial"|"directed" 'type;
|};

# A project category.
public type UpdatedProjectCategory record {|
    # The name of the project category.
    string description?;
    # The ID of the project category.
    string id?;
    # The description of the project category.
    string name?;
    # The URL of the project category.
    string self?;
|};

# Represents the Queries record for the operation: getMyPermissions
public type GetMyPermissionsQueries record {
    # The key of project. Ignored if `projectId` is provided.
    string projectKey?;
    # The ID of the issue.
    string issueId?;
    # The key of the issue. Ignored if `issueId` is provided.
    string issueKey?;
    # A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).
    string permissions?;
    string projectConfigurationUuid?;
    # The ID of the comment.
    string commentId?;
    # The ID of project.
    string projectId?;
    string projectUuid?;
};

# The field configuration to issue type mapping.
public type FieldConfigurationToIssueTypeMapping record {|
    # The ID of the field configuration.
    string fieldConfigurationId;
    # The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request.
    string issueTypeId;
|};

@constraint:String {maxLength: 50}
public type GetWorkflowTransitionRuleConfigurationsQueriesWorkflowNamesItemsString string;

# Represents the Queries record for the operation: getTransitions
public type GetTransitionsQueries record {
    # Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).
    string expand?;
    # Whether transitions with the condition *Hide From User Condition* are included in the response.
    boolean skipRemoteOnlyCondition = false;
    # The ID of the transition.
    string transitionId?;
    # Whether details of transitions that fail a condition are included in the response
    boolean includeUnavailableTransitions = false;
    # Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.
    boolean sortByOpsBarAndStatus = false;
};

# Represents the Queries record for the operation: getIssueSecurityLevelMembers
public type GetIssueSecurityLevelMembersQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.
    string[] issueSecurityLevelId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Container for a list of registered webhooks. Webhook details are returned in the same order as the request.
public type ContainerForRegisteredWebhooks record {|
    # A list of registered webhooks.
    RegisteredWebhook[] webhookRegistrationResult?;
|};

public type UpdateUserToGroupBean record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
};

# The converted JQL queries.
public type ConvertedJQLQueries record {|
    # List of queries containing user information that could not be mapped to an existing user
    JQLQueryWithUnknownUsers[] queriesWithUnknownUsers?;
    # The list of converted query strings with account IDs in place of user identifiers.
    string[] queryStrings?;
|};

# Represents the Queries record for the operation: evaluateJiraExpression
public type EvaluateJiraExpressionQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
    string expand?;
};

# Represents the Queries record for the operation: updateComment
public type UpdateCommentQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
    # Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideEditableFlag = false;
    # Whether users are notified when a comment is updated.
    boolean notifyUsers = true;
};

# The JQL queries to be converted.
public type JQLPersonalDataMigrationRequest record {|
    # A list of queries with user identifiers. Maximum of 100 queries.
    string[] queryStrings?;
|};

# The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `nextPageToken` and `maxResults` properties. This bean will be replacing JexpJqlIssues bean as part of new `evaluate` endpoint
public type JexpEvaluateCtxJqlIssues record {|
    # The maximum number of issues to return from the JQL query. max results value considered may be lower than the number specific here.
    int:Signed32 maxResults?;
    # The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.
    string nextPageToken?;
    # The JQL query, required to be bounded.
    string query?;
|};

# A page of items.
public type PageBeanFieldConfigurationScheme record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    FieldConfigurationScheme[] values?;
|};

# The statuses associated with each workflow.
public type StatusesPerWorkflow record {|
    # The ID of the initial status for the workflow.
    string initialStatusId?;
    # The status IDs associated with the workflow.
    string[] statuses?;
    # The ID of the workflow.
    string workflowId?;
|};

# Represents the Queries record for the operation: getAvailablePrioritiesByPriorityScheme
public type GetAvailablePrioritiesByPrioritySchemeQueries record {
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The string to query priorities on by name.
    string query = "";
    # The priority scheme ID.
    string schemeId;
    # A list of priority IDs to exclude from the results.
    string[] exclude?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# Represents the Queries record for the operation: searchProjectsUsingSecuritySchemes
public type SearchProjectsUsingSecuritySchemesQueries record {
    # The list of security scheme IDs to be filtered out.
    string[] issueSecuritySchemeId?;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of project IDs to be filtered out.
    string[] projectId?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# Details of the instance's attachment settings.
public type AttachmentSettings record {|
    # Whether the ability to add attachments is enabled.
    boolean enabled?;
    # The maximum size of attachments permitted, in bytes.
    int uploadLimit?;
|};

# Details of notifications which should be added to the notification scheme.
public type AddNotificationsDetails record {
    # The list of notifications which should be added to the notification scheme.
    NotificationSchemeEventDetails[] notificationSchemeEvents;
};

# Represents the Queries record for the operation: deleteRemoteIssueLinkByGlobalId
public type DeleteRemoteIssueLinkByGlobalIdQueries record {
    # The global ID of a remote issue link.
    string globalId;
};

# Defaults for a Forge collection of users custom field.
public type CustomFieldContextDefaultValueForgeMultiUserField record {
    # The IDs of the default users.
    string[] accountIds;
    # The ID of the context.
    string contextId;
    string 'type;
};

# Details of an issue type scheme.
public type IssueTypeScheme record {|
    # The ID of the default issue type of the issue type scheme.
    string defaultIssueTypeId?;
    # The description of the issue type scheme.
    string description?;
    # The ID of the issue type scheme.
    string id;
    # Whether the issue type scheme is the default.
    boolean isDefault?;
    # The name of the issue type scheme.
    string name;
|};

# Details about the operations available in this version.
public type SimpleLink record {|
    string href?;
    string iconClass?;
    string id?;
    string label?;
    string styleClass?;
    string title?;
    int:Signed32 weight?;
|};

# A page of items.
public type PageBeanIssueTypeScheme record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeScheme[] values?;
|};

# A screen scheme.
public type ScreenScheme record {|
    # The description of the screen scheme.
    string description?;
    # The ID of the screen scheme.
    int id?;
    # Details of the issue type screen schemes associated with the screen scheme.
    PageBeanIssueTypeScreenScheme issueTypeScreenSchemes?;
    # The name of the screen scheme.
    string name?;
    # The IDs of the screens for the screen types of the screen scheme.
    ScreenTypes screens?;
|};

# List of users and groups found in a search.
public type FoundUsersAndGroups record {|
    FoundGroups groups?;
    FoundUsers users?;
|};

public type WorkflowSchemeUpdateRequiredMappingsResponse record {|
    # The list of required status mappings by issue type.
    RequiredMappingByIssueType[] statusMappingsByIssueTypes?;
    # The list of required status mappings by workflow.
    RequiredMappingByWorkflows[] statusMappingsByWorkflows?;
    # The details of the statuses in the associated workflows.
    StatusMetadata[] statuses?;
    # The statuses associated with each workflow.
    StatusesPerWorkflow[] statusesPerWorkflow?;
|};

# Details of the users and groups to receive the notification.
public type NotificationRecipients record {
    # Whether the notification should be sent to the issue's assignees.
    boolean assignee?;
    # List of groupIds to receive the notification.
    string[] groupIds?;
    # List of groups to receive the notification.
    GroupName[] groups?;
    # Whether the notification should be sent to the issue's reporter.
    boolean reporter?;
    # List of users to receive the notification.
    UserDetails[] users?;
    # Whether the notification should be sent to the issue's voters.
    boolean voters?;
    # Whether the notification should be sent to the issue's watchers.
    boolean watchers?;
};

@constraint:String {minLength: 1}
public type JqlQueriesToParseQueriesItemsString string;

public type SearchAndReconcileRequestBean record {|
    # Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
    # 
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    string expand?;
    # A list of fields to return for each issue. Use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  `id` Returns only issue IDs.
    #  *  Any issue field, prefixed with a dash to exclude.
    # 
    # The default is `id`.
    # 
    # Examples:
    # 
    #  *  `summary,comment` Returns the summary and comments fields only.
    #  *  `*all,-comment` Returns all fields except comments.
    # 
    # Multiple `fields` parameters can be included in a request.
    # 
    # Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
    string[] fields?;
    # Reference fields by their key (rather than ID). The default is `false`.
    boolean fieldsByKeys?;
    # A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this field requires a bounded query. A bounded query is a query with a search restriction.
    # 
    #  *  Example of an unbounded query: `order by key desc`.
    #  *  Example of a bounded query: `assignee = currentUser() order by key`.
    string jql?;
    # The maximum number of items to return. Depending on search criteria, real number of items returned may be smaller.
    int:Signed32 maxResults = 50;
    # The continuation token to fetch the next page. This token is provided by the response of this endpoint.
    string nextPageToken?;
    # A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
    string[] properties?;
    # Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids. All issues must exist.
    int[] reconcileIssues?;
|};

public type CustomContextVariable UserContextVariable|IssueContextVariable|JsonContextVariable;

# Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows.
public type ProjectIssueTypes record {|
    # IDs of the issue types
    string[]? issueTypes?;
    ProjectId? project?;
|};

public type IdBean record {|
    # The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to get a list of permission scheme IDs.
    int id;
|};

# Represents the Queries record for the operation: removeUserFromGroup
public type RemoveUserFromGroupQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId;
    # The ID of the group. This parameter cannot be used with the `groupName` parameter.
    string groupId?;
    # As a group's name can change, use of `groupId` is recommended to identify a group.  
    # The name of the group. This parameter cannot be used with the `groupId` parameter.
    string groupname?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Represents the Queries record for the operation: bulkGetGroups
public type BulkGetGroupsQueries record {
    # The access level of a group. Valid values: 'site-admin', 'admin', 'user'.
    string accessType?;
    # The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.
    string[] groupName?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.
    string[] groupId?;
    # The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.
    string applicationKey?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: validateProjectKey
public type ValidateProjectKeyQueries record {
    # The project key.
    string 'key?;
};

public type IdSearchRequestBean record {|
    # A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. Order by clauses are not allowed.
    string jql?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 1000;
    # The continuation token to fetch the next page. This token is provided by the response of this endpoint.
    string nextPageToken?;
|};

# Represents the Queries record for the operation: createIssueTypeAvatar
public type CreateIssueTypeAvatarQueries record {
    # The length of each side of the crop region.
    int:Signed32 size;
    # The X coordinate of the top-left corner of the crop region.
    int:Signed32 x = 0;
    # The Y coordinate of the top-left corner of the crop region.
    int:Signed32 y = 0;
};

# A page of items.
public type PageBeanUserDetails record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    UserDetails[] values?;
|};

# Issue type scheme item.
public type IssueTypeSchemeMapping record {|
    # The ID of the issue type.
    string issueTypeId;
    # The ID of the issue type scheme.
    string issueTypeSchemeId;
|};

# Represents the Queries record for the operation: getPrioritiesByPriorityScheme
public type GetPrioritiesByPrioritySchemeQueries record {
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
public type FunctionOperand record {
    # The list of function arguments.
    string[] arguments;
    # Encoded operand, which can be used directly in a JQL query.
    string encodedOperand?;
    # The name of the function.
    string 'function;
};

# The configuration of the rule.
public type WorkflowRuleConfiguration record {|
    # The ID of the rule.
    string? id?;
    # The parameters related to the rule.
    record {|string...;|} parameters?;
    # The rule key of the rule.
    string ruleKey;
|};

# Represents the Queries record for the operation: getFieldAutoCompleteForQueryString
public type GetFieldAutoCompleteForQueryStringQueries record {
    # The partial predicate item name entered by the user.
    string predicateValue?;
    # The name of the field.
    string fieldName?;
    # The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.
    string predicateName?;
    # The partial field item name entered by the user.
    string fieldValue?;
};

# A page of items.
public type PageBeanProject record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Project[] values?;
|};

# Represents the Queries record for the operation: getCreateIssueMetaIssueTypes
public type GetCreateIssueMetaIssueTypesQueries record {
    # The maximum number of items to return per page.
    @constraint:Int {maxValue: 200}
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
};

# Details about the mapping between an issue type and a workflow.
public type IssueTypeWorkflowMapping record {|
    # The ID of the issue type. Not required if updating the issue type-workflow mapping.
    string issueType?;
    # Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.
    boolean updateDraftIfNeeded?;
    # The name of the workflow.
    string workflow?;
|};

public type UserBean record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Whether the user is active.
    boolean active?;
    # The avatars of the user.
    UserBeanAvatarUrls avatarUrls?;
    # The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
    string displayName?;
    # This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
    # The key of the user.
    string 'key?;
    # This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
    # The username of the user.
    string name?;
    # The URL of the user.
    string self?;
|};

# The status reference and port that a transition is connected to.
# 
# # Deprecated
@deprecated
public type StatusReferenceAndPort record {|
    # The port this transition uses to connect to this status.
    int:Signed32 port?;
    # The reference of this status.
    string statusReference;
|};

# Represents the Queries record for the operation: getAttachmentThumbnail
public type GetAttachmentThumbnailQueries record {
    # Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.
    boolean redirect = true;
    # Whether a default thumbnail is returned when the requested thumbnail is not found.
    boolean fallbackToDefault = true;
    # The maximum width to scale the thumbnail to.
    int:Signed32 width?;
    # The maximum height to scale the thumbnail to.
    int:Signed32 height?;
};

# Details of workflows and their transition rules to delete.
public type WorkflowsWithTransitionRulesDetails record {|
    # The list of workflows with transition rules to delete.
    WorkflowTransitionRulesDetails[] workflows;
|};

# Details about data policy.
public type ProjectDataPolicy record {|
    # Whether the project contains any content inaccessible to the requesting application.
    boolean anyContentBlocked?;
|};

# Details of a share permission for the filter.
public type SharePermission record {|
    # The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.
    GroupName group?;
    # The unique identifier of the share permission.
    int id?;
    # The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  
    # For a request, specify the `id` for the project.
    Project project?;
    # The project role that the filter is shared with.  
    # For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
    ProjectRole role?;
    # The type of share permission:
    # 
    #  *  `user` Shared with a user.
    #  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
    #  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
    #  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
    #  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
    #  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
    #  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
    "user"|"group"|"project"|"projectRole"|"global"|"loggedin"|"authenticated"|"project-unknown" 'type;
    # The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
    UserBean user?;
|};

# Represents the Queries record for the operation: getAllUsers
public type GetAllUsersQueries record {
    # The maximum number of items to return.
    int:Signed32 maxResults = 50;
    # The index of the first item to return.
    int:Signed32 startAt = 0;
};

# A page of items.
public type PageBeanScreenWithTab record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ScreenWithTab[] values?;
|};

# The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users.
public type FoundUsers record {|
    # Header text indicating the number of users in the response and the total number of users found in the search.
    string header?;
    # The total number of users found in the search.
    int:Signed32 total?;
    UserPickerUser[] users?;
|};

# List of project permissions and the projects and issues those permissions grant access to.
public type BulkProjectPermissionGrants record {|
    # IDs of the issues the user has the permission for.
    int[] issues;
    # A project permission,
    string permission;
    # IDs of the projects the user has the permission for.
    int[] projects;
|};

# Represents the Queries record for the operation: analyseExpression
public type AnalyseExpressionQueries record {
    # The check to perform:
    # 
    #  *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.
    #  *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.
    #  *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.
    "syntax"|"type"|"complexity" 'check = "syntax";
};

# Details for permissions of shareable entities
public type PermissionDetails record {|
    # The edit permissions for the shareable entities.
    SharePermission[] editPermissions;
    # The share permissions for the shareable entities.
    SharePermission[] sharePermissions;
|};

# Represents the Queries record for the operation: replaceIssueFieldOption
public type ReplaceIssueFieldOptionQueries record {
    # A JQL query that specifies the issues to be updated. For example, *project=10000*.
    string jql?;
    # Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.
    boolean overrideScreenSecurity = false;
    # Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideEditableFlag = false;
    # The ID of the option that will replace the currently selected option.
    int replaceWith?;
};

# A group label.
public type GroupLabel record {|
    # The group label name.
    string text?;
    # The title of the group label.
    string title?;
    # The type of the group label.
    "ADMIN"|"SINGLE"|"MULTIPLE" 'type?;
|};

# A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
public type JqlQueryField record {|
    # The encoded name of the field, which can be used directly in a JQL query.
    string encodedName?;
    # The name of the field.
    string name;
    # When the field refers to a value in an entity property, details of the entity property value.
    JqlQueryFieldEntityProperty[] property?;
|};

# Represents the Queries record for the operation: getSelectableIssueFieldOptions
public type GetSelectableIssueFieldOptionsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filters the results to options that are only available in the specified project.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A type of issue suggested for use in auto-completion.
public type IssuePickerSuggestionsIssueType record {|
    # The ID of the type of issues suggested for use in auto-completion.
    string id?;
    # A list of issues suggested for use in auto-completion.
    SuggestedIssue[] issues?;
    # The label of the type of issues suggested for use in auto-completion.
    string label?;
    # If no issue suggestions are found, returns a message indicating no suggestions were found,
    string msg?;
    # If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
    string sub?;
|};

# Represents the Queries record for the operation: addWorklog
public type AddWorklogQueries record {
    # The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
    string newEstimate?;
    # Defines how to update the issue's time estimate, the options are:
    # 
    #  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `manual` Reduces the estimate by amount specified in `reduceBy`.
    #  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
    "new"|"leave"|"manual"|"auto" adjustEstimate = "auto";
    # The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.
    string reduceBy?;
    # Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.
    string expand = "";
    # Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
    boolean overrideEditableFlag = false;
    # Whether users watching the issue are notified by email.
    boolean notifyUsers = true;
};

# Issue security level member.
public type SecurityLevelMember record {
    # The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    PermissionHolder holder;
    # The ID of the issue security level member.
    string id;
    # The ID of the issue security level.
    string issueSecurityLevelId;
    # The ID of the issue security scheme.
    string issueSecuritySchemeId;
    boolean managed?;
};

# Details of Jira expressions for analysis.
public type JiraExpressionForAnalysis record {|
    # Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
    record {|string...;|} contextVariables?;
    # The list of Jira expressions to analyse.
    string[] expressions;
|};

# A page of items.
public type PageBeanSecuritySchemeWithProjects record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    SecuritySchemeWithProjects[] values?;
|};

# Details of changes to a priority scheme that require suggested priority mappings.
public type SuggestedMappingsRequestBean record {|
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The priority changes in the scheme.
    SuggestedMappingsForPrioritiesRequestBean priorities?;
    # The project changes in the scheme.
    SuggestedMappingsForProjectsRequestBean projects?;
    # The id of the priority scheme.
    int schemeId?;
    # The index of the first item returned on the page.
    int startAt?;
|};

public type JiraComponentField record {|
    int componentId;
|};

public type JiraExpressionEvaluateContextBean record {|
    # The ID of the board that is available under the `board` variable when evaluating the expression.
    int board?;
    # Custom context variables and their types. These variable types are available for use in a custom context:
    # 
    #  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
    #  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
    #  *  `json`: A JSON object containing custom content.
    #  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
    CustomContextVariable[] custom?;
    # The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
    int customerRequest?;
    # The issue that is available under the `issue` variable when evaluating the expression.
    IdOrKeyBean issue?;
    # The collection of issues that is available under the `issues` variable when evaluating the expression.
    JexpEvaluateCtxIssues issues?;
    # The project that is available under the `project` variable when evaluating the expression.
    IdOrKeyBean project?;
    # The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
    int serviceDesk?;
    # The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
    int sprint?;
|};

# Details about a workflow configuration update request.
public type WorkflowTransitionRulesDetails record {|
    WorkflowId workflowId;
    # The list of connect workflow rule IDs.
    string[] workflowRuleIds;
|};

# The create workflows payload.
public type WorkflowCreateRequest record {|
    WorkflowScope scope;
    # The statuses to associate with the workflows.
    WorkflowStatusUpdate[] statuses;
    # The details of the workflows to create.
    WorkflowCreate[] workflows;
|};

# Represents the Queries record for the operation: getNotificationSchemeForProject
public type GetNotificationSchemeForProjectQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `all` Returns all expandable information
    #  *  `field` Returns information about any custom fields assigned to receive an event
    #  *  `group` Returns information about any groups assigned to receive an event
    #  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
    #  *  `projectRole` Returns information about any project roles assigned to receive an event
    #  *  `user` Returns information about any users assigned to receive an event
    string expand?;
};

# Details of a link between issues.
public type IssueLink record {|
    # The ID of the issue link.
    string id?;
    # Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
    LinkedIssue inwardIssue;
    # Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
    LinkedIssue outwardIssue;
    # The URL of the issue link.
    string self?;
    # The type of link between the issues.
    IssueLinkType 'type;
|};

# Represents the Queries record for the operation: getDefaultWorkflow
public type GetDefaultWorkflowQueries record {
    # Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.
public type targetToSourcesMapping record {|
    # If `true`, when issues are moved into this target group, they will adopt the target project's default classification, if they don't have a classification already. If they do have a classification, it will be kept the same even after the move. Leave `targetClassification` empty when using this.
    # 
    # If `false`, you must provide a `targetClassification` mapping for each classification associated with the selected issues.
    # 
    # [Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)
    boolean inferClassificationDefaults;
    # If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.
    # 
    # If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property
    boolean inferFieldDefaults;
    # If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.
    # 
    # If `false`, you must provide a `targetStatus` for each status not present in the target workflow.
    # 
    # The default status in a workflow is referred to as the "initial status". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)
    boolean inferStatusDefaults;
    # When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.
    # 
    # If `true`, subtasks will automatically move to the same project as their parent.
    # 
    # When they move:
    # 
    #  *  Their `issueType` will be set to the default for subtasks in the target project.
    #  *  Values for mandatory fields will be retained from the source issues
    #  *  Specifying separate mapping for implicit subtasks won’t be allowed.
    # 
    # If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.
    boolean inferSubtaskTypeDefault;
    # List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks).
    string[] issueIdsOrKeys?;
    # List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.
    # 
    #  *  **You should only define this property when `inferClassificationDefaults` is `false`.**
    #  *  **In order to provide mapping for issues which don't have a classification, use `"-1"`.**
    targetClassification[]? targetClassification?;
    # List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.
    # 
    # The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).
    # 
    # **You should only define this property when `inferFieldDefaults` is `false`.**
    targetMandatoryFields[]? targetMandatoryFields?;
    # List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.
    # 
    # The new values will only be applied if the source status is invalid for the target project and issue type.
    # 
    # **You should only define this property when `inferStatusDefaults` is `false`.**
    targetStatus[]? targetStatus?;
|};

# The list of JQL queries to sanitize for the given account IDs.
public type JqlQueriesToSanitize record {|
    # The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries.
    JqlQueryToSanitize[] queries;
|};

# The Atlassian provided system rules available.
public type AvailableWorkflowSystemRule record {|
    # The rule description.
    string description;
    # List of rules that conflict with this one.
    string[] incompatibleRuleKeys;
    # Whether the rule can be added added to an initial transition.
    boolean isAvailableForInitialTransition;
    # Whether the rule is visible.
    boolean isVisible;
    # The rule name.
    string name;
    # The rule key.
    string ruleKey;
    # The rule type.
    "Condition"|"Validator"|"Function"|"Screen" ruleType;
|};

# Represents the Queries record for the operation: deleteDraftWorkflowMapping
public type DeleteDraftWorkflowMappingQueries record {
    # The name of the workflow.
    string workflowName;
};

# Represents the Queries record for the operation: deleteWorklog
public type DeleteWorklogQueries record {
    # The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
    string newEstimate?;
    # Defines how to update the issue's time estimate, the options are:
    # 
    #  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `manual` Increases the estimate by amount specified in `increaseBy`.
    #  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
    "new"|"leave"|"manual"|"auto" adjustEstimate = "auto";
    # Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
    boolean overrideEditableFlag = false;
    # Whether users watching the issue are notified by email.
    boolean notifyUsers = true;
    # The amount to increase the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `manual`.
    string increaseBy?;
};

# The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups.
public type FoundGroups record {|
    FoundGroup[] groups?;
    # Header text indicating the number of groups in the response and the total number of groups found in the search.
    string header?;
    # The total number of groups found in the search.
    int:Signed32 total?;
|};

# A page of items.
public type PageBeanIssueTypeScreenSchemesProjects record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeScreenSchemesProjects[] values?;
|};

public type JiraColorField record {|
    JiraColorInput color;
    string fieldId;
|};

# Details about a project.
public type Project record {|
    # Whether the project is archived.
    boolean archived?;
    # The user who archived the project.
    User archivedBy?;
    # The date when the project was archived.
    string archivedDate?;
    # The default assignee when creating issues for this project.
    "PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # The URLs of the project's avatars.
    AvatarUrlsBean avatarUrls?;
    # List of the components contained in the project.
    ProjectComponent[] components?;
    # Whether the project is marked as deleted.
    boolean deleted?;
    # The user who marked the project as deleted.
    User deletedBy?;
    # The date when the project was marked as deleted.
    string deletedDate?;
    # A brief description of the project.
    string description?;
    # An email address associated with the project.
    string email?;
    # Expand options that include additional project details in the response.
    string expand?;
    # Whether the project is selected as a favorite.
    boolean favourite?;
    # The ID of the project.
    string id?;
    # Insights about the project.
    ProjectInsight insight?;
    # Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.
    boolean isPrivate?;
    # The issue type hierarchy for the project.
    Hierarchy issueTypeHierarchy?;
    # List of the issue types available in the project.
    IssueTypeDetails[] issueTypes?;
    # The key of the project.
    string 'key?;
    # The project landing page info.
    ProjectLandingPageInfo landingPageInfo?;
    # The username of the project lead.
    User lead?;
    # The name of the project.
    string name?;
    # User permissions on the project
    ProjectPermissions permissions?;
    # The category the project belongs to.
    ProjectCategory projectCategory?;
    # The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    "software"|"service_desk"|"business" projectTypeKey?;
    # Map of project properties
    record {} properties?;
    # The date when the project is deleted permanently.
    string retentionTillDate?;
    # The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
    record {|string...;|} roles?;
    # The URL of the project details.
    string self?;
    # Whether the project is simplified.
    boolean simplified?;
    # The type of the project.
    "classic"|"next-gen" style?;
    # A link to information about this project, such as project documentation.
    string url?;
    # Unique ID for next-gen projects.
    string uuid?;
    # The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
    Version[] versions?;
|};

# List of project avatars.
public type ProjectAvatars record {|
    # List of avatars added to Jira. These avatars may be deleted.
    Avatar[] custom?;
    # List of avatars included with Jira. These avatars cannot be deleted.
    Avatar[] system?;
|};

public type LinkIssueRequestJsonBean record {|
    Comment comment?;
    LinkedIssue inwardIssue;
    LinkedIssue outwardIssue;
    IssueLinkType 'type;
|};

# Represents the Queries record for the operation: deleteDefaultWorkflow
public type DeleteDefaultWorkflowQueries record {
    # Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
    boolean updateDraftIfNeeded?;
};

# A page of items.
public type PageBeanUser record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    User[] values?;
|};

public type AddSecuritySchemeLevelsRequestBean record {|
    # The list of scheme levels which should be added to the security scheme.
    SecuritySchemeLevelBean[] levels?;
|};

# Details of new default levels.
public type SetDefaultLevelsRequest record {
    # List of objects with issue security scheme ID and new default level ID.
    DefaultLevelValue[] defaultValues;
};

public type Group record {|
    # Expand options that include additional group details in the response.
    string expand?;
    # The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    string? groupId?;
    # The name of group.
    string name?;
    # The URL for these group details.
    string self?;
    # A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
    PagedListUserDetailsApplicationUser users?;
|};

public type ServiceRegistryTier record {
    # tier description
    string? description?;
    # tier ID
    string id?;
    # tier level
    int level?;
    # tier name
    string? name?;
    # name key of the tier
    string nameKey?;
};

# Represents the Queries record for the operation: removeGroup
public type RemoveGroupQueries record {
    # The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.
    string swapGroupId?;
    # The ID of the group. This parameter cannot be used with the `groupname` parameter.
    string groupId?;
    string groupname?;
    # As a group's name can change, use of `swapGroupId` is recommended to identify a group.  
    # The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.
    string swapGroup?;
};

# An object notation input
public type MandatoryFieldValueForADF record {
    # If `true`, will try to retain original non-null issue field values on move.
    boolean? retain = true;
    # Will treat as `MandatoryFieldValueForADF` if type is `adf`
    "adf"|"raw" 'type;
    # Value for each field. Accepts Atlassian Document Format (ADF) for rich text fields like `description`, `environments`. For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure)
    record {} value;
};

# Details of an issue type scheme and its associated issue types.
public type IssueTypeSchemeDetails record {|
    # The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
    string defaultIssueTypeId?;
    # The description of the issue type scheme. The maximum length is 4000 characters.
    string description?;
    # The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
    string[] issueTypeIds;
    # The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
    string name;
|};

# Represents the Queries record for the operation: getDynamicWebhooksForApp
public type GetDynamicWebhooksForAppQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getWorkflowTransitionProperties
public type GetWorkflowTransitionPropertiesQueries record {
    # The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
    "live"|"draft" workflowMode = "live";
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
    boolean includeReservedKeys = false;
    # The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
    string 'key?;
};

# Represents the Queries record for the operation: createProjectAvatar
public type CreateProjectAvatarQueries record {
    # The length of each side of the crop region.
    int:Signed32 size = 0;
    # The X coordinate of the top-left corner of the crop region.
    int:Signed32 x = 0;
    # The Y coordinate of the top-left corner of the crop region.
    int:Signed32 y = 0;
};

# Represents the Queries record for the operation: getApplicationProperty
public type GetApplicationPropertyQueries record {
    # The permission level of all items being returned in the list.
    string permissionLevel?;
    # When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.
    string keyFilter?;
    # The key of the application property.
    string 'key?;
};

# A change item.
public type ChangeDetails record {|
    # The name of the field changed.
    string 'field?;
    # The ID of the field changed.
    string fieldId?;
    # The type of the field changed.
    string fieldtype?;
    # The details of the original value.
    string 'from?;
    # The details of the original value as a string.
    string fromString?;
    # The details of the new value.
    string to?;
    # The details of the new value as a string.
    string toString?;
|};

# Represents the Queries record for the operation: getScreenSchemes
public type GetScreenSchemesQueries record {
    # Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.
    string expand = "";
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 25;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `id` Sorts by screen scheme ID.
    #  *  `name` Sorts by screen scheme name.
    "name"|"-name"|"+name"|"id"|"-id"|"+id" orderBy?;
    # The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # String used to perform a case-insensitive partial match with screen scheme name.
    string queryString = "";
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The conditions group associated with the transition.
public type ConditionGroupUpdate record {|
    # The nested conditions of the condition group.
    ConditionGroupUpdate[] conditionGroups?;
    # The rules for this condition.
    WorkflowRuleConfiguration[] conditions?;
    # Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
    "ANY"|"ALL" operation;
|};

# An element of the order-by JQL clause.
public type JqlQueryOrderByClauseElement record {|
    # The direction in which to order the results.
    "asc"|"desc" direction?;
    JqlQueryField 'field;
|};

# Details of the options to update for a custom field.
public type BulkCustomFieldOptionUpdateRequest record {|
    # Details of the options to update.
    CustomFieldOptionUpdate[] options?;
|};

# List of custom fields identifiers which will be used to filter configurations
public type ConfigurationsListParameters record {|
    # List of IDs or keys of the custom fields. It can be a mix of IDs and keys in the same query.
    @constraint:Array {minLength: 1}
    string[] fieldIdsOrKeys;
|};

# Details of a status.
public type JiraStatus record {|
    # The description of the status.
    string description?;
    # The ID of the status.
    string id?;
    # The name of the status.
    string name?;
    StatusScope scope?;
    # The category of the status.
    "TODO"|"IN_PROGRESS"|"DONE" statusCategory?;
    # Projects and issue types where the status is used. Only available if the `usages` expand is requested.
    ProjectIssueTypes[] usages?;
    # The workflows that use this status. Only available if the `workflowUsages` expand is requested.
    WorkflowUsages[] workflowUsages?;
|};

# A page of items.
public type PageBeanFieldConfigurationIssueTypeItem record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    FieldConfigurationIssueTypeItem[] values?;
|};

# A page of items.
public type PageBeanCustomFieldContextProjectMapping record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    CustomFieldContextProjectMapping[] values?;
|};

# Represents the Queries record for the operation: getAllLabels
public type GetAllLabelsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 1000;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The screen scheme for an issue type.
public type IssueTypeScreenSchemeItem record {|
    # The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
    string issueTypeId;
    # The ID of the issue type screen scheme.
    string issueTypeScreenSchemeId;
    # The ID of the screen scheme.
    string screenSchemeId;
|};

public type JiraMultipleSelectUserPickerField record {|
    string fieldId;
    JiraUserField[] users?;
|};

# Jql function precomputation.
public type JqlFunctionPrecomputationBean record {|
    # The list of arguments function was invoked with.
    string[] arguments?;
    # The timestamp of the precomputation creation.
    string created?;
    # The error message to be displayed to the user.
    string 'error?;
    # The field the function was executed against.
    string 'field?;
    # The function key.
    string functionKey?;
    # The name of the function.
    string functionName?;
    # The id of the precomputation.
    string id?;
    # The operator in context of which function was executed.
    string operator?;
    # The timestamp of the precomputation last update.
    string updated?;
    # The timestamp of the precomputation last usage.
    string used?;
    # The JQL fragment stored as the precomputation.
    string value?;
|};

# The default value for a URL custom field.
public type CustomFieldContextDefaultValueURL record {
    # The ID of the context.
    string contextId;
    string 'type;
    # The default URL.
    string url;
};

# A JQL query clause.
public type JqlQueryClause CompoundClause|FieldValueClause|FieldWasClause|FieldChangedClause;

# Represents the Queries record for the operation: getComments
public type GetCommentsQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 5000;
    # [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.
    "created"|"-created"|"+created" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about an issue type.
public type IssueTypeDetails record {|
    # The ID of the issue type's avatar.
    int avatarId?;
    # The description of the issue type.
    string description?;
    # Unique ID for next-gen projects.
    string entityId?;
    # Hierarchy level of the issue type.
    int:Signed32 hierarchyLevel?;
    # The URL of the issue type's avatar.
    string iconUrl?;
    # The ID of the issue type.
    string id?;
    # The name of the issue type.
    string name?;
    # Details of the next-gen projects the issue type is available in.
    Scope scope?;
    # The URL of these issue type details.
    string self?;
    # Whether this issue type is used to create subtasks.
    boolean subtask?;
|};

# Represents the Queries record for the operation: getScreens
public type GetScreensQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.
    ("GLOBAL"|"TEMPLATE"|"PROJECT")[] scope?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `id` Sorts by screen ID.
    #  *  `name` Sorts by screen name.
    "name"|"-name"|"+name"|"id"|"-id"|"+id" orderBy?;
    # The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # String used to perform a case-insensitive partial match with screen name.
    string queryString = "";
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The details of a UI modification's context, which define where to activate the UI modification.
public type UiModificationContextDetails record {|
    # The ID of the UI modification context.
    string id?;
    # Whether a context is available. For example, when a project is deleted the context becomes unavailable.
    boolean isAvailable?;
    # The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.
    string issueTypeId?;
    # The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.
    string projectId?;
    # The view type of the context. Only `GIC`(Global Issue Create), `IssueView` and `IssueTransition` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
    "GIC"|"IssueView"|"IssueTransition" viewType?;
|};

# The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.
public type JexpJqlIssues record {|
    # The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
    int:Signed32 maxResults?;
    # The JQL query.
    string query?;
    # The index of the first issue to return from the JQL query.
    int startAt?;
    # Determines how to validate the JQL query and treat the validation results.
    "strict"|"warn"|"none" validation = "strict";
|};

# A webhook.
public type Webhook record {|
    # The Jira events that trigger the webhook.
    ("jira:issue_created"|"jira:issue_updated"|"jira:issue_deleted"|"comment_created"|"comment_updated"|"comment_deleted"|"issue_property_set"|"issue_property_deleted")[] events;
    # The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
    int expirationDate?;
    # A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
    string[] fieldIdsFilter?;
    # The ID of the webhook.
    int id;
    # A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
    string[] issuePropertyKeysFilter?;
    # The JQL filter that specifies which issues the webhook is sent for.
    string jqlFilter;
|};

# Details of a permission and its availability to a user.
public type UserPermission record {
    # Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
    boolean deprecatedKey?;
    # The description of the permission.
    string description?;
    # Whether the permission is available to the user in the queried context.
    boolean havePermission?;
    # The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
    string id?;
    # The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
    string 'key?;
    # The name of the permission.
    string name?;
    # The type of the permission.
    "GLOBAL"|"PROJECT" 'type?;
};

public type MoveFieldBean record {|
    # The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
    string after?;
    # The named position to which the screen tab field should be moved. Required if `after` isn't provided.
    "Earlier"|"Later"|"First"|"Last" position?;
|};

# Details about a group.
public type GroupName record {|
    # The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    string? groupId?;
    # The name of group.
    string name?;
    # The URL for these group details.
    string self?;
|};

# Represents the Queries record for the operation: findUsersWithAllPermissions
public type FindUsersWithAllPermissionsQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The project key for the project (case sensitive).
    string projectKey?;
    # The issue key for the issue.
    string issueKey?;
    # A comma separated list of permissions. Permissions can be specified as any:
    # 
    #  *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).
    #  *  custom project permission added by Connect apps.
    #  *  (deprecated) one of the following:
    #     
    #      *  ASSIGNABLE\_USER
    #      *  ASSIGN\_ISSUE
    #      *  ATTACHMENT\_DELETE\_ALL
    #      *  ATTACHMENT\_DELETE\_OWN
    #      *  BROWSE
    #      *  CLOSE\_ISSUE
    #      *  COMMENT\_DELETE\_ALL
    #      *  COMMENT\_DELETE\_OWN
    #      *  COMMENT\_EDIT\_ALL
    #      *  COMMENT\_EDIT\_OWN
    #      *  COMMENT\_ISSUE
    #      *  CREATE\_ATTACHMENT
    #      *  CREATE\_ISSUE
    #      *  DELETE\_ISSUE
    #      *  EDIT\_ISSUE
    #      *  LINK\_ISSUE
    #      *  MANAGE\_WATCHER\_LIST
    #      *  MODIFY\_REPORTER
    #      *  MOVE\_ISSUE
    #      *  PROJECT\_ADMIN
    #      *  RESOLVE\_ISSUE
    #      *  SCHEDULE\_ISSUE
    #      *  SET\_ISSUE\_SECURITY
    #      *  TRANSITION\_ISSUE
    #      *  VIEW\_VERSION\_CONTROL
    #      *  VIEW\_VOTERS\_AND\_WATCHERS
    #      *  VIEW\_WORKFLOW\_READONLY
    #      *  WORKLOG\_DELETE\_ALL
    #      *  WORKLOG\_DELETE\_OWN
    #      *  WORKLOG\_EDIT\_ALL
    #      *  WORKLOG\_EDIT\_OWN
    #      *  WORK\_ISSUE
    string permissions;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
    string query?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type CreatePrioritySchemeDetailsPriorityIdsItemsInteger int;

# The ID of a notification scheme.
public type NotificationSchemeId record {
    # The ID of a notification scheme.
    string id;
};

# A list of issue IDs.
public type IssueList record {|
    # The list of issue IDs.
    string[] issueIds;
|};

# An ordered list of custom field option IDs and information on where to move them.
public type OrderOfCustomFieldOptions record {|
    # The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.
    string after?;
    # A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.
    string[] customFieldOptionIds;
    # The position the custom field options should be moved to. Required if `after` isn't provided.
    "First"|"Last" position?;
|};

# The workflows that use this status. Only available if the `workflowUsages` expand is requested.
public type WorkflowUsages record {|
    # Workflow ID.
    string workflowId?;
    # Workflow name.
    string workflowName?;
|};

# Details of a dashboard.
public type Dashboard record {|
    # The automatic refresh interval for the dashboard in milliseconds.
    int:Signed32 automaticRefreshMs?;
    string description?;
    # The details of any edit share permissions for the dashboard.
    SharePermission[] editPermissions?;
    # The ID of the dashboard.
    string id?;
    # Whether the dashboard is selected as a favorite by the user.
    boolean isFavourite?;
    # Whether the current user has permission to edit the dashboard.
    boolean isWritable?;
    # The name of the dashboard.
    string name?;
    # The owner of the dashboard.
    UserBean owner?;
    # The number of users who have this dashboard as a favorite.
    int popularity?;
    # The rank of this dashboard.
    int:Signed32 rank?;
    # The URL of these dashboard details.
    string self?;
    # The details of any view share permissions for the dashboard.
    SharePermission[] sharePermissions?;
    # Whether the current dashboard is system dashboard.
    boolean systemDashboard?;
    # The URL of the dashboard.
    string view?;
|};

# The list of issue type IDs to be removed from the field configuration scheme.
public type IssueTypeIdsToRemove record {|
    # The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs.
    string[] issueTypeIds;
|};

# List of security schemes.
public type SecuritySchemes record {|
    # List of security schemes.
    SecurityScheme[] issueSecuritySchemes?;
|};

# Details of a notification scheme.
public type UpdateNotificationSchemeDetails record {
    # The description of the notification scheme.
    @constraint:String {maxLength: 4000}
    string description?;
    # The name of the notification scheme. Must be unique.
    @constraint:String {maxLength: 255}
    string name?;
};

# A metric that provides insight into the active licence details
public type LicenseMetric record {|
    # The key of a specific license metric.
    string 'key?;
    # The calculated value of a licence metric linked to the key. An example licence metric is the approximate number of user accounts.
    string value?;
|};

# Details of the statuses being created and their scope.
public type StatusCreateRequest record {|
    StatusScope scope;
    # Details of the statuses being created.
    StatusCreate[] statuses;
|};

# The default value for a Forge group custom field.
public type CustomFieldContextDefaultValueForgeGroupField record {
    # The ID of the context.
    string contextId;
    # The ID of the the default group.
    string groupId;
    string 'type;
};

# The results from a JQL query.
public type AutoCompleteSuggestions record {|
    # The list of suggested item.
    AutoCompleteSuggestion[] results?;
|};

# Mapping of an issue type to a context.
public type IssueTypeToContextMapping record {|
    # The ID of the context.
    string contextId;
    # Whether the context is mapped to any issue type.
    boolean isAnyIssueType?;
    # The ID of the issue type.
    string issueTypeId?;
|};

# Details about permissions.
public type Permissions record {|
    # List of permissions.
    record {|UserPermission...;|} permissions?;
|};

public type OldToNewSecurityLevelMappingsBean record {|
    # The new issue security level ID. Providing null will clear the assigned old level from issues.
    string newLevelId;
    # The old issue security level ID. Providing null will remap all issues without any assigned levels.
    string oldLevelId;
|};

public type SimpleApplicationPropertyBean record {|
    # The ID of the application property.
    string id?;
    # The new value.
    string value?;
|};

# Associated field configuration scheme and project.
public type FieldConfigurationSchemeProjectAssociation record {|
    # The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
    string fieldConfigurationSchemeId?;
    # The ID of the project.
    string projectId;
|};

# The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.
public type WorkflowTransitions record {|
    # The post-functions of the transition.
    WorkflowRuleConfiguration[] actions?;
    ConditionGroupConfiguration? conditions?;
    # The custom event ID of the transition.
    string? customIssueEventId?;
    # The description of the transition.
    string description?;
    # The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
    # 
    # # Deprecated
    @deprecated
    WorkflowStatusAndPort[] 'from?;
    # The ID of the transition.
    string id?;
    # The statuses the transition can start from, and the mapping of ports between the statuses.
    WorkflowTransitionLinks[] links?;
    # The name of the transition.
    string name?;
    # The properties of the transition.
    record {|string...;|} properties?;
    WorkflowStatusAndPort? to?;
    # The status the transition goes to.
    string toStatusReference?;
    WorkflowRuleConfiguration? transitionScreen?;
    # The triggers of the transition.
    WorkflowTrigger[] triggers?;
    # The transition type.
    "INITIAL"|"GLOBAL"|"DIRECTED" 'type?;
    # The validators of the transition.
    WorkflowRuleConfiguration[] validators?;
|};

# A list of custom field options for a context.
public type CustomFieldCreatedContextOptionsList record {|
    # The created custom field options.
    CustomFieldContextOption[] options?;
|};

# A collection of transition rules.
public type WorkflowRules record {|
    WorkflowCondition conditionsTree?;
    # The workflow post functions.
    WorkflowTransitionRule[] postFunctions?;
    # The workflow validators.
    WorkflowTransitionRule[] validators?;
|};

# Details of a priority scheme.
public type UpdatePrioritySchemeRequestBean record {|
    # The default priority of the scheme.
    int defaultPriorityId?;
    # The description of the priority scheme.
    @constraint:String {maxLength: 4000}
    string description?;
    # Instructions to migrate issues.
    PriorityMapping mappings?;
    # The name of the priority scheme. Must be unique.
    @constraint:String {maxLength: 255}
    string name?;
    # The priorities in the scheme.
    UpdatePrioritiesInSchemeRequestBean priorities?;
    # The projects in the scheme.
    UpdateProjectsInSchemeRequestBean projects?;
|};

# Details of the status being updated.
public type StatusUpdate record {
    # The description of the status.
    string description?;
    # The ID of the status.
    string id;
    # The name of the status.
    string name;
    # The category of the status.
    "TODO"|"IN_PROGRESS"|"DONE" statusCategory;
};

# A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40.
public type PagedListUserDetailsApplicationUser record {|
    # The index of the last item returned on the page.
    int:Signed32 end\-index?;
    # The list of items.
    UserDetails[] items?;
    # The maximum number of results that could be on the page.
    int:Signed32 max\-results?;
    # The number of items on the page.
    int:Signed32 size?;
    # The index of the first item returned on the page.
    int:Signed32 start\-index?;
|};

# The Connect provided ecosystem rules available.
public type AvailableWorkflowConnectRule record {|
    # The add-on providing the rule.
    string addonKey?;
    # The URL creation path segment defined in the Connect module.
    string createUrl?;
    # The rule description.
    string description?;
    # The URL edit path segment defined in the Connect module.
    string editUrl?;
    # The module providing the rule.
    string moduleKey?;
    # The rule name.
    string name?;
    # The rule key.
    string ruleKey?;
    # The rule type.
    "Condition"|"Validator"|"Function"|"Screen" ruleType?;
    # The URL view path segment defined in the Connect module.
    string viewUrl?;
|};

# The sanitized JQL queries for the given account IDs.
public type SanitizedJqlQueries record {|
    # The list of sanitized JQL queries.
    SanitizedJqlQuery[] queries?;
|};

# The project and issue type mapping with a matching custom field context.
public type ContextForProjectAndIssueType record {|
    # The ID of the custom field context.
    string contextId;
    # The ID of the issue type.
    string issueTypeId;
    # The ID of the project.
    string projectId;
|};

# Details about a project type.
public type ProjectType record {|
    # The color of the project type.
    string color?;
    # The key of the project type's description.
    string descriptionI18nKey?;
    # The formatted key of the project type.
    string formattedKey?;
    # The icon of the project type.
    string icon?;
    # The key of the project type.
    string 'key?;
|};

# The IDs of the screen schemes for the issue type IDs.
public type IssueTypeScreenSchemeMapping record {|
    # The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme.
    string issueTypeId;
    # The ID of the screen scheme. Only screen schemes used in classic projects are accepted.
    string screenSchemeId;
|};

# Can contain multiple field values of following types depending on `type` key
public type fields MandatoryFieldValue|MandatoryFieldValueForADF;

# A page of items.
public type PageBeanIssueTypeScreenScheme record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeScreenScheme[] values?;
|};

# Workflow metadata and usage detail.
public type WorkflowMetadataRestModel record {|
    # The description of the workflow.
    string description;
    # The ID of the workflow.
    string id;
    # The name of the workflow.
    string name;
    # Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme.
    SimpleUsage[] usage;
    DocumentVersion version;
|};

public type ProjectRoleActorsUpdateBean record {|
    # The actors to add to the project role.
    # 
    # Add groups using:
    # 
    #  *  `atlassian-group-role-actor` and a list of group names.
    #  *  `atlassian-group-role-actor-id` and a list of group IDs.
    # 
    # As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.
    # 
    # Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
    record {|string[]...;|} categorisedActors?;
    # The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
    int id?;
|};

# Details of a remote issue link.
public type RemoteIssueLinkRequest record {
    # Details of the remote application the linked item is in. For example, trello.
    Application application?;
    # An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.
    # 
    # Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
    # 
    # The maximum length is 255 characters.
    string globalId?;
    # Details of the item linked to.
    RemoteObject 'object;
    # Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira.
    string relationship?;
};

# The transition update data. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.
public type TransitionUpdateDTO record {
    # The post-functions of the transition.
    WorkflowRuleConfiguration[] actions?;
    ConditionGroupUpdate? conditions?;
    # The custom event ID of the transition.
    string customIssueEventId?;
    # The description of the transition.
    string description?;
    # The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
    # 
    # # Deprecated
    @deprecated
    StatusReferenceAndPort[] 'from?;
    # The ID of the transition.
    string id;
    # The statuses the transition can start from, and the mapping of ports between the statuses.
    WorkflowTransitionLinks[] links?;
    # The name of the transition.
    string name;
    # The properties of the transition.
    record {|string...;|} properties?;
    StatusReferenceAndPort? to?;
    # The status the transition goes to.
    string toStatusReference?;
    WorkflowRuleConfiguration? transitionScreen?;
    # The triggers of the transition.
    WorkflowTrigger[] triggers?;
    # The transition type.
    "INITIAL"|"GLOBAL"|"DIRECTED" 'type;
    # The validators of the transition.
    WorkflowRuleConfiguration[] validators?;
};

# Number of archived/unarchived issues and list of errors that occurred during the action, if any.
public type IssueArchivalSyncResponse record {|
    Errors errors?;
    int numberOfIssuesUpdated?;
|};

# An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
public type IssueEntityPropertiesForMultiUpdate record {|
    # The ID of the issue.
    int issueID?;
    # Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.
    record {|JsonNode...;|} properties?;
|};

public type JiraExpressionsComplexityValueBean record {|
    # The maximum allowed complexity. The evaluation will fail if this value is exceeded.
    int:Signed32 'limit;
    # The complexity value of the current expression.
    int:Signed32 value;
|};

# A rule configuration.
public type RuleConfiguration record {|
    # Whether the rule is disabled.
    boolean disabled = false;
    # A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
    @constraint:String {maxLength: 255}
    string tag?;
    # Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page.
    string value;
|};

# Represents the Queries record for the operation: getFieldConfigurationSchemeProjectMapping
public type GetFieldConfigurationSchemeProjectMappingQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
    int[] projectId;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:
# 
#  *  `line` and `column`
#  *  `expression`
public type JiraExpressionValidationError record {|
    # The text column in which the error occurred.
    int:Signed32 column?;
    # The part of the expression in which the error occurred.
    string expression?;
    # The text line in which the error occurred.
    int:Signed32 line?;
    # Details about the error.
    string message;
    # The error type.
    "syntax"|"type"|"other" 'type;
|};

# Represents the Queries record for the operation: getAllUserDataClassificationLevels
public type GetAllUserDataClassificationLevelsQueries record {
    # Ordering of the results by a given field. If not provided, values will not be sorted.
    "rank"|"-rank"|"+rank" orderBy?;
    # Optional set of statuses to filter by.
    ("PUBLISHED"|"ARCHIVED"|"DRAFT")[] status?;
};

# A page of items.
public type PageBeanJqlFunctionPrecomputationBean record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    JqlFunctionPrecomputationBean[] values?;
|};

# Defaults for a User Picker (single) custom field.
public type CustomFieldContextSingleUserPickerDefaults record {
    # The ID of the default user.
    string accountId;
    # The ID of the context.
    string contextId;
    string 'type;
    UserFilter userFilter;
};

# The list of required status mappings by issue type.
public type RequiredMappingByIssueType record {|
    # The ID of the issue type.
    string issueTypeId?;
    # The status IDs requiring mapping.
    string[] statusIds?;
|};

# Represents the Queries record for the operation: getUserEmail
public type GetUserEmailQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.
    @constraint:String {maxLength: 128}
    string accountId;
};

# Represents the Queries record for the operation: getCustomFieldContextsForProjectsAndIssueTypes
public type GetCustomFieldContextsForProjectsAndIssueTypesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type JiraExpressionEvalContextBean record {|
    # The ID of the board that is available under the `board` variable when evaluating the expression.
    int board?;
    # Custom context variables and their types. These variable types are available for use in a custom context:
    # 
    #  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
    #  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
    #  *  `json`: A JSON object containing custom content.
    #  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
    CustomContextVariable[] custom?;
    # The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
    int customerRequest?;
    # The issue that is available under the `issue` variable when evaluating the expression.
    IdOrKeyBean issue?;
    # The collection of issues that is available under the `issues` variable when evaluating the expression.
    JexpIssues issues?;
    # The project that is available under the `project` variable when evaluating the expression.
    IdOrKeyBean project?;
    # The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
    int serviceDesk?;
    # The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
    int sprint?;
|};

public type WorklogsMoveRequestBean record {|
    # A list of worklog IDs.
    int[] ids?;
    # The issue id or key of the destination issue
    string issueIdOrKey?;
|};

# Details about the replacement for a deleted version.
public type CustomFieldReplacement record {|
    # The ID of the custom field in which to replace the version number.
    int customFieldId?;
    # The version number to use as a replacement for the deleted version.
    int moveTo?;
|};

# The ID of an event that is being mapped to notifications.
public type NotificationSchemeEventTypeId record {
    # The ID of the notification scheme event.
    string id;
};

# Represents the Queries record for the operation: getProjectVersionsPaginated
public type GetProjectVersionsPaginatedQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `issuesstatus` Returns the number of issues in each status category for each version.
    #  *  `operations` Returns actions that can be performed on the specified version.
    #  *  `driver` Returns the Atlassian account ID of the version driver.
    #  *  `approvers` Returns a list containing the approvers for this version.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).
    string query?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `description` Sorts by version description.
    #  *  `name` Sorts by version name.
    #  *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
    #  *  `sequence` Sorts by the order of appearance in the user interface.
    #  *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.
    "description"|"-description"|"+description"|"name"|"-name"|"+name"|"releaseDate"|"-releaseDate"|"+releaseDate"|"sequence"|"-sequence"|"+sequence"|"startDate"|"-startDate"|"+startDate" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.
    string status?;
};

# Details of an issue navigator column item.
public type ColumnItem record {|
    # The issue navigator column label.
    string label?;
    # The issue navigator column value.
    string value?;
|};

# Errors of bulk edit action.
public type BulkEditActionError record {|
    # The error messages.
    string[] errorMessages;
    # The errors.
    record {|string...;|} errors;
|};

# A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
# [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
public type ConnectModule record {
};

# Represents the Queries record for the operation: deleteWorkflowSchemeIssueType
public type DeleteWorkflowSchemeIssueTypeQueries record {
    # Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.
    boolean updateDraftIfNeeded = false;
};

# A page of items.
public type PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    PrioritySchemeWithPaginatedPrioritiesAndProjects[] values?;
|};

public type CustomFieldDefinitionJsonBean record {|
    # The description of the custom field, which is displayed in Jira.
    string description?;
    # The name of the custom field, which is displayed in Jira. This is not the unique identifier.
    string name;
    # The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.  
    # The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
    # 
    #  *  `cascadingselect`: `cascadingselectsearcher`
    #  *  `datepicker`: `daterange`
    #  *  `datetime`: `datetimerange`
    #  *  `float`: `exactnumber` or `numberrange`
    #  *  `grouppicker`: `grouppickersearcher`
    #  *  `importid`: `exactnumber` or `numberrange`
    #  *  `labels`: `labelsearcher`
    #  *  `multicheckboxes`: `multiselectsearcher`
    #  *  `multigrouppicker`: `multiselectsearcher`
    #  *  `multiselect`: `multiselectsearcher`
    #  *  `multiuserpicker`: `userpickergroupsearcher`
    #  *  `multiversion`: `versionsearcher`
    #  *  `project`: `projectsearcher`
    #  *  `radiobuttons`: `multiselectsearcher`
    #  *  `readonlyfield`: `textsearcher`
    #  *  `select`: `multiselectsearcher`
    #  *  `textarea`: `textsearcher`
    #  *  `textfield`: `textsearcher`
    #  *  `url`: `exacttextsearcher`
    #  *  `userpicker`: `userpickergroupsearcher`
    #  *  `version`: `versionsearcher`
    # 
    # If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
    "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:daterange"|"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange"|"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"|"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:numberrange"|"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher" searcherKey?;
    # The type of the custom field. These built-in custom field types are available:
    # 
    #  *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
    #  *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
    #  *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
    #  *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
    #  *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
    #  *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
    #  *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
    #  *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
    #  *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
    #  *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
    #  *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
    #  *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
    #  *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
    #  *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
    #  *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
    #  *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
    #  *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
    #  *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
    #  *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
    #  *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
    #  *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)
    # 
    # To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
    string 'type;
|};

# A page of items.
public type PageBeanSecurityLevel record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    SecurityLevel[] values?;
|};

# The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
public type Scope record {
    # The project the item has scope in.
    ProjectDetails project?;
    # The type of scope.
    "PROJECT"|"TEMPLATE" 'type?;
};

# Represents the Queries record for the operation: getIssueTypeScreenSchemes
public type GetIssueTypeScreenSchemesQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.
    string expand = "";
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `name` Sorts by issue type screen scheme name.
    #  *  `id` Sorts by issue type screen scheme ID.
    "name"|"-name"|"+name"|"id"|"-id"|"+id" orderBy = "id";
    # The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # String used to perform a case-insensitive partial match with issue type screen scheme name.
    string queryString = "";
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about a filter.
public type Filter record {|
    # \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
    string approximateLastUsed?;
    # A description of the filter.
    string description?;
    # The groups and projects that can edit the filter.
    SharePermission[] editPermissions?;
    # Whether the filter is selected as a favorite.
    boolean favourite?;
    # The count of how many users have selected this filter as a favorite, including the filter owner.
    int favouritedCount?;
    # The unique identifier for the filter.
    string id?;
    # The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
    string jql?;
    # The name of the filter. Must be unique.
    string name;
    # The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
    User owner?;
    # A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
    string searchUrl?;
    # The URL of the filter.
    string self?;
    # The groups and projects that the filter is shared with.
    SharePermission[] sharePermissions?;
    # A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.
    UserList sharedUsers?;
    # A paginated list of the users that are subscribed to the filter.
    FilterSubscriptionsList subscriptions?;
    # A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
    string viewUrl?;
|};

# The default value for a single select custom field.
public type CustomFieldContextDefaultValueSingleOption record {
    # The ID of the context.
    string contextId;
    # The ID of the default option.
    string optionId;
    string 'type;
};

# Represents the Queries record for the operation: createWorkflowTransitionProperty
public type CreateWorkflowTransitionPropertyQueries record {
    # The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
    "live"|"draft" workflowMode = "live";
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
    string 'key;
};

# The list of issue type IDs.
public type IssueTypeIds record {|
    # The list of issue type IDs.
    string[] issueTypeIds;
|};

# Details of issue security scheme level.
public type UpdateIssueSecurityLevelDetails record {
    # The description of the issue security scheme level.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the issue security scheme level. Must be unique.
    @constraint:String {maxLength: 60}
    string name?;
};

# Represents the Queries record for the operation: createIssue
public type CreateIssueQueries record {
    # Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.
    boolean updateHistory = false;
};

# A page of items.
public type PageBeanWorkflowTransitionRules record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    WorkflowTransitionRules[] values?;
|};

# A page of items.
public type PageBeanWorkflow record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Workflow[] values?;
|};

public type IssueFieldOptionScopeBean record {|
    # Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
    GlobalScopeBean global?;
    # DEPRECATED
    int[] projects?;
    # Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
    ProjectScopeBean[] projects2?;
|};

# The default value for a version picker custom field.
public type CustomFieldContextDefaultValueSingleVersionPicker record {
    string 'type;
    # The ID of the default version.
    string versionId;
    # The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
    string versionOrder?;
};

# Details of changes to a priority scheme's priorities that require suggested priority mappings.
public type SuggestedMappingsForPrioritiesRequestBean record {|
    # The ids of priorities being removed from the scheme.
    int[] add?;
    # The ids of priorities being removed from the scheme.
    int[] remove?;
|};

# Details of a screen.
public type UpdateScreenDetails record {|
    # The description of the screen. The maximum length is 255 characters.
    string description?;
    # The name of the screen. The name must be unique. The maximum length is 255 characters.
    string name?;
|};

# Represents the Queries record for the operation: getWorkflow
public type GetWorkflowQueries record {
    # The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
    string workflowName?;
    # Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# Details of a dashboard.
public type DashboardDetails record {|
    # The description of the dashboard.
    string description?;
    # The edit permissions for the dashboard.
    SharePermission[] editPermissions;
    # The name of the dashboard.
    string name;
    # The share permissions for the dashboard.
    SharePermission[] sharePermissions;
|};

# Details of field configuration items.
public type FieldConfigurationItemsDetails record {|
    # Details of fields in a field configuration.
    FieldConfigurationItem[] fieldConfigurationItems;
|};

# A paginated list of subscriptions to a filter.
public type FilterSubscriptionsList record {|
    # The index of the last item returned on the page.
    int:Signed32 end\-index?;
    # The list of items.
    FilterSubscription[] items?;
    # The maximum number of results that could be on the page.
    int:Signed32 max\-results?;
    # The number of items on the page.
    int:Signed32 size?;
    # The index of the first item returned on the page.
    int:Signed32 start\-index?;
|};

# Project list with assigned field configuration schema.
public type FieldConfigurationSchemeProjects record {|
    FieldConfigurationScheme fieldConfigurationScheme?;
    # The IDs of projects using the field configuration scheme.
    string[] projectIds;
|};

# Details of the operations that can be performed on the issue.
public type Operations record {
    # Details of the link groups defining issue operations.
    LinkGroup[] linkGroups?;
};

# Details for changing owners of shareable entities
public type BulkChangeOwnerDetails record {|
    # Whether the name is fixed automatically if it's duplicated after changing owner.
    boolean autofixName;
    # The account id of the new owner.
    string newOwner;
|};

# Represents the Queries record for the operation: getIssueTypeScreenSchemeMappings
public type GetIssueTypeScreenSchemeMappingsQueries record {
    # The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.
    int[] issueTypeScreenSchemeId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A project category.
public type ProjectCategory record {|
    # The description of the project category.
    string description?;
    # The ID of the project category.
    string id?;
    # The name of the project category. Required on create, optional on update.
    string name?;
    # The URL of the project category.
    string self?;
|};

# Issue security level member.
public type IssueSecurityLevelMember record {|
    # The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    PermissionHolder holder;
    # The ID of the issue security level member.
    int id;
    # The ID of the issue security level.
    int issueSecurityLevelId;
    boolean managed?;
|};

public type WarningCollection record {|
    string[] warnings?;
|};

# Issue Bulk Edit Payload
public type IssueBulkEditPayload record {|
    # An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.
    JiraIssueFields editedFieldsInput;
    # List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself).
    string[] selectedActions;
    # List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types.
    string[] selectedIssueIdsOrKeys;
    # A boolean value that indicates whether to send a bulk change notification when the issues are being edited.
    # 
    # If `true`, dispatches a bulk notification email to users about the updates.
    boolean? sendBulkNotification = true;
|};

# Metadata for an issue attachment.
public type AttachmentMetadata record {|
    # Details of the user who attached the file.
    User author?;
    # The URL of the attachment.
    string content?;
    # The datetime the attachment was created.
    string created?;
    # The name of the attachment file.
    string filename?;
    # The ID of the attachment.
    int id?;
    # The MIME type of the attachment.
    string mimeType?;
    # Additional properties of the attachment.
    record {} properties?;
    # The URL of the attachment metadata details.
    string self?;
    # The size of the attachment.
    int size?;
    # The URL of a thumbnail representing the attachment.
    string thumbnail?;
|};

# Details about the mapping from a status to a new status for an issue type.
public type StatusMapping record {|
    # The ID of the issue type.
    string issueTypeId;
    # The ID of the new status.
    string newStatusId;
    # The ID of the status.
    string statusId;
|};

# Represents the Queries record for the operation: getAllUsersDefault
public type GetAllUsersDefaultQueries record {
    # The maximum number of items to return.
    int:Signed32 maxResults = 50;
    # The index of the first item to return.
    int:Signed32 startAt = 0;
};

# The list of status mappings.
public type WorkflowAssociationStatusMapping record {|
    # The ID of the status in the new workflow.
    string newStatusId;
    # The ID of the status in the old workflow that isn't present in the new workflow.
    string oldStatusId;
|};

# The default text for a text area custom field.
public type CustomFieldContextDefaultValueTextArea record {
    # The default text. The maximum length is 32767 characters.
    string text?;
    string 'type;
};

public type PageOfStatuses record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The URL of the next page of results, if any.
    string nextPage?;
    # The URL of this page.
    string self?;
    # The index of the first item returned on the page.
    int startAt?;
    # Number of items that satisfy the search.
    int total?;
    # The list of items.
    JiraStatus[] values?;
|};

public type JiraIssueTypeField record {|
    string issueTypeId;
|};

# Details of a status.
public type JiraWorkflowStatus record {|
    # The description of the status.
    string description?;
    # The ID of the status.
    string id?;
    # The name of the status.
    string name?;
    WorkflowScope scope?;
    # The category of the status.
    "TODO"|"IN_PROGRESS"|"DONE" statusCategory?;
    # The reference of the status.
    string statusReference?;
    # The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses.
    ProjectIssueTypes[] usages?;
|};

# Details about a group.
public type GroupDetails record {|
    # The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    string? groupId?;
    # The name of the group.
    string name?;
|};

# Details about a user assigned to a project role.
public type RoleActor record {|
    ProjectRoleGroup actorGroup?;
    ProjectRoleUser actorUser?;
    # The avatar of the role actor.
    string avatarUrl?;
    # The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.
    string displayName?;
    # The ID of the role actor.
    int id?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # The type of role actor.
    "atlassian-group-role-actor"|"atlassian-user-role-actor" 'type?;
|};

# Permissions which a user has on a project.
public type ProjectPermissions record {|
    # Whether the logged user can edit the project.
    boolean canEdit?;
|};

public type AttachmentArchiveImpl record {|
    # The list of the items included in the archive.
    AttachmentArchiveEntry[] entries?;
    # The number of items in the archive.
    int:Signed32 totalEntryCount?;
|};

public type JiraMultipleVersionPickerField record {|
    "ADD"|"REMOVE"|"REPLACE"|"REMOVE_ALL" bulkEditMultiSelectFieldOption;
    string fieldId;
    JiraVersionField[] versions;
|};

# Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
public type MappingsByIssueTypeOverride record {|
    # The ID of the issue type for this mapping.
    string issueTypeId;
    # The list of status mappings.
    WorkflowAssociationStatusMapping[] statusMappings;
|};

# A page of items.
public type PageBeanUiModificationDetails record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    UiModificationDetails[] values?;
|};

# A page of items.
public type PageBeanGroupDetails record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    GroupDetails[] values?;
|};

# Represents the Queries record for the operation: readWorkflows
public type ReadWorkflowsQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
    #  *  `statuses.usages` Returns the project and issue types that each status is associated with.
    string expand?;
    # Return the new fields (`toStatusReference`/`links`) instead of the deprecated fields (`to`/`from`) for workflow transition port mappings.
    boolean useTransitionLinksFormat = false;
    # Return the new field `approvalConfiguration` instead of the deprecated status properties for approval configuration.
    boolean useApprovalConfiguration = false;
};

# The details of a UI modification.
public type CreateUiModificationDetails record {|
    # List of contexts of the UI modification. The maximum number of contexts is 1000.
    UiModificationContextDetails[] contexts?;
    # The data of the UI modification. The maximum size of the data is 50000 characters.
    string data?;
    # The description of the UI modification. The maximum length is 255 characters.
    string description?;
    # The name of the UI modification. The maximum length is 255 characters.
    string name;
|};

public type UserMigrationBean record {|
    string accountId?;
    string 'key?;
    string username?;
|};

# Represents the Queries record for the operation: updateWorkflowMapping
public type UpdateWorkflowMappingQueries record {
    # The name of the workflow.
    string workflowName;
};

# The JQL query to sanitize for the account ID. If the account ID is null, sanitizing is performed for an anonymous user.
public type JqlQueryToSanitize record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    string? accountId?;
    # The query to sanitize.
    string query;
|};

# The details of a custom field context.
public type CustomFieldContext record {|
    # The description of the context.
    string description;
    # The ID of the context.
    string id;
    # Whether the context apply to all issue types.
    boolean isAnyIssueType;
    # Whether the context is global.
    boolean isGlobalContext;
    # The name of the context.
    string name;
|};

# Represents the Queries record for the operation: getWorklog
public type GetWorklogQueries record {
    # Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts
    # 
    # `properties`, which returns worklog properties.
    string expand = "";
};

public type JiraExpressionEvalRequestBean record {|
    # The context in which the Jira expression is evaluated.
    JiraExpressionEvalContextBean context?;
    # The Jira expression to evaluate.
    string expression;
|};

# The current version details of this workflow scheme.
public type DocumentVersion record {|
    # The version UUID.
    string id;
    # The version number.
    int versionNumber;
|};

# Status mapping for statuses in source workflow to respective target status in target workflow.
public type targetStatus record {|
    # An object with the key as the ID of the target status and value with the list of the IDs of the current source statuses.
    record {|string[]...;|} statuses;
|};

public type SharePermissionInputBean record {|
    # The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
    string accountId?;
    # The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
    string groupId?;
    # The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
    string groupname?;
    # The ID of the project to share the filter with. Set `type` to `project`.
    string projectId?;
    # The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
    string projectRoleId?;
    # The rights for the share permission.
    int:Signed32 rights?;
    # The type of the share permission.Specify the type as follows:
    # 
    #  *  `user` Share with a user.
    #  *  `group` Share with a group. Specify `groupname` as well.
    #  *  `project` Share with a project. Specify `projectId` as well.
    #  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
    #  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
    #  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
    "user"|"project"|"group"|"projectRole"|"global"|"authenticated" 'type;
|};

# Time tracking details.
public type TimeTrackingDetails record {|
    # The original estimate of time needed for this issue in readable format.
    string originalEstimate?;
    # The original estimate of time needed for this issue in seconds.
    int originalEstimateSeconds?;
    # The remaining estimate of time needed for this issue in readable format.
    string remainingEstimate?;
    # The remaining estimate of time needed for this issue in seconds.
    int remainingEstimateSeconds?;
    # Time worked on this issue in readable format.
    string timeSpent?;
    # Time worked on this issue in seconds.
    int timeSpentSeconds?;
|};

# A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
public type UserContextVariable record {
    # The account ID of the user.
    string accountId;
    # Type of custom context variable.
    string 'type;
};

# Represents the Queries record for the operation: getPrecomputations
public type GetPrecomputationsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `functionKey` Sorts by the functionKey.
    #  *  `used` Sorts by the used timestamp.
    #  *  `created` Sorts by the created timestamp.
    #  *  `updated` Sorts by the updated timestamp.
    string orderBy?;
    # The function key in format:
    # 
    #  *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`
    #  *  Connect: `[App key]__[Module key]`
    string[] functionKey?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type JiraSingleSelectUserPickerField record {|
    string fieldId;
    JiraUserField user?;
|};

# The default value for a Forge collection of groups custom field.
public type CustomFieldContextDefaultValueForgeMultiGroupField record {
    # The ID of the context.
    string contextId;
    # The IDs of the default groups.
    string[] groupIds;
    string 'type;
};

# Details of an issue transition.
public type IssueTransition record {
    # Expand options that include additional transition details in the response.
    string expand?;
    # Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
    record {|FieldMetadata...;|} fields?;
    # Whether there is a screen associated with the issue transition.
    boolean hasScreen?;
    # The ID of the issue transition. Required when specifying a transition to undertake.
    string id?;
    # Whether the transition is available to be performed.
    boolean isAvailable?;
    # Whether the issue has to meet criteria before the issue transition is applied.
    boolean isConditional?;
    # Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
    boolean isGlobal?;
    # Whether this is the initial issue transition for the workflow.
    boolean isInitial?;
    boolean looped?;
    # The name of the issue transition.
    string name?;
    # Details of the issue status after the transition.
    StatusDetails to?;
};

# Details of a new priority scheme
public type CreatePrioritySchemeDetails record {|
    # The ID of the default priority for the priority scheme.
    int defaultPriorityId;
    # The description of the priority scheme.
    @constraint:String {maxLength: 4000}
    string description?;
    # Mappings of issue priorities for issues being migrated in and out of this priority scheme.
    PriorityMapping mappings?;
    # The name of the priority scheme. Must be unique.
    @constraint:String {maxLength: 255}
    string name;
    # The IDs of priorities in the scheme.
    CreatePrioritySchemeDetailsPriorityIdsItemsInteger[] priorityIds;
    # The IDs of projects that will use the priority scheme.
    int[] projectIds?;
|};

# Represents the Queries record for the operation: getNotificationScheme
public type GetNotificationSchemeQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `all` Returns all expandable information
    #  *  `field` Returns information about any custom fields assigned to receive an event
    #  *  `group` Returns information about any groups assigned to receive an event
    #  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
    #  *  `projectRole` Returns information about any project roles assigned to receive an event
    #  *  `user` Returns information about any users assigned to receive an event
    string expand?;
};

# The result of evaluating a Jira expression.
public type JiraExpressionResult record {|
    # Contains various characteristics of the performed expression evaluation.
    JiraExpressionEvaluationMetaDataBean meta?;
    # The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
    anydata value;
|};

# The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results.
public type ValidationOptionsForUpdate record {|
    @constraint:Array {maxLength: 2}
    ("WARNING"|"ERROR")[] levels?;
|};

# Issue security scheme, project, and remapping details.
public type AssociateSecuritySchemeWithProjectDetails record {|
    # The list of scheme levels which should be remapped to new levels of the issue security scheme.
    OldToNewSecurityLevelMappingsBean[] oldToNewSecurityLevelMappings?;
    # The ID of the project.
    string projectId;
    # The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.
    string schemeId;
|};

# Represents the Queries record for the operation: getSecurityLevelMembers
public type GetSecurityLevelMembersQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `all` Returns all expandable information
    #  *  `field` Returns information about the custom field granted the permission
    #  *  `group` Returns information about the group that is granted the permission
    #  *  `projectRole` Returns information about the project role granted the permission
    #  *  `user` Returns information about the user who is granted the permission
    string expand?;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.
    string[] levelId?;
    # The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
    string[] schemeId?;
    # The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.
    string[] id?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# The IDs of the screens for the screen types of the screen scheme.
public type ScreenTypes record {|
    # The ID of the create screen.
    int create?;
    # The ID of the default screen. Required when creating a screen scheme.
    int default;
    # The ID of the edit screen.
    int edit?;
    # The ID of the view screen.
    int view?;
|};

# Contains details about a version approver.
public type VersionApprover record {
    # The Atlassian account ID of the approver.
    string accountId?;
    # A description of why the user is declining the approval.
    string declineReason?;
    # A description of what the user is approving within the specified version.
    string description?;
    # The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
    string status?;
};

# The list of requested issues & fields.
public type BulkIssueResults record {|
    # When Jira can't return an issue enumerated in a request due to a retriable error or payload constraint, we'll return the respective issue ID with a corresponding error message. This list is empty when there are no errors Issues which aren't found or that the user doesn't have permission to view won't be returned in this list.
    IssueError[] issueErrors?;
    # The list of issues.
    IssueBean[] issues?;
|};

# A workflow with transition rules.
public type WorkflowTransitionRules record {|
    # The list of conditions within the workflow.
    AppWorkflowTransitionRule[] conditions?;
    # The list of post functions within the workflow.
    AppWorkflowTransitionRule[] postFunctions?;
    # The list of validators within the workflow.
    AppWorkflowTransitionRule[] validators?;
    WorkflowId workflowId;
|};

# Represents the Queries record for the operation: getFieldsPaginated
public type GetFieldsPaginatedQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `key` returns the key for each field
    #  *  `stableId` returns the stableId for each field
    #  *  `lastUsed` returns the date when the value of the field last changed
    #  *  `screensCount` returns the number of screens related to a field
    #  *  `contextsCount` returns the number of contexts related to a field
    #  *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)
    #  *  `searcherKey` returns the searcher key for each custom field
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # String used to perform a case-insensitive partial match with field names or descriptions.
    string query?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `contextsCount` sorts by the number of contexts related to a field
    #  *  `lastUsed` sorts by the date when the value of the field last changed
    #  *  `name` sorts by the field name
    #  *  `screensCount` sorts by the number of screens related to a field
    "contextsCount"|"-contextsCount"|"+contextsCount"|"lastUsed"|"-lastUsed"|"+lastUsed"|"name"|"-name"|"+name"|"screensCount"|"-screensCount"|"+screensCount"|"projectsCount"|"-projectsCount"|"+projectsCount" orderBy?;
    # The IDs of the custom fields to return or, where `query` is specified, filter.
    string[] id?;
    # The type of fields to search.
    ("custom"|"system")[] 'type?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of an notification scheme.
public type CreateNotificationSchemeDetails record {
    # The description of the notification scheme.
    @constraint:String {maxLength: 4000}
    string description?;
    # The name of the notification scheme. Must be unique (case-insensitive).
    @constraint:String {maxLength: 255}
    string name;
    # The list of notifications which should be added to the notification scheme.
    NotificationSchemeEventDetails[] notificationSchemeEvents?;
};

# The data classification.
public type DataClassificationTagBean record {|
    # The color of the data classification object.
    string color?;
    # The description of the data classification object.
    string description?;
    # The guideline of the data classification object.
    string guideline?;
    # The ID of the data classification object.
    string id;
    # The name of the data classification object.
    string name?;
    # The rank of the data classification object.
    int:Signed32 rank?;
    # The status of the data classification object.
    string status;
|};

# Details of any errors encountered while updating workflow transition rules.
public type WorkflowTransitionRulesUpdateErrors record {|
    # A list of workflows.
    WorkflowTransitionRulesUpdateErrorDetails[] updateResults;
|};

# Represents the Queries record for the operation: searchResolutions
public type SearchResolutionsQueries record {
    # When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false
    boolean onlyDefault = false;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of resolutions IDs to be filtered out
    string[] id?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# Details about a notification scheme event.
public type NotificationSchemeEvent record {|
    NotificationEvent event?;
    EventNotification[] notifications?;
|};

# A field auto-complete suggestion.
public type AutoCompleteSuggestion record {|
    # The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag.
    string displayName?;
    # The value of a suggested item.
    string value?;
|};

# Details about the server Jira is running on.
public type WorkflowTransitionProperty record {
    # The ID of the transition property.
    string id?;
    # The key of the transition property. Also known as the name of the transition property.
    string 'key?;
    # The value of the transition property.
    string value;
};

# Represents the Queries record for the operation: searchForIssuesUsingJql
public type SearchForIssuesUsingJqlQueries record {
    # Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `transitions` Returns all possible transitions for the issue.
    #  *  `operations` Returns all possible operations for the issue.
    #  *  `editmeta` Returns information about how each field can be edited.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    #  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
    string expand?;
    # The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:
    # 
    #  *  If no JQL expression is provided, all issues are returned.
    #  *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
    #  *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
    string jql?;
    # The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.
    int:Signed32 maxResults = 50;
    # Determines how to validate the JQL query and treat the validation results. Supported values are:
    # 
    #  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
    #  *  `warn` Returns all errors as warnings.
    #  *  `none` No validation is performed.
    #  *  `true` *Deprecated* A legacy synonym for `strict`.
    #  *  `false` *Deprecated* A legacy synonym for `warn`.
    # 
    # Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
    "strict"|"warn"|"none"|"true"|"false" validateQuery = "strict";
    # Reference fields by their key (rather than ID).
    boolean fieldsByKeys = false;
    # A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    # 
    # Examples:
    # 
    #  *  `summary,comment` Returns only the summary and comments fields.
    #  *  `-description` Returns all navigable (default) fields except description.
    #  *  `*all,-comment` Returns all fields except comments.
    # 
    # This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.
    # 
    # Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
    string[] fields?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.
    string[] properties?;
    # Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).
    boolean failFast = false;
};

# A page of items.
public type PageBeanComment record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Comment[] values?;
|};

# The request for updating the default project classification level.
public type UpdateDefaultProjectClassificationBean record {|
    # The ID of the project classification.
    string id;
|};

# Represents the Queries record for the operation: getPolicies
public type GetPoliciesQueries record {
    # A list of project identifiers. This parameter accepts a comma-separated list.
    string ids?;
};

# Details of updates for a custom field.
public type ConnectCustomFieldValues record {|
    # The list of custom field update details.
    ConnectCustomFieldValue[] updateValueList?;
|};

# The new default issue resolution.
public type SetDefaultResolutionRequest record {|
    # The ID of the new default issue resolution. Must be an existing ID or null. Setting this to null erases the default resolution setting.
    string id;
|};

# Details of the contextual configuration for a custom field.
public type BulkContextualConfiguration record {|
    # The field configuration.
    anydata configuration?;
    # The ID of the custom field.
    string customFieldId;
    # The ID of the field context the configuration is associated with.
    string fieldContextId;
    # The ID of the configuration.
    string id;
    # The field value schema.
    anydata schema?;
|};

public type IssueCommentListRequestBean record {|
    # The list of comment IDs. A maximum of 1000 IDs can be specified.
    int[] ids;
|};

# Represents the Queries record for the operation: getFieldConfigurationItems
public type GetFieldConfigurationItemsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getAllPermissionSchemes
public type GetAllPermissionSchemesQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# Represents the Headers record for the operation: MigrationResource.workflowRuleSearch_post
public type MigrationresourceWorkflowrulesearch_postHeaders record {
    # The app migration transfer ID.
    string Atlassian\-Transfer\-Id;
};

# An issue priority.
public type Priority record {
    # The avatarId of the avatar for the issue priority. This parameter is nullable and when set, this avatar references the universal avatar APIs.
    int avatarId?;
    # The description of the issue priority.
    string description?;
    # The URL of the icon for the issue priority.
    string iconUrl?;
    # The ID of the issue priority.
    string id?;
    # Whether this priority is the default.
    boolean isDefault?;
    # The name of the issue priority.
    string name?;
    # Priority schemes associated with the issue priority.
    ExpandPrioritySchemePage schemes?;
    # The URL of the issue priority.
    string self?;
    # The color used to indicate the issue priority.
    string statusColor?;
};

# The list of available gadgets.
public type AvailableDashboardGadgetsResponse record {|
    # The list of available gadgets.
    AvailableDashboardGadget[] gadgets;
|};

# Counts of the number of issues in various statuses.
public type VersionIssuesStatus record {
    # Count of issues with status *done*.
    int done?;
    # Count of issues with status *in progress*.
    int inProgress?;
    # Count of issues with status *to do*.
    int toDo?;
    # Count of issues with a status other than *to do*, *in progress*, and *done*.
    int unmapped?;
};

public type AvatarUrlsBean record {|
    # The URL of the item's 16x16 pixel avatar.
    string '16x16?;
    # The URL of the item's 24x24 pixel avatar.
    string '24x24?;
    # The URL of the item's 32x32 pixel avatar.
    string '32x32?;
    # The URL of the item's 48x48 pixel avatar.
    string '48x48?;
|};

public type IdOrKeyBean record {|
    # The ID of the referenced item.
    int id?;
    # The key of the referenced item.
    string 'key?;
|};

# Announcement banner configuration.
public type AnnouncementBannerConfiguration record {|
    # Hash of the banner data. The client detects updates by comparing hash IDs.
    string hashId?;
    # Flag indicating if the announcement banner can be dismissed by the user.
    boolean isDismissible?;
    # Flag indicating if the announcement banner is enabled or not.
    boolean isEnabled?;
    # The text on the announcement banner.
    string message?;
    # Visibility of the announcement banner.
    "PUBLIC"|"PRIVATE" visibility?;
|};

# Represents the Queries record for the operation: getVersion
public type GetVersionQueries record {
    # Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `operations` Returns the list of operations available for this version.
    #  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
    #  *  `driver` Returns the Atlassian account ID of the version driver.
    #  *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.
    string expand?;
};

# Represents the Queries record for the operation: getWorkflowScheme
public type GetWorkflowSchemeQueries record {
    # Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# Details of an issue resolution.
public type Resolution record {|
    # The description of the issue resolution.
    string description?;
    # The ID of the issue resolution.
    string id?;
    # The name of the issue resolution.
    string name?;
    # The URL of the issue resolution.
    string self?;
|};

# The list of required status mappings by workflow.
public type RequiredMappingByWorkflows record {|
    # The ID of the source workflow.
    string sourceWorkflowId?;
    # The status IDs requiring mapping.
    string[] statusIds?;
    # The ID of the target workflow.
    string targetWorkflowId?;
|};

# The approval configuration of a status within a workflow. Applies only to Jira Service Management approvals.
public type ApprovalConfiguration record {|
    # Whether the approval configuration is active.
    "true"|"false" active;
    # How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.
    "number"|"percent"|"numberPerPrincipal" conditionType;
    # The number or percentage of approvals required for a request to be approved. If `conditionType` is `number`, the value must be 20 or less. If `conditionType` is `percent`, the value must be 100 or less.
    string conditionValue;
    # A list of roles that should be excluded as possible approvers.
    ("assignee"|"reporter"?)[]? exclude?;
    # The custom field ID of the "Approvers" or "Approver Groups" field.
    string fieldId;
    # The custom field ID of the field used to pre-populate the Approver field. Only supports the "Affected Services" field.
    string? prePopulatedFieldId?;
    # The numeric ID of the transition to be executed if the request is approved.
    string transitionApproved;
    # The numeric ID of the transition to be executed if the request is declined.
    string transitionRejected;
|};

# Details about data policies for a list of projects.
public type ProjectDataPolicies record {|
    # List of projects with data policies.
    ProjectWithDataPolicy[] projectDataPolicies?;
|};

# The default text for a read only custom field.
public type CustomFieldContextDefaultValueReadOnly record {
    # The default text. The maximum length is 255 characters.
    string text?;
    string 'type;
};

# Represents the Queries record for the operation: getAllFieldConfigurations
public type GetAllFieldConfigurationsQueries record {
    # If *true* returns default field configurations only.
    boolean isDefault = false;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The query string used to match against field configuration names and descriptions.
    string query = "";
    # The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A list of editable field details.
public type IssueUpdateMetadata record {
    record {|FieldMetadata...;|} fields?;
};

# Details of an issue type hierarchy level.
public type ProjectIssueTypesHierarchyLevel record {|
    # The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    string entityId?;
    # The list of issue types in the hierarchy level.
    IssueTypeInfo[] issueTypes?;
    # The level of the issue type hierarchy level.
    int:Signed32 level?;
    # The name of the issue type hierarchy level.
    string name?;
|};

# Change the order of issue resolutions.
public type ReorderIssueResolutionsRequest record {|
    # The ID of the resolution. Required if `position` isn't provided.
    string after?;
    # The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.
    string[] ids;
    # The position for issue resolutions to be moved to. Required if `after` isn't provided.
    string position?;
|};

# Represents the Queries record for the operation: getProject
public type GetProjectQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
    # 
    #  *  `description` The project description.
    #  *  `issueTypes` The issue types associated with the project.
    #  *  `lead` The project lead.
    #  *  `projectKeys` All project keys associated with the project.
    #  *  `issueTypeHierarchy` The project issue type hierarchy.
    string expand?;
    # A list of project properties to return for the project. This parameter accepts a comma-separated list.
    string[] properties?;
};

# The result of evaluating a Jira expression.This bean will be replacing `JiraExpressionResultBean` bean as part of new evaluate endpoint
public type JExpEvaluateJiraExpressionResultBean record {|
    # Contains various characteristics of the performed expression evaluation.
    JExpEvaluateMetaDataBean meta?;
    # The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
    anydata value;
|};

# Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
public type IssueEntityProperties record {|
    # A list of entity property IDs.
    @constraint:Array {maxLength: 10000, minLength: 1}
    int[] entitiesIds?;
    # A list of entity property keys and values.
    record {|JsonNode...;|} properties?;
|};

# Project ID details.
public type ProjectId record {|
    # The ID of the project.
    string id;
|};

# An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
public type KeywordOperand record {
    # The keyword that is the operand value.
    "empty" keyword;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# A list of matched issues or errors for each JQL query, in the order the JQL queries were passed.
public type IssueMatches record {|
    IssueMatchesForJQL[] matches;
|};

# A page of items.
public type PageBeanIssueSecuritySchemeToProjectMapping record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueSecuritySchemeToProjectMapping[] values?;
|};

# Represents the Queries record for the operation: updateWorkflows
public type UpdateWorkflowsQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
    #  *  `statuses.usages` Returns the project and issue types that each status is associated with.
    string expand?;
};

# The list of features on a project.
public type ContainerForProjectFeatures record {|
    # The project features.
    ProjectFeature[] features?;
|};

public type ListWrapperCallbackGroupName record {|
|};

# Details of the feature state.
public type ProjectFeatureState record {|
    # The feature state.
    "ENABLED"|"DISABLED"|"COMING_SOON" state?;
|};

public type VersionMoveBean record {|
    # The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
    string after?;
    # An absolute position in which to place the moved version. Cannot be used with `after`.
    "Earlier"|"Later"|"First"|"Last" position?;
|};

# Details of an application role.
public type ApplicationRole record {|
    # The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
    string[] defaultGroups?;
    # The groups that are granted default access for this application role.
    GroupName[] defaultGroupsDetails?;
    # Deprecated.
    boolean defined?;
    # The groups associated with the application role.
    GroupName[] groupDetails?;
    # The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
    string[] groups?;
    boolean hasUnlimitedSeats?;
    # The key of the application role.
    string 'key?;
    # The display name of the application role.
    string name?;
    # The maximum count of users on your license.
    int:Signed32 numberOfSeats?;
    # Indicates if the application role belongs to Jira platform (`jira-core`).
    boolean platform?;
    # The count of users remaining on your license.
    int:Signed32 remainingSeats?;
    # Determines whether this application role should be selected by default on user creation.
    boolean selectedByDefault?;
    # The number of users counting against your license.
    int:Signed32 userCount?;
    # The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
    string userCountDescription?;
|};

# List issues archived within a specified date range.
public type DateRangeFilterRequest record {|
    # List issues archived after a specified date, passed in the YYYY-MM-DD format.
    string dateAfter;
    # List issues archived before a specified date provided in the YYYY-MM-DD format.
    string dateBefore;
|};

# Represents the Queries record for the operation: deleteProjectRoleActorsFromRole
public type DeleteProjectRoleActorsFromRoleQueries record {
    # The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.
    string groupId?;
    # The user account ID of the user to remove as a default actor.
    string user?;
    # The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
    string group?;
};

# List of issue transitions.
public type Transitions record {|
    # Expand options that include additional transitions details in the response.
    string expand?;
    # List of issue transitions.
    IssueTransition[] transitions?;
|};

# Represents the Queries record for the operation: deleteActor
public type DeleteActorQueries record {
    # The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.
    string groupId?;
    # The user account ID of the user to remove from the project role.
    string user?;
    # The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
    string group?;
};

public type IssueLimitReportResponseBean record {|
    # A list of ids of issues approaching the limit and their field count
    record {|record {|int...;|}...;|} issuesApproachingLimit?;
    # A list of ids of issues breaching the limit and their field count
    record {|record {|int...;|}...;|} issuesBreachingLimit?;
    # The fields and their defined limits
    record {|int:Signed32...;|} limits?;
|};

public type ProjectLandingPageInfo record {|
    record {|string...;|} attributes?;
    int boardId?;
    string boardName?;
    string projectKey?;
    string projectType?;
    string queueCategory?;
    int queueId?;
    string queueName?;
    boolean simpleBoard?;
    boolean simplified?;
    string url?;
|};

# The update workflow scheme payload.
public type WorkflowSchemeUpdateRequest record {
    # The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.
    string defaultWorkflowId?;
    # The new description for this workflow scheme.
    string description;
    # The ID of this workflow scheme.
    string id;
    # The new name for this workflow scheme.
    string name;
    # Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
    MappingsByIssueTypeOverride[] statusMappingsByIssueTypeOverride?;
    # The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
    MappingsByWorkflow[] statusMappingsByWorkflows?;
    DocumentVersion version;
    # Mappings from workflows to issue types.
    WorkflowSchemeAssociation[] workflowsForIssueTypes?;
};

# Represents the Queries record for the operation: workflowCapabilities
public type WorkflowCapabilitiesQueries record {
    string issueTypeId?;
    string projectId?;
    string workflowId?;
};

# Details of an issue type.
public type IssueTypeInfo record {|
    # The avatar of the issue type.
    int avatarId?;
    # The ID of the issue type.
    int id?;
    # The name of the issue type.
    string name?;
|};

# Details of a field configuration.
public type FieldConfiguration record {|
    # The description of the field configuration.
    string description;
    # The ID of the field configuration.
    int id;
    # Whether the field configuration is the default.
    boolean isDefault?;
    # The name of the field configuration.
    string name;
|};

# Represents the Queries record for the operation: getWorkflowsPaginated
public type GetWorkflowsPaginatedQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `transitions` For each workflow, returns information about the transitions inside the workflow.
    #  *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
    #  *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.
    #  *  `statuses` For each workflow, returns information about the statuses inside the workflow.
    #  *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
    #  *  `default` For each workflow, returns information about whether this is the default workflow.
    #  *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.
    #  *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.
    #  *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.
    #  *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `name` Sorts by workflow name.
    #  *  `created` Sorts by create time.
    #  *  `updated` Sorts by update time.
    "name"|"-name"|"+name"|"created"|"-created"|"+created"|"updated"|"+updated"|"-updated" orderBy?;
    # The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`.
    string[] workflowName?;
    # String used to perform a case-insensitive partial match with workflow name.
    string queryString?;
    # Filters active and inactive workflows.
    boolean isActive?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of a changed worklog.
public type ChangedWorklog record {|
    # Details of properties associated with the change.
    EntityProperty[] properties?;
    # The datetime of the change.
    int updatedTime?;
    # The ID of the worklog.
    int worklogId?;
|};

# Represents the Queries record for the operation: getFiltersPaginated
public type GetFiltersPaginatedQueries record {
    # This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.
    string owner?;
    # EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideSharePermissions = false;
    # User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `description` Returns the description of the filter.
    #  *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
    #  *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
    #  *  `jql` Returns the JQL query that the filter uses.
    #  *  `owner` Returns the owner of the filter.
    #  *  `searchUrl` Returns a URL to perform the filter's JQL query.
    #  *  `sharePermissions` Returns the share permissions defined for the filter.
    #  *  `editPermissions` Returns the edit permissions defined for the filter.
    #  *  `isWritable` Returns whether the current user has permission to edit the filter.
    #  *  `approximateLastUsed` \[Experimental\] Returns the approximate date and time when the filter was last evaluated.
    #  *  `subscriptions` Returns the users that are subscribed to the filter.
    #  *  `viewUrl` Returns a URL to view the filter.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
    string groupId?;
    # String used to perform a case-insensitive partial match with `name`.
    string filterName?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
    #  *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
    #  *  `is_favourite` Sorts by whether the filter is marked as a favorite.
    #  *  `id` Sorts by filter ID.
    #  *  `name` Sorts by filter name.
    #  *  `owner` Sorts by the ID of the filter owner.
    #  *  `is_shared` Sorts by whether the filter is shared.
    "description"|"-description"|"+description"|"favourite_count"|"-favourite_count"|"+favourite_count"|"id"|"-id"|"+id"|"is_favourite"|"-is_favourite"|"+is_favourite"|"name"|"-name"|"+name"|"owner"|"-owner"|"+owner"|"is_shared"|"-is_shared"|"+is_shared" orderBy = "name";
    # The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs.
    int[] id?;
    # As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.
    string groupname?;
    # Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type BulkOperationErrorResult record {|
    ErrorCollection elementErrors?;
    int:Signed32 failedElementNumber?;
    int:Signed32 status?;
|};

# Update projects in a scheme
public type UpdateProjectsInSchemeRequestBean record {
    # Projects to add to a scheme
    PrioritySchemeChangesWithoutMappings add?;
    # Projects to remove from a scheme
    PrioritySchemeChangesWithoutMappings remove?;
};

# Issue Bulk Move Payload
public type IssueBulkMovePayload record {|
    # A boolean value that indicates whether to send a bulk change notification when the issues are being moved.
    # 
    # If `true`, dispatches a bulk notification email to users about the updates.
    boolean? sendBulkNotification = true;
    # An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.
    # 
    # The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.
    # 
    #  *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.
    #  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.
    #  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.
    record {|targetToSourcesMapping...;|} targetToSourcesMapping?;
|};

# The default value for a Forge date time custom field.
public type CustomFieldContextDefaultValueForgeDateTimeField record {
    # The ID of the context.
    string contextId;
    # The default date-time in ISO format. Ignored if `useCurrent` is true.
    string dateTime?;
    string 'type;
    # Whether to use the current date.
    boolean useCurrent = false;
};

# Details about data policies for a project.
public type ProjectWithDataPolicy record {|
    # Data policy.
    ProjectDataPolicy dataPolicy?;
    # The project ID.
    int id?;
|};

# Details of the projects the option is available in.
public type IssueFieldOptionConfiguration record {|
    # DEPRECATED
    ("notSelectable"|"defaultValue")[] attributes?;
    # Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
    IssueFieldOptionScopeBean scope?;
|};

# Represents the Queries record for the operation: getCreateIssueMetaIssueTypeId
public type GetCreateIssueMetaIssueTypeIdQueries record {
    # The maximum number of items to return per page.
    @constraint:Int {maxValue: 200}
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
};

# The details of a created custom field context.
public type CreateCustomFieldContext record {|
    # The description of the context.
    string description?;
    # The ID of the context.
    string id?;
    # The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
    string[] issueTypeIds?;
    # The name of the context.
    string name;
    # The list of project IDs associated with the context. If the list is empty, the context is global.
    string[] projectIds?;
|};

# The default value for a Forge object custom field.
public type CustomFieldContextDefaultValueForgeObjectField record {
    # The default JSON object.
    record {} 'object?;
    string 'type;
};

# Represents the Queries record for the operation: setUserColumns
public type SetUserColumnsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
};

# Represents the Queries record for the operation: getIssueLimitReport
public type GetIssueLimitReportQueries record {
    # Return issue keys instead of issue ids in the response.
    # 
    # Usage: Add `?isReturningKeys=true` to the end of the path to request issue keys.
    boolean isReturningKeys = false;
};

# Represents the Queries record for the operation: getUserGroups
public type GetUserGroupsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# A status category.
public type StatusCategory record {
    # The name of the color used to represent the status category.
    string colorName?;
    # The ID of the status category.
    int id?;
    # The key of the status category.
    string 'key?;
    # The name of the status category.
    string name?;
    # The URL of the status category.
    string self?;
};

# Details about a licensed Jira application.
public type LicensedApplication record {|
    # The ID of the application.
    string id;
    # The licensing plan.
    "UNLICENSED"|"FREE"|"PAID" plan;
|};

# Details of names changed in the record event.
public type ChangedValueBean record {|
    # The value of the field before the change.
    string changedFrom?;
    # The value of the field after the change.
    string changedTo?;
    # The name of the field changed.
    string fieldName?;
|};

# Bulk issue property update request details.
public type BulkIssuePropertyUpdateRequest record {|
    # EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored.
    string expression?;
    # The bulk operation filter.
    IssueFilterForBulkPropertySet filter?;
    # The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
    anydata value?;
|};

public type PermissionsKeysBean record {|
    # A list of permission keys.
    string[] permissions;
|};

# A workflow transition rule.
public type AppWorkflowTransitionRule record {|
    RuleConfiguration configuration;
    # The ID of the transition rule.
    string id;
    # The key of the rule, as defined in the Connect or the Forge app descriptor.
    string 'key;
    WorkflowTransition transition?;
|};

# An operand that is a user-provided value.
public type ValueOperand record {
    # Encoded value, which can be used directly in a JQL query.
    string encodedValue?;
    # The operand value.
    string value;
};

# Represents the Queries record for the operation: bulkMoveWorklogs
public type BulkMoveWorklogsQueries record {
    # Defines how to update the issues' time estimate, the options are:
    # 
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being moved in the source issue, and increases it in the destination issue.
    "leave"|"auto" adjustEstimate = "auto";
    # Whether the work log entry should be moved to and from the issues even if the issues are not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
    boolean overrideEditableFlag = false;
};

# The ID of an issue type scheme.
public type IssueTypeSchemeID record {|
    # The ID of the issue type scheme.
    string issueTypeSchemeId;
|};

# A page of items.
public type PageBeanIssueTypeToContextMapping record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeToContextMapping[] values?;
|};

# Represents the Queries record for the operation: getUserEmailBulk
public type GetUserEmailBulkQueries record {
    # The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).
    GetUserEmailBulkQueriesAccountIdItemsString[] accountId;
};

# List of updates for a custom fields.
public type MultipleCustomFieldValuesUpdateDetails record {|
    MultipleCustomFieldValuesUpdate[] updates?;
|};

# Details of scheme and new default level.
public type DefaultLevelValue record {
    # The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level.
    string defaultLevelId;
    # The ID of the issue security scheme to set default level for.
    string issueSecuritySchemeId;
};

public type SecuritySchemeLevelBean record {|
    # The description of the issue security scheme level.
    @constraint:String {maxLength: 4000}
    string description?;
    # Specifies whether the level is the default level. False by default.
    boolean isDefault?;
    # The list of level members which should be added to the issue security scheme level.
    SecuritySchemeLevelMemberBean[] members?;
    # The name of the issue security scheme level. Must be unique.
    @constraint:String {maxLength: 255}
    string name;
|};

# Details of any errors encountered while updating workflow transition rules for a workflow.
public type WorkflowTransitionRulesUpdateErrorDetails record {|
    # A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
    record {|string[]...;|} ruleUpdateErrors;
    # The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
    string[] updateErrors;
    WorkflowId workflowId;
|};

# A screen with tab details.
public type ScreenWithTab record {|
    # The description of the screen.
    string description?;
    # The ID of the screen.
    int id?;
    # The name of the screen.
    string name?;
    # The scope of the screen.
    Scope scope?;
    # The tab for the screen.
    ScreenableTab tab?;
|};

# Error messages from an operation.
public type ErrorCollection record {|
    # The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
    string[] errorMessages?;
    # The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
    record {|string...;|} errors?;
    int:Signed32 status?;
|};

# Represents the Queries record for the operation: getProjectVersions
public type GetProjectVersionsQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.
    string expand?;
};

public type JiraColorInput record {|
    string name;
|};

# An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
public type IssueContextVariable record {
    # The issue ID.
    int id?;
    # The issue key.
    string 'key?;
    # Type of custom context variable.
    string 'type;
};

public type NestedResponse record {|
    ErrorCollection errorCollection?;
    int:Signed32 status?;
    WarningCollection warningCollection?;
|};

# Details of an item associated with the changed record.
public type AssociatedItemBean record {|
    # The ID of the associated record.
    string id?;
    # The name of the associated record.
    string name?;
    # The ID of the associated parent record.
    string parentId?;
    # The name of the associated parent record.
    string parentName?;
    # The type of the associated record.
    string typeName?;
|};

public type JQLCountResultsBean record {|
    # Number of issues matching JQL query.
    int count?;
|};

# Details about an attachment.
public type Attachment record {
    # Details of the user who added the attachment.
    UserDetails author?;
    # The content of the attachment.
    string content?;
    # The datetime the attachment was created.
    string created?;
    # The file name of the attachment.
    string filename?;
    # The ID of the attachment.
    string id?;
    # The MIME type of the attachment.
    string mimeType?;
    # The URL of the attachment details response.
    string self?;
    # The size of the attachment.
    int size?;
    # The URL of a thumbnail representing the attachment.
    string thumbnail?;
};

# Details of a notification scheme event.
public type NotificationSchemeEventDetails record {
    # The ID of the event.
    NotificationSchemeEventTypeId event;
    # The list of notifications mapped to a specified event.
    NotificationSchemeNotificationDetails[] notifications;
};

public type JiraSelectedOptionField record {|
    int optionId?;
|};

# Represents the Queries record for the operation: DynamicModulesResource.removeModules_delete
public type DynamicmodulesresourceRemovemodules_deleteQueries record {
    # The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
    # For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.
    # Nonexistent keys are ignored.
    string[] moduleKey?;
};

public type BulkOperationProgress record {|
    # A timestamp of when the task was submitted.
    string created?;
    # Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.
    record {|string[]...;|} failedAccessibleIssues?;
    # The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.
    int:Signed32 invalidOrInaccessibleIssueCount?;
    # List of issue IDs for which the operation was successful and that the user has permission to view.
    int[] processedAccessibleIssues?;
    # Progress of the task as a percentage.
    int progressPercent?;
    # A timestamp of when the task was started.
    string started?;
    # The status of the task.
    "ENQUEUED"|"RUNNING"|"COMPLETE"|"FAILED"|"CANCEL_REQUESTED"|"CANCELLED"|"DEAD" status?;
    User submittedBy?;
    # The ID of the task.
    string taskId?;
    # The number of issues that the bulk operation was attempted on.
    int:Signed32 totalIssueCount?;
    # A timestamp of when the task progress was last updated.
    string updated?;
|};

# Details of the scope of the default sharing for new filters and dashboards.
public type DefaultShareScope record {|
    # The scope of the default sharing for new filters and dashboards:
    # 
    #  *  `AUTHENTICATED` Shared with all logged-in users.
    #  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
    #  *  `PRIVATE` Not shared with any users.
    "GLOBAL"|"AUTHENTICATED"|"PRIVATE" scope;
|};

# Details about a project version.
public type Version record {|
    # If the expand option `approvers` is used, returns a list containing the approvers for this version.
    VersionApprover[] approvers?;
    # Indicates that the version is archived. Optional when creating or updating a version.
    boolean archived?;
    # The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
    string description?;
    # If the expand option `driver` is used, returns the Atlassian account ID of the driver.
    string driver?;
    # Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `operations` Returns the list of operations available for this version.
    #  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
    #  *  `driver` Returns the Atlassian account ID of the version driver.
    #  *  `approvers` Returns a list containing approvers for this version.
    # 
    # Optional for create and update.
    string expand?;
    # The ID of the version.
    string id?;
    # If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
    VersionIssuesStatus issuesStatusForFixVersion?;
    # The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
    string moveUnfixedIssuesTo?;
    # The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
    string name?;
    # If the expand option `operations` is used, returns the list of operations available for this version.
    SimpleLink[] operations?;
    # Indicates that the version is overdue.
    boolean overdue?;
    # Deprecated. Use `projectId`.
    string project?;
    # The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
    int projectId?;
    # The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
    string releaseDate?;
    # Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
    boolean released?;
    # The URL of the version.
    string self?;
    # The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
    string startDate?;
    # The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
    string userReleaseDate?;
    # The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
    string userStartDate?;
|};

# The details of the workflows to update.
public type WorkflowUpdate record {
    # The mapping of old to new status ID.
    StatusMigration[] defaultStatusMappings?;
    # The new description for this workflow.
    string description?;
    # The ID of this workflow.
    string id;
    WorkflowLayout? startPointLayout?;
    # The mapping of old to new status ID for a specific project and issue type.
    StatusMappingDTO[] statusMappings?;
    # The statuses associated with this workflow.
    StatusLayoutUpdate[] statuses;
    # The transitions of this workflow.
    TransitionUpdateDTO[] transitions;
    DocumentVersion version;
};

# The status reference and port that a transition is connected to.
# 
# # Deprecated
@deprecated
public type WorkflowStatusAndPort record {|
    # The port the transition is connected to this status.
    int:Signed32? port?;
    # The reference of this status.
    string statusReference?;
|};

public type WorkflowValidationErrorList record {|
    # The list of validation errors.
    WorkflowValidationError[] errors?;
|};

public type ArchiveIssueAsyncRequest record {|
    string jql?;
|};

# Details about a security scheme.
public type SecurityScheme record {|
    # The ID of the default security level.
    int defaultSecurityLevelId?;
    # The description of the issue security scheme.
    string description?;
    # The ID of the issue security scheme.
    int id?;
    SecurityLevel[] levels?;
    # The name of the issue security scheme.
    string name?;
    # The URL of the issue security scheme.
    string self?;
|};

# A page of items.
public type PageBeanCustomFieldContextDefaultValue record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    CustomFieldContextDefaultValue[] values?;
|};

# A page of items.
public type PageBeanNotificationSchemeAndProjectMappingJsonBean record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    NotificationSchemeAndProjectMappingJsonBean[] values?;
|};

# Represents a usage of an entity by a project ID and related issue type IDs.
public type SimpleUsage record {|
    # The issue type IDs for the usage.
    string[] issueTypeIds;
    # The project ID for the usage.
    string projectId;
|};

# Details about data policy.
public type WorkspaceDataPolicy record {|
    # Whether the workspace contains any content inaccessible to the requesting application.
    boolean anyContentBlocked?;
|};

# The list of gadgets on the dashboard.
public type DashboardGadgetResponse record {|
    # The list of gadgets.
    DashboardGadget[] gadgets;
|};

public type JiraMultipleGroupPickerField record {|
    string fieldId;
    JiraGroupInput[] groups;
|};

# Details of an operation to perform on a field.
public type FieldUpdateOperation record {|
    # The value to add to the field.
    anydata add?;
    # The field value to copy from another issue.
    anydata copy?;
    # The value to edit in the field.
    anydata edit?;
    # The value to removed from the field.
    anydata remove?;
    # The value to set in the field.
    anydata set?;
|};

# Details of a custom field option for a context.
public type CustomFieldOptionUpdate record {|
    # Whether the option is disabled.
    boolean disabled?;
    # The ID of the custom field option.
    string id;
    # The value of the custom field option.
    string value?;
|};

# A list of parsed JQL queries.
public type ParsedJqlQueries record {|
    # A list of parsed JQL queries.
    ParsedJqlQuery[] queries;
|};

# Details about the default workflow.
public type DefaultWorkflow record {|
    # Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`.
    boolean updateDraftIfNeeded?;
    # The name of the workflow to set as the default workflow.
    string workflow;
|};

# The ID of a screen scheme.
public type UpdateDefaultScreenScheme record {|
    # The ID of the screen scheme.
    string screenSchemeId;
|};

# Paginated list of worklog details
public type PageOfWorklogs record {
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The number of results on the page.
    int:Signed32 total?;
    # List of worklogs.
    Worklog[] worklogs?;
};

# The details of a UI modification.
public type UiModificationDetails record {|
    # List of contexts of the UI modification. The maximum number of contexts is 1000.
    UiModificationContextDetails[] contexts?;
    # The data of the UI modification. The maximum size of the data is 50000 characters.
    string data?;
    # The description of the UI modification. The maximum length is 255 characters.
    string description?;
    # The ID of the UI modification.
    string id;
    # The name of the UI modification. The maximum length is 255 characters.
    string name;
    # The URL of the UI modification.
    string self;
|};

# Represents the Queries record for the operation: getUiModifications
public type GetUiModificationsQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `data` Returns UI modification data.
    #  *  `contexts` Returns UI modification contexts.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The default text for a text custom field.
public type CustomFieldContextDefaultValueTextField record {
    # The default text. The maximum length is 254 characters.
    string text?;
    string 'type;
};

# Represents the Queries record for the operation: updateMultipleCustomFieldValues
public type UpdateMultipleCustomFieldValuesQueries record {
    # Whether to generate a changelog for this update.
    boolean generateChangelog = true;
};

# Details of a field.
public type Field record {|
    # Number of contexts where the field is used.
    int contextsCount?;
    # The description of the field.
    string description?;
    # The ID of the field.
    string id;
    # Whether the field is locked.
    boolean isLocked?;
    # Whether the field is shown on screen or not.
    boolean isUnscreenable?;
    # The key of the field.
    string 'key?;
    FieldLastUsed lastUsed?;
    # The name of the field.
    string name;
    # Number of projects where the field is used.
    int projectsCount?;
    JsonTypeBean schema;
    # Number of screens where the field is used.
    int screensCount?;
    # The searcher key of the field. Returned for custom fields.
    string searcherKey?;
    # The stable ID of the field.
    string stableId?;
|};

# A list of issues and their respective properties to set or update. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
public type MultiIssueEntityProperties record {|
    # A list of issue IDs and their respective properties.
    IssueEntityPropertiesForMultiUpdate[] issues?;
|};

# Represents the Queries record for the operation: getDraftWorkflow
public type GetDraftWorkflowQueries record {
    # The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
    string workflowName?;
};

# The default value for a cascading select custom field.
public type CustomFieldContextDefaultValueCascadingOption record {
    # The ID of the default cascading option.
    string cascadingOptionId?;
    # The ID of the context.
    string contextId;
    # The ID of the default option.
    string optionId;
    string 'type;
};

# Represents the Queries record for the operation: evaluateJSISJiraExpression
public type EvaluateJSISJiraExpressionQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
    string expand?;
};

# Operations allowed on a workflow
public type WorkflowOperations record {|
    # Whether the workflow can be deleted.
    boolean canDelete;
    # Whether the workflow can be updated.
    boolean canEdit;
|};

# A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.
public type UserList record {|
    # The index of the last item returned on the page.
    int:Signed32 end\-index?;
    # The list of items.
    User[] items?;
    # The maximum number of results that could be on the page.
    int:Signed32 max\-results?;
    # The number of items on the page.
    int:Signed32 size?;
    # The index of the first item returned on the page.
    int:Signed32 start\-index?;
|};

# Represents the Queries record for the operation: getIssue
public type GetIssueQueries record {
    # Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `transitions` Returns all possible transitions for the issue.
    #  *  `editmeta` Returns information about how each field can be edited.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    #  *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
    string expand?;
    # Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.
    boolean fieldsByKeys = false;
    # A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:
    # 
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    # 
    # Examples:
    # 
    #  *  `summary,comment` Returns only the summary and comments fields.
    #  *  `-description` Returns all (default) fields except description.
    #  *  `*navigable,-comment` Returns all navigable fields except comment.
    # 
    # This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.
    # 
    # Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.
    string[] fields?;
    # A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:
    # 
    #  *  `*all` Returns all issue properties.
    #  *  Any issue property key, prefixed with a minus to exclude.
    # 
    # Examples:
    # 
    #  *  `*all` Returns all properties.
    #  *  `*all,-prop1` Returns all properties except `prop1`.
    #  *  `prop1,prop2` Returns `prop1` and `prop2` properties.
    # 
    # This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
    string[] properties?;
    # Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.
    boolean updateHistory = false;
    # Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).
    boolean failFast = false;
};

# The update workflows payload.
public type WorkflowUpdateRequest record {|
    # The statuses to associate with the workflows.
    WorkflowStatusUpdate[] statuses;
    # The details of the workflows to update.
    WorkflowUpdate[] workflows;
|};

public type WorkflowSchemeReadResponse record {|
    WorkflowMetadataRestModel defaultWorkflow?;
    # The description of the workflow scheme.
    string? description?;
    # The ID of the workflow scheme.
    string id;
    # The name of the workflow scheme.
    string name;
    # The IDs of projects using the workflow scheme.
    string[] projectIdsUsingScheme;
    WorkflowScope scope;
    # Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.
    string? taskId?;
    DocumentVersion version;
    # Mappings from workflows to issue types.
    WorkflowMetadataAndIssueTypeRestModel[] workflowsForIssueTypes;
|};

# Details about a project.
public type ProjectDetails record {|
    # The URLs of the project's avatars.
    AvatarUrlsBean avatarUrls?;
    # The ID of the project.
    string id?;
    # The key of the project.
    string 'key?;
    # The name of the project.
    string name?;
    # The category the project belongs to.
    UpdatedProjectCategory projectCategory?;
    # The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    "software"|"service_desk"|"business" projectTypeKey?;
    # The URL of the project details.
    string self?;
    # Whether or not the project is simplified.
    boolean simplified?;
|};

# A page of items.
public type PageBeanProjectDetails record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ProjectDetails[] values?;
|};

# Details of a request to bulk edit shareable entity.
public type BulkEditShareableEntityRequest record {|
    # Allowed action for bulk edit shareable entity
    "changeOwner"|"changePermission"|"addPermission"|"removePermission" action;
    # The details of change owner action.
    BulkChangeOwnerDetails changeOwnerDetails?;
    # The id list of shareable entities to be changed.
    int[] entityIds;
    # Whether the actions are executed by users with Administer Jira global permission.
    boolean extendAdminPermissions?;
    # The permission details to be changed.
    PermissionDetails permissionDetails?;
|};

# Issue type screen scheme with a list of the projects that use it.
public type IssueTypeScreenSchemesProjects record {|
    # Details of an issue type screen scheme.
    IssueTypeScreenScheme issueTypeScreenScheme;
    # The IDs of the projects using the issue type screen scheme.
    string[] projectIds;
|};

# Details of the sanitized JQL query.
public type SanitizedJqlQuery record {|
    # The account ID of the user for whom sanitization was performed.
    string? accountId?;
    # The list of errors.
    ErrorCollection errors?;
    # The initial query.
    string initialQuery?;
    # The sanitized query, if there were no errors.
    string? sanitizedQuery?;
|};

# A list of issue IDs and the value to update a custom field to.
public type CustomFieldValueUpdate record {|
    # The list of issue IDs.
    int[] issueIds;
    # The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
    # 
    #  *  `string` the value must be a string.
    #  *  `number` the value must be a number.
    #  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
    #  *  `user` the value must be an object that contains the `accountId` field.
    #  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
    # 
    # A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
    anydata value;
|};

# A page of items.
public type PageBeanIssueTypeScreenSchemeItem record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeScreenSchemeItem[] values?;
|};

# List of custom fields using the version.
public type VersionUsageInCustomField record {|
    # The ID of the custom field.
    int customFieldId?;
    # The name of the custom field.
    string fieldName?;
    # Count of the issues where the custom field contains the version.
    int issueCountWithVersionInCustomField?;
|};

# The description of the page of issues loaded by the provided JQL query.
public type IssuesJqlMetaDataBean record {|
    # The number of issues that were loaded in this evaluation.
    int:Signed32 count;
    # The maximum number of issues that could be loaded in this evaluation.
    int:Signed32 maxResults;
    # The index of the first issue.
    int startAt;
    # The total number of issues the JQL returned.
    int totalCount;
    # Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
    string[] validationWarnings?;
|};

# The ID of an issue resolution.
public type ResolutionId record {
    # The ID of the issue resolution.
    string id;
};

public type PrioritySchemeChangesWithMappings record {|
    # Affected entity ids.
    int[] ids;
    # Instructions to migrate issues.
    PriorityMapping[] mappings?;
|};

# Count of a version's unresolved issues.
public type VersionUnresolvedIssuesCount record {|
    # Count of issues.
    int issuesCount?;
    # Count of unresolved issues.
    int issuesUnresolvedCount?;
    # The URL of these count details.
    string self?;
|};

public type WorklogIdsRequestBean record {|
    # A list of worklog IDs.
    int[] ids;
|};

# Details of an issue remote link.
public type RemoteIssueLink record {|
    # Details of the remote application the linked item is in.
    Application application?;
    # The global ID of the link, such as the ID of the item on the remote system.
    string globalId?;
    # The ID of the link.
    int id?;
    # Details of the item linked to.
    RemoteObject 'object?;
    # Description of the relationship between the issue and the linked item.
    string relationship?;
    # The URL of the link.
    string self?;
|};

public type IssueTypeCreateBean record {|
    # The description of the issue type.
    string description?;
    # The hierarchy level of the issue type. Use:
    # 
    #  *  `-1` for Subtask.
    #  *  `0` for Base.
    # 
    # Defaults to `0`.
    int:Signed32 hierarchyLevel?;
    # The unique name for the issue type. The maximum length is 60 characters.
    string name;
    # Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
    # 
    # Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
    "subtask"|"standard" 'type?;
|};

# Represents the Queries record for the operation: getNotificationSchemes
public type GetNotificationSchemesQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `all` Returns all expandable information
    #  *  `field` Returns information about any custom fields assigned to receive an event
    #  *  `group` Returns information about any groups assigned to receive an event
    #  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
    #  *  `projectRole` Returns information about any project roles assigned to receive an event
    #  *  `user` Returns information about any users assigned to receive an event
    string expand?;
    # When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.
    boolean onlyDefault = false;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of notification schemes IDs to be filtered by
    string[] id?;
    # The list of projects IDs to be filtered by
    string[] projectId?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

public type JiraMultipleSelectField record {|
    string fieldId;
    JiraSelectedOptionField[] options;
|};

public type WorkflowUpdateValidateRequestBean record {|
    WorkflowUpdateRequest payload;
    ValidationOptionsForUpdate validationOptions?;
|};

# Represents the Queries record for the operation: deleteIssueType
public type DeleteIssueTypeQueries record {
    # The ID of the replacement issue type.
    string alternativeIssueTypeId?;
};

# Represents the Queries record for the operation: getIssueTypeScreenSchemeProjectAssociations
public type GetIssueTypeScreenSchemeProjectAssociationsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
    int[] projectId;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of the created workflows and statuses.
public type WorkflowCreateResponse record {|
    # List of created statuses.
    JiraWorkflowStatus[] statuses?;
    # List of created workflows.
    JiraWorkflow[] workflows?;
|};

# Represents the Queries record for the operation: getProjectComponentsPaginated
public type GetProjectComponentsPaginatedQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
    string query?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `description` Sorts by the component description.
    #  *  `issueCount` Sorts by the count of issues associated with the component.
    #  *  `lead` Sorts by the user key of the component's project lead.
    #  *  `name` Sorts by component name.
    "description"|"-description"|"+description"|"issueCount"|"-issueCount"|"+issueCount"|"lead"|"-lead"|"+lead"|"name"|"-name"|"+name" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.
    "jira"|"compass"|"auto" componentSource = "jira";
};

@constraint:String {maxLength: 128}
public type GetUserEmailBulkQueriesAccountIdItemsString string;

public type JiraCascadingSelectField record {|
    JiraSelectedOptionField childOptionValue?;
    string fieldId;
    JiraSelectedOptionField parentOptionValue;
|};

# Represents the Queries record for the operation: deleteResolution
public type DeleteResolutionQueries record {
    # The ID of the issue resolution that will replace the currently selected resolution.
    string replaceWith;
};

# A page of items.
public type PageBeanContextForProjectAndIssueType record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ContextForProjectAndIssueType[] values?;
|};

# A priority scheme with paginated priorities and projects.
public type PrioritySchemeWithPaginatedPrioritiesAndProjects record {
    boolean default?;
    # The ID of the default issue priority.
    string defaultPriorityId?;
    # The description of the priority scheme
    string description?;
    # The ID of the priority scheme.
    string id;
    boolean isDefault?;
    # The name of the priority scheme
    string name;
    # The paginated list of priorities.
    PageBeanPriorityWithSequence priorities?;
    # The paginated list of projects.
    PageBeanProjectDetails projects?;
    # The URL of the priority scheme.
    string self?;
};

# Details of a parsed JQL query.
public type ParsedJqlQuery record {|
    # The list of syntax or validation errors.
    string[] errors?;
    # The JQL query that was parsed and validated.
    string query;
    # The syntax tree of the query. Empty if the query was invalid.
    JqlQuery structure?;
|};

# Represents the Queries record for the operation: getAllWorkflowSchemes
public type GetAllWorkflowSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A page of items.
public type PageBeanSecurityLevelMember record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    SecurityLevelMember[] values?;
|};

# Represents the Queries record for the operation: getFavouriteFilters
public type GetFavouriteFiltersQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Represents the Queries record for the operation: deleteProject
public type DeleteProjectQueries record {
    # Whether this project is placed in the Jira recycle bin where it will be available for restoration.
    boolean enableUndo = true;
};

# Details about the status mappings for publishing a draft workflow scheme.
public type PublishDraftWorkflowScheme record {|
    # Mappings of statuses to new statuses for issue types.
    StatusMapping[] statusMappings?;
|};

# A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator.
public type FieldChangedClause record {
    JqlQueryField 'field;
    # The operator applied to the field.
    "changed" operator;
    # The list of time predicates.
    JqlQueryClauseTimePredicate[] predicates;
};

# Details of an issue resolution.
public type UpdateResolutionDetails record {
    # The description of the resolution.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the resolution. Must be unique.
    @constraint:String {maxLength: 60}
    string name;
};

# Metadata for an item in an attachment archive.
public type AttachmentArchiveItemReadable record {|
    # The position of the item within the archive.
    int index?;
    # The label for the archive item.
    string label?;
    # The MIME type of the archive item.
    string mediaType?;
    # The path of the archive item.
    string path?;
    # The size of the archive item.
    string size?;
|};

# The result of a JQL search with issues reconsilation.
public type SearchAndReconcileResults record {|
    # The list of issues found by the search or reconsiliation.
    IssueBean[] issues?;
    # The ID and name of each field in the search results.
    record {|string...;|} names?;
    # Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. This token will expire in 7 days.
    string nextPageToken?;
    # The schema describing the field types in the search results.
    record {|JsonTypeBean...;|} schema?;
|};

# The application the linked item is in.
public type Application record {
    # The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last.
    string name?;
    # The name-spaced type of the application, used by registered rendering apps.
    string 'type?;
};

# Contains information about the expression evaluation. This bean will be replacing `JiraExpressionEvaluationMetaDataBean` bean as part of new `evaluate` endpoint
public type JExpEvaluateMetaDataBean record {|
    # Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
    JiraExpressionsComplexityBean complexity?;
    # Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
    JExpEvaluateIssuesMetaBean issues?;
|};

# Details of a filter.
public type FilterDetails record {|
    # \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
    string approximateLastUsed?;
    # The description of the filter.
    string description?;
    # The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
    SharePermission[] editPermissions?;
    # Expand options that include additional filter details in the response.
    string expand?;
    # Whether the filter is selected as a favorite by any users, not including the filter owner.
    boolean favourite?;
    # The count of how many users have selected this filter as a favorite, including the filter owner.
    int favouritedCount?;
    # The unique identifier for the filter.
    string id?;
    # The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
    string jql?;
    # The name of the filter.
    string name;
    # The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.
    User owner?;
    # A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
    string searchUrl?;
    # The URL of the filter.
    string self?;
    # The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
    SharePermission[] sharePermissions?;
    # The users that are subscribed to the filter.
    FilterSubscription[] subscriptions?;
    # A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
    string viewUrl?;
|};

# The details about a workflow validation error.
public type WorkflowValidationError record {|
    # An error code.
    string code?;
    WorkflowElementReference elementReference?;
    # The validation error level.
    "WARNING"|"ERROR" level?;
    # An error message.
    string message?;
    # The type of element the error or warning references.
    "RULE"|"STATUS"|"STATUS_LAYOUT"|"STATUS_PROPERTY"|"WORKFLOW"|"TRANSITION"|"TRANSITION_PROPERTY"|"SCOPE"|"STATUS_MAPPING"|"TRIGGER" 'type?;
|};

public type ProjectScopeBean record {|
    # Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
    ("notSelectable"|"defaultValue")[] attributes?;
    # The ID of the project that the option's behavior applies to.
    int id?;
|};

# The details of a UI modification.
public type UpdateUiModificationDetails record {|
    # List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts.
    UiModificationContextDetails[] contexts?;
    # The data of the UI modification. The maximum size of the data is 50000 characters.
    string data?;
    # The description of the UI modification. The maximum length is 255 characters.
    string description?;
    # The name of the UI modification. The maximum length is 255 characters.
    string name?;
|};

# A custom field and its new value with a list of issue to update.
public type MultipleCustomFieldValuesUpdate record {|
    # The ID or key of the custom field. For example, `customfield_10010`.
    string customField;
    # The list of issue IDs.
    int[] issueIds;
    # The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
    # 
    #  *  `string` the value must be a string.
    #  *  `number` the value must be a number.
    #  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
    #  *  `user` the value must be an object that contains the `accountId` field.
    #  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
    # 
    # A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
    anydata value;
|};

# Represents the Queries record for the operation: findUsers
public type FindUsersQueries record {
    # A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.
    string query?;
    # A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.
    string property?;
    # The index of the first item to return in a page of filtered results (page offset).
    int:Signed32 startAt = 0;
    string username?;
};

# Details about a notification scheme.
public type NotificationScheme record {|
    # The description of the notification scheme.
    string description?;
    # Expand options that include additional notification scheme details in the response.
    string expand?;
    # The ID of the notification scheme.
    int id?;
    # The name of the notification scheme.
    string name?;
    # The notification events and associated recipients.
    NotificationSchemeEvent[] notificationSchemeEvents?;
    # The list of project IDs associated with the notification scheme.
    int[] projects?;
    # The scope of the notification scheme.
    Scope scope?;
    string self?;
|};

# Represents the Queries record for the operation: getRecent
public type GetRecentQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
    # 
    #  *  `description` Returns the project description.
    #  *  `projectKeys` Returns all project keys associated with a project.
    #  *  `lead` Returns information about the project lead.
    #  *  `issueTypes` Returns all issue types associated with the project.
    #  *  `url` Returns the URL associated with the project.
    #  *  `permissions` Returns the permissions associated with the project.
    #  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
    #  *  `*` Returns the project with all available expand options.
    string expand?;
    # EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.
    StringList[] properties?;
};

public type NotificationSchemeAndProjectMappingJsonBean record {|
    string notificationSchemeId?;
    string projectId?;
|};

# Represents the Queries record for the operation: parseJqlQueries
public type ParseJqlQueriesQueries record {
    # How to validate the JQL query and treat the validation results. Validation options include:
    # 
    #  *  `strict` Returns all errors. If validation fails, the query structure is not returned.
    #  *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.
    #  *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.
    "strict"|"warn"|"none" validation;
};

# A page of items.
public type PageBeanIssueTypeSchemeProjects record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueTypeSchemeProjects[] values?;
|};

# Represents the Queries record for the operation: deleteComment
public type DeleteCommentQueries record {
    string parentId?;
};

# Details of the time tracking configuration.
public type TimeTrackingConfiguration record {|
    # The default unit of time applied to logged time.
    "minute"|"hour"|"day"|"week" defaultUnit;
    # The format that will appear on an issue's *Time Spent* field.
    "pretty"|"days"|"hours" timeFormat;
    # The number of days in a working week.
    decimal workingDaysPerWeek;
    # The number of hours in a working day.
    decimal workingHoursPerDay;
|};

# JQL queries that contained users that could not be found
public type JQLQueryWithUnknownUsers record {|
    # The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found
    string convertedQuery?;
    # The original query, for reference
    string originalQuery?;
|};

# A group found in a search.
public type FoundGroup record {|
    # The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    string groupId?;
    # The group name with the matched query string highlighted with the HTML bold tag.
    string html?;
    GroupLabel[] labels?;
    # The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`
    string name?;
|};

# The description of the page of issues loaded by the provided JQL query.This bean will be replacing IssuesJqlMetaDataBean bean as part of new `evaluate` endpoint
public type JExpEvaluateIssuesJqlMetaDataBean record {|
    # Next Page token for the next page of issues.
    string nextPageToken;
|};

public type JiraIssueFields record {|
    # Add or clear a cascading select field:
    # 
    #  *  To add, specify `optionId` for both parent and child.
    #  *  To clear the child, set its `optionId` to null.
    #  *  To clear both, set the parent's `optionId` to null.
    JiraCascadingSelectField[] cascadingSelectFields?;
    # Add or clear a number field:
    # 
    #  *  To add, specify a numeric `value`.
    #  *  To clear, set `value` to `null`.
    JiraNumberField[] clearableNumberFields?;
    # Add or clear a color field:
    # 
    #  *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.
    #  *  To clear, set the color `name` to an empty string.
    JiraColorField[] colorFields?;
    # Add or clear a date picker field:
    # 
    #  *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.
    #  *  To clear, set `formattedDate` to an empty string.
    JiraDateField[] datePickerFields?;
    # Add or clear the planned start date and time:
    # 
    #  *  To add, specify the date and time in ISO format for `formattedDateTime`.
    #  *  To clear, provide an empty string for `formattedDateTime`.
    JiraDateTimeField[] dateTimePickerFields?;
    # Set the issue type field by providing an `issueTypeId`.
    JiraIssueTypeField issueType?;
    # Edit a labels field:
    # 
    #  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
    #  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.
    JiraLabelsField[] labelsFields?;
    # Add or clear a multi-group picker field:
    # 
    #  *  To add groups, provide an array of groups with `groupName`s.
    #  *  To clear all groups, use an empty `groups` array.
    JiraMultipleGroupPickerField[] multipleGroupPickerFields?;
    # Assign or unassign multiple users to/from a field:
    # 
    #  *  To assign, provide an array of user `accountId`s.
    #  *  To clear, set `users` to `null`.
    JiraMultipleSelectUserPickerField[] multipleSelectClearableUserPickerFields?;
    # Add or clear a multi-select field:
    # 
    #  *  To add, provide an array of options with `optionId`s.
    #  *  To clear, use an empty `options` array.
    JiraMultipleSelectField[] multipleSelectFields?;
    # Edit a multi-version picker field like Fix Versions/Affects Versions:
    # 
    #  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
    #  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.
    JiraMultipleVersionPickerField[] multipleVersionPickerFields?;
    # Edit a multi select components field:
    # 
    #  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
    #  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.
    JiraMultiSelectComponentField multiselectComponents?;
    # Edit the original estimate field.
    JiraDurationField originalEstimateField?;
    # Set the priority of an issue by specifying a `priorityId`.
    JiraPriorityField priority?;
    # Add or clear a rich text field:
    # 
    #  *  To add, provide `adfValue`. Note that rich text fields only support ADF values.
    #  *  To clear, use an empty `richText` object.
    # 
    # For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).
    JiraRichTextField[] richTextFields?;
    # Add or clear a single group picker field:
    # 
    #  *  To add, specify the group with `groupName`.
    #  *  To clear, set `groupName` to an empty string.
    JiraSingleGroupPickerField[] singleGroupPickerFields?;
    # Add or clear a single line text field:
    # 
    #  *  To add, provide the `text` value.
    #  *  To clear, set `text` to an empty string.
    JiraSingleLineTextField[] singleLineTextFields?;
    # Edit assignment for single select user picker fields like Assignee/Reporter:
    # 
    #  *  To assign an issue, specify the user's `accountId`.
    #  *  To unassign an issue, set `user` to `null`.
    #  *  For automatic assignment, set `accountId` to `-1`.
    JiraSingleSelectUserPickerField[] singleSelectClearableUserPickerFields?;
    # Add or clear a single select field:
    # 
    #  *  To add, specify the option with an `optionId`.
    #  *  To clear, pass an option with `optionId` as `-1`.
    JiraSingleSelectField[] singleSelectFields?;
    # Add or clear a single version picker field:
    # 
    #  *  To add, specify the version with a `versionId`.
    #  *  To clear, set `versionId` to `-1`.
    JiraSingleVersionPickerField[] singleVersionPickerFields?;
    # Edit the time tracking field.
    JiraTimeTrackingField timeTrackingField?;
    # Add or clear a URL field:
    # 
    #  *  To add, provide the `url` with the desired URL value.
    #  *  To clear, set `url` to an empty string.
    JiraUrlField[] urlFields?;
|};

# Represents the Queries record for the operation: readWorkflowSchemes
public type ReadWorkflowSchemesQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.
    string expand?;
};

# Associated related work to a version
public type VersionRelatedWork record {|
    # The category of the related work
    string category;
    # The ID of the issue associated with the related work (if there is one). Cannot be updated via the Rest API.
    int issueId?;
    # The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it.
    string relatedWorkId?;
    # The title of the related work
    string title?;
    # The URL of the related work. Will be null for the native release note related work item, but is otherwise required.
    string url?;
|};

# A page of comments.
public type PageOfComments record {
    # The list of comments.
    Comment[] comments?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
};

# Details of workflow transition rules.
public type WorkflowRulesSearchDetails record {
    # List of workflow rule IDs that do not belong to the workflow or can not be found.
    string[] invalidRules?;
    # List of valid workflow transition rules.
    WorkflowTransitionRules[] validRules?;
    # The workflow ID.
    string workflowEntityId?;
};

# Details about the analysed Jira expression.
public type JiraExpressionsAnalysis record {|
    # The results of Jira expressions analysis.
    JiraExpressionAnalysis[] results;
|};

# The details of the gadget to update.
public type DashboardGadgetUpdateRequest record {|
    # The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
    string color?;
    # The position of the gadget.
    DashboardGadgetPosition position?;
    # The title of the gadget.
    string title?;
|};

# Represents the Queries record for the operation: getBulkScreenTabs
public type GetBulkScreenTabsQueries record {
    # The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.
    int[] screenId?;
    # The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.
    int[] tabId?;
    # The maximum number of items to return per page. The maximum number is 100,
    int:Signed32 maxResult = 100;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about the analysed Jira expression.
public type JiraExpressionAnalysis record {|
    JiraExpressionComplexity complexity?;
    # A list of validation errors. Not included if the expression is valid.
    JiraExpressionValidationError[] errors?;
    # The analysed expression.
    string expression;
    # EXPERIMENTAL. The inferred type of the expression.
    string 'type?;
    # Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
    boolean valid;
|};

# Details of a locale.
public type Locale record {|
    # The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create.
    string locale?;
|};

# An ordered list of issue type IDs and information about where to move them.
public type OrderOfIssueTypes record {|
    # The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
    string after?;
    # A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
    string[] issueTypeIds;
    # The position the issue types should be moved to. Required if `after` isn't provided.
    "First"|"Last" position?;
|};

# Details about the mapping between issue types and a workflow.
public type IssueTypesWorkflowMapping record {|
    # Whether the workflow is the default workflow for the workflow scheme.
    boolean defaultMapping?;
    # The list of issue type IDs.
    string[] issueTypes?;
    # Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
    boolean updateDraftIfNeeded?;
    # The name of the workflow. Optional if updating the workflow-issue types mapping.
    string workflow?;
|};

# A page of items.
public type PageBeanField record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Field[] values?;
|};

# A list of custom field details.
public type ConnectCustomFieldValue record {
    # The type of custom field.
    "StringIssueField"|"NumberIssueField"|"RichTextIssueField"|"SingleSelectIssueField"|"MultiSelectIssueField"|"TextIssueField" _type;
    # The custom field ID.
    int fieldID;
    # The issue ID.
    int issueID;
    # The value of number type custom field when `_type` is `NumberIssueField`.
    decimal number?;
    # The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
    string optionID?;
    # The value of richText type custom field when `_type` is `RichTextIssueField`.
    string richText?;
    # The value of string type custom field when `_type` is `StringIssueField`.
    string 'string?;
    # The value of of text custom field type when `_type` is `TextIssueField`.
    string text?;
};

public type WorkflowCapabilities record {|
    # The Connect provided ecosystem rules available.
    AvailableWorkflowConnectRule[] connectRules?;
    # The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
    "PROJECT"|"GLOBAL" editorScope?;
    # The Forge provided ecosystem rules available.
    AvailableWorkflowForgeRule[] forgeRules?;
    # The types of projects that this capability set is available for.
    ("software"|"service_desk"|"product_discovery"|"business"|"unknown")[] projectTypes?;
    # The Atlassian provided system rules available.
    AvailableWorkflowSystemRule[] systemRules?;
    # The trigger rules available.
    AvailableWorkflowTriggers[] triggerRules?;
|};

public type JiraExpressionsComplexityBean record {|
    # The number of Jira REST API beans returned in the response.
    JiraExpressionsComplexityValueBean beans;
    # The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
    JiraExpressionsComplexityValueBean expensiveOperations;
    # The number of primitive values returned in the response.
    JiraExpressionsComplexityValueBean primitiveValues;
    # The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
    JiraExpressionsComplexityValueBean steps;
|};

# Represents the Queries record for the operation: getIdsOfWorklogsModifiedSince
public type GetIdsOfWorklogsModifiedSinceQueries record {
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
    string expand = "";
    # The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.
    int since = 0;
};

# User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
# 
#  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
#  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
#  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
public type UserDetails record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
    string accountType?;
    # Whether the user is active.
    boolean active?;
    # The avatars of the user.
    AvatarUrlsBean avatarUrls?;
    # The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
    string displayName?;
    # The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
    string emailAddress?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # The URL of the user.
    string self?;
    # The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
    string timeZone?;
|};

# A list of project IDs.
public type ProjectIds record {|
    # The IDs of projects.
    string[] projectIds;
|};

# A list of the issues matched to a JQL query or details of errors encountered during matching.
public type IssueMatchesForJQL record {|
    # A list of errors.
    string[] errors;
    # A list of issue IDs.
    int[] matchedIssues;
|};

# A reference to the location of the error. This will be null if the error does not refer to a specific element.
public type WorkflowElementReference record {|
    # A property key.
    string propertyKey?;
    # A rule ID.
    string ruleId?;
    ProjectAndIssueTypePair statusMappingReference?;
    # A status reference.
    string statusReference?;
    # A transition ID.
    string transitionId?;
|};

# Represents the Queries record for the operation: getIssueTypeMappingsForContexts
public type GetIssueTypeMappingsForContextsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.
    int[] contextId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of the permission.
public type RestrictedPermission record {
    # The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
    string id?;
    # The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
    string 'key?;
};

# Details about a workflow configuration update request.
public type WorkflowTransitionRulesUpdate record {|
    # The list of workflows with transition rules to update.
    WorkflowTransitionRules[] workflows;
|};

# Filter for a User Picker (single) custom field.
public type UserFilter record {
    # Whether the filter is enabled.
    boolean enabled;
    # User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
    string[] groups?;
    # Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
    int[] roleIds?;
};

# Represents the Queries record for the operation: removeUser
public type RemoveUserQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Represents the Queries record for the operation: getAuditRecords
public type GetAuditRecordsQueries record {
    # The strings to match with audit field content, space separated.
    string filter?;
    # The number of records to skip before returning the first result.
    int:Signed32 offset = 0;
    # The maximum number of results to return.
    int:Signed32 'limit = 1000;
    # The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.
    string 'from?;
    # The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.
    string to?;
};

public type JiraMultiSelectComponentField record {|
    "ADD"|"REMOVE"|"REPLACE"|"REMOVE_ALL" bulkEditMultiSelectFieldOption;
    JiraComponentField[] components;
    string fieldId;
|};

# A page of items.
public type PageBeanComponentWithIssueCount record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ComponentWithIssueCount[] values?;
|};

# The default value for a User Picker (multiple) custom field.
public type CustomFieldContextDefaultValueMultiUserPicker record {
    # The IDs of the default users.
    string[] accountIds;
    # The ID of the context.
    string contextId;
    string 'type;
};

# The new default issue priority.
public type SetDefaultPriorityRequest record {|
    # The ID of the new default issue priority. Must be an existing ID or null. Setting this to null erases the default priority setting.
    string id;
|};

# The workflow scheme read request body.
public type WorkflowSchemeReadRequest record {|
    # The list of project IDs to query.
    string[]? projectIds?;
    # The list of workflow scheme IDs to query.
    string[]? workflowSchemeIds?;
|};

# Details of the status being updated.
public type WorkflowStatusUpdate record {
    # The description of the status.
    string description?;
    # The ID of the status.
    string id?;
    # The name of the status.
    string name;
    # The category of the status.
    "TODO"|"IN_PROGRESS"|"DONE" statusCategory;
    # The reference of the status.
    string statusReference;
};

# A page of items.
public type PageBeanIssueFieldOption record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueFieldOption[] values?;
|};

# Represents the Queries record for the operation: getFilter
public type GetFilterQueries record {
    # EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideSharePermissions = false;
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# The group or role to which this item is visible.
public type Visibility record {
    # The ID of the group or the name of the role that visibility of this item is restricted to.
    string? identifier?;
    # Whether visibility of this item is restricted to a group or role.
    "group"|"role" 'type?;
    # The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`.
    string value?;
};

# A project's sender email address.
public type ProjectEmailAddress record {|
    # The email address.
    string emailAddress?;
    # When using a custom domain, the status of the email address.
    string[] emailAddressStatus?;
|};

# Configuration of the announcement banner.
public type AnnouncementBannerConfigurationUpdate record {|
    # Flag indicating if the announcement banner can be dismissed by the user.
    boolean isDismissible?;
    # Flag indicating if the announcement banner is enabled or not.
    boolean isEnabled?;
    # The text on the announcement banner.
    string message?;
    # Visibility of the announcement banner. Can be public or private.
    string visibility?;
|};

# Bulk operation filter details.
public type IssueFilterForBulkPropertyDelete record {|
    # The value of properties to perform the bulk operation on.
    anydata currentValue?;
    # List of issues to perform the bulk delete operation on.
    int[] entityIds?;
|};

# Represents the Queries record for the operation: getPermissionScheme
public type GetPermissionSchemeQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# A clause that asserts the current value of a field. For example, `summary ~ test`.
public type FieldValueClause record {
    JqlQueryField 'field;
    JqlQueryClauseOperand operand;
    # The operator between the field and operand.
    "="|"!="|">"|"<"|">="|"<="|"in"|"not in"|"~"|"~="|"is"|"is not" operator;
};

# Represents the Queries record for the operation: deleteFavouriteForFilter
public type DeleteFavouriteForFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results.
public type ValidationOptionsForCreate record {|
    @constraint:Array {maxLength: 2}
    ("WARNING"|"ERROR")[] levels?;
|};

# A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.`
public type CompoundClause record {
    # The list of nested clauses.
    JqlQueryClause[] clauses;
    # The operator between the clauses.
    "and"|"or"|"not" operator;
};

# Represents the Queries record for the operation: getAvatarImageByID
public type GetAvatarImageByIDQueries record {
    # The size of the avatar image. If not provided the default size is returned.
    "xsmall"|"small"|"medium"|"large"|"xlarge" size?;
    # The format to return the avatar image in. If not provided the original content format is returned.
    "png"|"svg" format?;
};

# Represents the Queries record for the operation: getAvatarImageByOwner
public type GetAvatarImageByOwnerQueries record {
    # The size of the avatar image. If not provided the default size is returned.
    "xsmall"|"small"|"medium"|"large"|"xlarge" size?;
    # The format to return the avatar image in. If not provided the original content format is returned.
    "png"|"svg" format?;
};

# Represents the Queries record for the operation: createPermissionScheme
public type CreatePermissionSchemeQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# Represents the Queries record for the operation: createFilter
public type CreateFilterQueries record {
    # EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideSharePermissions = false;
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Details of the options to create for a custom field.
public type BulkCustomFieldOptionCreateRequest record {|
    # Details of options to create.
    CustomFieldOptionCreate[] options?;
|};

# The statuses referenced in the workflow.
public type WorkflowReferenceStatus record {|
    ApprovalConfiguration? approvalConfiguration?;
    # Indicates if the status is deprecated.
    boolean deprecated?;
    WorkflowStatusLayout? layout?;
    # The properties associated with the status.
    record {|string...;|} properties?;
    # The reference of the status.
    string statusReference?;
|};

# The ID of a screen scheme.
public type ScreenSchemeId record {|
    # The ID of the screen scheme.
    int id;
|};

# List of string of inputs
public type MandatoryFieldValue record {
    # If `true`, will try to retain original non-null issue field values on move.
    boolean? retain = true;
    # Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
    "adf"|"raw"? 'type = "raw";
    # Value for each field. Provide a `list of strings` for non-ADF fields.
    string[] value;
};

# A comment.
public type Comment record {
    # The ID of the user who created the comment.
    UserDetails author?;
    # The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
    anydata body?;
    # The date and time at which the comment was created.
    string created?;
    # The ID of the comment.
    string id?;
    # Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
    boolean jsdAuthorCanSeeRequest?;
    # Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
    boolean jsdPublic?;
    # A list of comment properties. Optional on create and update.
    EntityProperty[] properties?;
    # The rendered version of the comment.
    string renderedBody?;
    # The URL of the comment.
    string self?;
    # The ID of the user who updated the comment last.
    UserDetails updateAuthor?;
    # The date and time at which the comment was updated last.
    string updated?;
    # The group or role to which this comment is visible. Optional on create and update.
    Visibility visibility?;
};

# A workflow scheme along with a list of projects that use it.
public type WorkflowSchemeAssociations record {|
    # The list of projects that use the workflow scheme.
    string[] projectIds;
    # The workflow scheme.
    WorkflowScheme workflowScheme;
|};

# A page of items.
public type PageBeanIssueSecurityLevelMember record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    IssueSecurityLevelMember[] values?;
|};

# Details of an issue type screen scheme.
public type IssueTypeScreenSchemeUpdateDetails record {|
    # The description of the issue type screen scheme. The maximum length is 255 characters.
    string description?;
    # The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
    string name?;
|};

# A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
public type FieldWasClause record {
    JqlQueryField 'field;
    JqlQueryClauseOperand operand;
    # The operator between the field and operand.
    "was"|"was in"|"was not in"|"was not" operator;
    # The list of time predicates.
    JqlQueryClauseTimePredicate[] predicates;
};

public type Error record {|
    int count?;
    string[] issueIdsOrKeys?;
    string message?;
|};

public type JiraExpressionEvaluationMetaDataBean record {|
    # Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
    JiraExpressionsComplexityBean complexity?;
    # Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
    IssuesMetaBean issues?;
|};

# An audit record.
public type AuditRecordBean record {|
    # The list of items associated with the changed record.
    AssociatedItemBean[] associatedItems?;
    # The account ID of the author.
    string authorAccountId?;
    # Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
    string authorKey?;
    # The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
    string category?;
    # The list of values changed in the record event.
    ChangedValueBean[] changedValues?;
    # The date and time on which the audit record was created.
    string created?;
    # The description of the audit record.
    string description?;
    # The event the audit record originated from.
    string eventSource?;
    # The ID of the audit record.
    int id?;
    # The object item associated with the audit record.
    AssociatedItemBean objectItem?;
    # The URL of the computer where the creation of the audit record was initiated.
    string remoteAddress?;
    # The summary of the audit record.
    string summary?;
|};

# Represents the Queries record for the operation: removePreference
public type RemovePreferenceQueries record {
    # The key of the preference.
    string 'key;
};

# Details of the custom field options for a context.
public type CustomFieldContextOption record {|
    # Whether the option is disabled.
    boolean disabled;
    # The ID of the custom field option.
    string id;
    # For cascading options, the ID of the custom field option containing the cascading option.
    string optionId?;
    # The value of the custom field option.
    string value;
|};

# Represents the Queries record for the operation: getProjectsByPriorityScheme
public type GetProjectsByPrioritySchemeQueries record {
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The string to query projects on by name.
    string query = "";
    # The project IDs to filter by. For example, `projectId=10000&projectId=10001`.
    int[] projectId?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

public type BulkFetchIssueRequestBean record {|
    # Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
    # 
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    string[] expand?;
    # A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    # 
    # The default is `*navigable`.
    # 
    # Examples:
    # 
    #  *  `summary,comment` Returns the summary and comments fields only.
    #  *  `-description` Returns all navigable (default) fields except description.
    #  *  `*all,-comment` Returns all fields except comments.
    # 
    # Multiple `fields` parameters can be included in a request.
    # 
    # Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
    string[] fields?;
    # Reference fields by their key (rather than ID). The default is `false`.
    boolean fieldsByKeys?;
    # An array of issue IDs or issue keys to fetch. You can mix issue IDs and keys in the same query.
    string[] issueIdsOrKeys;
    # A list of issue property keys of issue properties to be included in the results. A maximum of 5 issue property keys can be specified.
    string[] properties?;
|};

# The response for status request for a running/completed export task.
public type ExportArchivedIssuesTaskProgressResponse record {|
    string fileUrl?;
    string payload?;
    int progress?;
    string status?;
    string submittedTime?;
    string taskId?;
|};

# Represents the Queries record for the operation: getSecurityLevels
public type GetSecurityLevelsQueries record {
    # When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.
    boolean onlyDefault = false;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
    string[] schemeId?;
    # The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.
    string[] id?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

# Represents the Queries record for the operation: findUsersWithBrowsePermission
public type FindUsersWithBrowsePermissionQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The project key for the project (case sensitive). Required, unless `issueKey` is specified.
    string projectKey?;
    # The issue key for the issue. Required, unless `projectKey` is specified.
    string issueKey?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
    string query?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Details about the configuration of Jira.
public type Configuration record {|
    # Whether the ability to add attachments to issues is enabled.
    boolean attachmentsEnabled?;
    # Whether the ability to link issues is enabled.
    boolean issueLinkingEnabled?;
    # Whether the ability to create subtasks for issues is enabled.
    boolean subTasksEnabled?;
    # The configuration of time tracking.
    TimeTrackingConfiguration timeTrackingConfiguration?;
    # Whether the ability to track time is enabled. This property is deprecated.
    boolean timeTrackingEnabled?;
    # Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    boolean unassignedIssuesAllowed?;
    # Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    boolean votingEnabled?;
    # Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    boolean watchingEnabled?;
|};

# The x and y location of the status in the workflow.
public type WorkflowStatusLayout record {|
    # The x axis location.
    decimal? x?;
    # The y axis location.
    decimal? y?;
|};

# Result of your JQL search. Returns a list of issue IDs and a token to fetch the next page if one exists.
public type IdSearchResults record {|
    # The list of issue IDs found by the search.
    int[] issueIds?;
    # Continuation token to fetch the next page. If this result represents the last or the only page this token will be null.
    string nextPageToken?;
|};

# Details about the project.
public type UpdateProjectDetails record {|
    # The default assignee when creating issues for this project.
    "PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # An integer value for the project's avatar.
    int avatarId?;
    # The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
    int categoryId?;
    # A brief description of the project.
    string description?;
    # The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
    int issueSecurityScheme?;
    # Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
    string 'key?;
    # This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
    string lead?;
    # The account ID of the project lead. Cannot be provided with `lead`.
    @constraint:String {maxLength: 128}
    string leadAccountId?;
    # The name of the project.
    string name?;
    # The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
    int notificationScheme?;
    # The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
    int permissionScheme?;
    # Previous project keys to be released from the current project. Released keys must belong to the current project and not contain the current project key
    string[] releasedProjectKeys?;
    # A link to information about this project, such as project documentation
    string url?;
|};

# Details of a notification within a notification scheme.
public type NotificationSchemeNotificationDetails record {
    # The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`.
    string notificationType;
    # The value corresponding to the specified notification type.
    string 'parameter?;
};

# Details of the association between an issue type scheme and project.
public type IssueTypeSchemeProjectAssociation record {|
    # The ID of the issue type scheme.
    string issueTypeSchemeId;
    # The ID of the project.
    string projectId;
|};

public type IssueFieldOptionCreateBean record {
    IssueFieldOptionConfiguration config?;
    # The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
    record {} properties?;
    # The option's name, which is displayed in Jira.
    string value;
};

# Details about an issue event.
public type IssueEvent record {|
    # The ID of the event.
    int id?;
    # The name of the event.
    string name?;
|};

# Details of the group membership or permissions needed to receive the notification.
public type NotificationRecipientsRestrictions record {|
    # List of groupId memberships required to receive the notification.
    string[] groupIds?;
    # List of group memberships required to receive the notification.
    GroupName[] groups?;
    # List of permissions required to receive the notification.
    RestrictedPermission[] permissions?;
|};

# The details of watchers on an issue.
public type Watchers record {|
    # Whether the calling user is watching this issue.
    boolean isWatching?;
    # The URL of these issue watcher details.
    string self?;
    # The number of users watching this issue.
    int:Signed32 watchCount?;
    # Details of the users watching this issue.
    UserDetails[] watchers?;
|};

# Details of a workflow.
public type JiraWorkflow record {|
    # The description of the workflow.
    string description?;
    # The ID of the workflow.
    string id?;
    # Indicates if the workflow can be edited.
    boolean isEditable?;
    # The name of the workflow.
    string name?;
    WorkflowScope scope?;
    WorkflowLayout? startPointLayout?;
    # The statuses referenced in this workflow.
    WorkflowReferenceStatus[] statuses?;
    # If there is a current [asynchronous task](#async-operations) operation for this workflow.
    string? taskId?;
    # The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.
    WorkflowTransitions[] transitions?;
    # Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows.
    ProjectIssueTypes[] usages?;
    DocumentVersion version?;
|};

# Details of a custom field option to create.
public type CustomFieldOptionCreate record {|
    # Whether the option is disabled.
    boolean disabled?;
    # For cascading options, the ID of the custom field object containing the cascading option.
    string optionId?;
    # The value of the custom field option.
    string value;
|};

# The hierarchy of issue types within a project.
public type ProjectIssueTypeHierarchy record {|
    # Details of an issue type hierarchy level.
    ProjectIssueTypesHierarchyLevel[] hierarchy?;
    # The ID of the project.
    int projectId?;
|};

# The ID or key of a linked issue.
public type LinkedIssue record {|
    # The fields associated with the issue.
    Fields fields?;
    # The ID of an issue. Required if `key` isn't provided.
    string id?;
    # The key of an issue. Required if `id` isn't provided.
    string 'key?;
    # The URL of the issue.
    string self?;
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig|http:CredentialsConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Represents the Queries record for the operation: getPreference
public type GetPreferenceQueries record {
    # The key of the preference.
    string 'key;
};

# Represents the Queries record for the operation: getIssuePickerResource
public type GetIssuePickerResourceQueries record {
    # The ID of a project that suggested issues must belong to.
    string currentProjectId?;
    # A string to match against text fields in the issue such as title, description, or comments.
    string query?;
    # The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.
    string currentIssueKey?;
    # A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.
    string currentJQL?;
    # Indicate whether to include subtasks in the suggestions list.
    boolean showSubTasks?;
    # When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.
    boolean showSubTaskParent?;
};

# Default value for a Forge number custom field.
public type CustomFieldContextDefaultValueForgeNumberField record {
    # The ID of the context.
    string contextId;
    # The default floating-point number.
    decimal number;
    string 'type;
};

# Represents the Queries record for the operation: getIssueTypeSchemeForProjects
public type GetIssueTypeSchemeForProjectsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.
    int[] projectId;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about a workflow.
public type Workflow record {|
    # The creation date of the workflow.
    string created?;
    # The description of the workflow.
    string description;
    # Whether the workflow has a draft version.
    boolean hasDraftWorkflow?;
    PublishedWorkflowId id;
    # Whether this is the default workflow.
    boolean isDefault?;
    WorkflowOperations operations?;
    # The projects the workflow is assigned to, through workflow schemes.
    ProjectDetails[] projects?;
    # The workflow schemes the workflow is assigned to.
    WorkflowSchemeIdName[] schemes?;
    # The statuses of the workflow.
    WorkflowStatus[] statuses?;
    # The transitions of the workflow.
    Transition[] transitions?;
    # The last edited date of the workflow.
    string updated?;
|};

# The details of the field configuration scheme.
public type UpdateFieldConfigurationSchemeDetails record {|
    # The description of the field configuration scheme.
    @constraint:String {maxLength: 1024}
    string description?;
    # The name of the field configuration scheme. The name must be unique.
    @constraint:String {maxLength: 255}
    string name;
|};

# Represents the Headers record for the operation: AppIssueFieldValueUpdateResource.updateIssueFields_put
public type AppissuefieldvalueupdateresourceUpdateissuefields_putHeaders record {
    # The ID of the transfer.
    string Atlassian\-Transfer\-Id;
};

# Details of a custom field.
public type UpdateCustomFieldDetails record {|
    # The description of the custom field. The maximum length is 40000 characters.
    string description?;
    # The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters.
    string name?;
    # The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
    # 
    #  *  `cascadingselect`: `cascadingselectsearcher`
    #  *  `datepicker`: `daterange`
    #  *  `datetime`: `datetimerange`
    #  *  `float`: `exactnumber` or `numberrange`
    #  *  `grouppicker`: `grouppickersearcher`
    #  *  `importid`: `exactnumber` or `numberrange`
    #  *  `labels`: `labelsearcher`
    #  *  `multicheckboxes`: `multiselectsearcher`
    #  *  `multigrouppicker`: `multiselectsearcher`
    #  *  `multiselect`: `multiselectsearcher`
    #  *  `multiuserpicker`: `userpickergroupsearcher`
    #  *  `multiversion`: `versionsearcher`
    #  *  `project`: `projectsearcher`
    #  *  `radiobuttons`: `multiselectsearcher`
    #  *  `readonlyfield`: `textsearcher`
    #  *  `select`: `multiselectsearcher`
    #  *  `textarea`: `textsearcher`
    #  *  `textfield`: `textsearcher`
    #  *  `url`: `exacttextsearcher`
    #  *  `userpicker`: `userpickergroupsearcher`
    #  *  `version`: `versionsearcher`
    "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:daterange"|"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange"|"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"|"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:numberrange"|"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher" searcherKey?;
|};

public type EntityPropertyDetails record {
    # The entity property ID.
    decimal entityId;
    # The entity property key.
    string 'key;
    # The new value of the entity property.
    string value;
};

# A list of JQL queries to parse.
public type JqlQueriesToParse record {|
    # A list of queries to parse.
    JqlQueriesToParseQueriesItemsString[] queries;
|};

# Details of the user associated with the role.
public type ProjectRoleUser record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
    @constraint:String {maxLength: 128}
    string accountId?;
|};

# Represents the Queries record for the operation: addUserToGroup
public type AddUserToGroupQueries record {
    # The ID of the group. This parameter cannot be used with the `groupName` parameter.
    string groupId?;
    # As a group's name can change, use of `groupId` is recommended to identify a group.  
    # The name of the group. This parameter cannot be used with the `groupId` parameter.
    string groupname?;
};

# Details of the issue creation metadata for an issue type.
public type IssueTypeIssueCreateMetadata record {|
    # The ID of the issue type's avatar.
    int avatarId?;
    # The description of the issue type.
    string description?;
    # Unique ID for next-gen projects.
    string entityId?;
    # Expand options that include additional issue type metadata details in the response.
    string expand?;
    # List of the fields available when creating an issue for the issue type.
    record {|FieldMetadata...;|} fields?;
    # Hierarchy level of the issue type.
    int:Signed32 hierarchyLevel?;
    # The URL of the issue type's avatar.
    string iconUrl?;
    # The ID of the issue type.
    string id?;
    # The name of the issue type.
    string name?;
    # Details of the next-gen projects the issue type is available in.
    Scope scope?;
    # The URL of these issue type details.
    string self?;
    # Whether this issue type is used to create subtasks.
    boolean subtask?;
|};

public type JiraDateInput record {|
    string formattedDate;
|};

# Represents the Queries record for the operation: getAllIssueTypeSchemes
public type GetAllIssueTypeSchemesQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.
    #  *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
    string expand = "";
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `name` Sorts by issue type scheme name.
    #  *  `id` Sorts by issue type scheme ID.
    "name"|"-name"|"+name"|"id"|"-id"|"+id" orderBy = "id";
    # The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # String used to perform a case-insensitive partial match with issue type scheme name.
    string queryString = "";
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about a field.
public type FieldDetails record {|
    # The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
    string[] clauseNames?;
    # Whether the field is a custom field.
    boolean custom?;
    # The ID of the field.
    string id?;
    # The key of the field.
    string 'key?;
    # The name of the field.
    string name?;
    # Whether the field can be used as a column on the issue navigator.
    boolean navigable?;
    # Whether the content of the field can be used to order lists.
    boolean orderable?;
    # The data schema for the field.
    JsonTypeBean schema?;
    # The scope of the field.
    Scope scope?;
    # Whether the content of the field can be searched.
    boolean searchable?;
|};

public type CreateUpdateRoleRequestBean record {|
    # A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role.
    string description?;
    # The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role.
    string name?;
|};

# A parsed JQL query.
public type JqlQuery record {|
    JqlQueryOrderByClause orderBy?;
    JqlQueryClause 'where?;
|};

# Represents the Queries record for the operation: getPermissionSchemeGrant
public type GetPermissionSchemeGrantQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

public type DeleteAndReplaceVersionBean record {|
    # An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
    CustomFieldReplacement[] customFieldReplacementList?;
    # The ID of the version to update `affectedVersion` to when the field contains the deleted version.
    int moveAffectedIssuesTo?;
    # The ID of the version to update `fixVersion` to when the field contains the deleted version.
    int moveFixIssuesTo?;
|};

# The request payload to get the required mappings for updating a workflow scheme.
public type WorkflowSchemeUpdateRequiredMappingsRequest record {|
    # The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*.
    string? defaultWorkflowId?;
    # The ID of the workflow scheme.
    string id;
    # The new workflow to issue type mappings for this workflow scheme.
    WorkflowSchemeAssociation[] workflowsForIssueTypes;
|};

# The workflow metadata and issue type IDs which use this workflow.
public type WorkflowMetadataAndIssueTypeRestModel record {|
    # The list of issue type IDs for the mapping.
    string[] issueTypeIds;
    WorkflowMetadataRestModel workflow;
|};

# An issue priority with sequence information.
public type PriorityWithSequence record {|
    # The description of the issue priority.
    string description?;
    # The URL of the icon for the issue priority.
    string iconUrl?;
    # The ID of the issue priority.
    string id?;
    # Whether this priority is the default.
    boolean isDefault?;
    # The name of the issue priority.
    string name?;
    # The URL of the issue priority.
    string self?;
    # The sequence of the issue priority.
    string sequence?;
    # The color used to indicate the issue priority.
    string statusColor?;
|};

# Represents the Queries record for the operation: updatePermissionScheme
public type UpdatePermissionSchemeQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# List of system avatars.
public type SystemAvatars record {|
    # A list of avatar details.
    Avatar[] system?;
|};

# The account ID of the new owner.
public type ChangeFilterOwner record {|
    # The account ID of the new owner.
    string accountId;
|};

# The details of votes on an issue.
public type Votes record {|
    # Whether the user making this request has voted on the issue.
    boolean hasVoted?;
    # The URL of these issue vote details.
    string self?;
    # List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.
    User[] voters?;
    # The number of votes on the issue.
    int votes?;
|};

# The mapping of old to new status ID for a specific project and issue type.
public type StatusMappingDTO record {
    # The issue type for the status mapping.
    string issueTypeId;
    # The project for the status mapping.
    string projectId;
    # The list of old and new status ID mappings for the specified project and issue type.
    StatusMigration[] statusMigrations;
};

# A list of issue type screen scheme mappings.
public type IssueTypeScreenSchemeMappingDetails record {|
    # The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created.
    IssueTypeScreenSchemeMapping[] issueTypeMappings;
|};

# Represents the Queries record for the operation: getAllScreenTabFields
public type GetAllScreenTabFieldsQueries record {
    # The key of the project.
    string projectKey?;
};

# A project and issueType ID pair that identifies a status mapping.
public type ProjectAndIssueTypePair record {|
    # The ID of the issue type.
    string issueTypeId;
    # The ID of the project.
    string projectId;
|};

# Represents the Queries record for the operation: getUsersFromGroup
public type GetUsersFromGroupQueries record {
    # Include inactive users.
    boolean includeInactiveUsers = false;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The ID of the group. This parameter cannot be used with the `groupName` parameter.
    string groupId?;
    # As a group's name can change, use of `groupId` is recommended to identify a group.  
    # The name of the group. This parameter cannot be used with the `groupId` parameter.
    string groupname?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about an issue.
public type IssueBean record {|
    # Details of changelogs associated with the issue.
    PageOfChangelogs changelog?;
    # The metadata for the fields on the issue that can be amended.
    IssueUpdateMetadata editmeta?;
    # Expand options that include additional issue details in the response.
    string expand?;
    record {} fields?;
    IncludedFields fieldsToInclude?;
    # The ID of the issue.
    string id?;
    # The key of the issue.
    string 'key?;
    # The ID and name of each field present on the issue.
    record {|string...;|} names?;
    # The operations that can be performed on the issue.
    Operations operations?;
    # Details of the issue properties identified in the request.
    record {} properties?;
    # The rendered value of each field present on the issue.
    record {} renderedFields?;
    # The schema describing each field present on the issue.
    record {|JsonTypeBean...;|} schema?;
    # The URL of the issue details.
    string self?;
    # The transitions that can be performed on the issue.
    IssueTransition[] transitions?;
    # The versions of each field on the issue.
    record {|record {}...;|} versionedRepresentations?;
|};

public type AddGroupBean record {
    # The name of the group.
    string name;
};

public type JQLCountRequestBean record {|
    # A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this field requires a bounded query. A bounded query is a query with a search restriction.
    string jql?;
|};

# Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
public type PermissionHolder record {|
    # Expand options that include additional permission holder details in the response.
    string expand?;
    # As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission.
    string 'parameter?;
    # The type of permission holder.
    string 'type;
    # The identifier associated with the `type` value that defines the holder of the permission.
    string value?;
|};

# Represents the Queries record for the operation: deleteIssue
public type DeleteIssueQueries record {
    # Whether the issue's subtasks are deleted when the issue is deleted.
    "true"|"false" deleteSubtasks = "false";
};

# The ID of the issue security scheme.
public type SecuritySchemeId record {
    # The ID of the issue security scheme.
    string id;
};

public type JiraUserField record {|
    string accountId;
|};

# A list of issues suggested for use in auto-completion.
public type IssuePickerSuggestions record {|
    # A list of issues for an issue type suggested for use in auto-completion.
    IssuePickerSuggestionsIssueType[] sections?;
|};

# Represents the Queries record for the operation: getProjectsForIssueTypeScreenScheme
public type GetProjectsForIssueTypeScreenSchemeQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    string query = "";
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: findComponentsForProjects
public type FindComponentsForProjectsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
    string query?;
    # The project IDs and/or project keys (case sensitive).
    string[] projectIdsOrKeys?;
    # [Order](#ordering) the results by a field:
    # 
    #  *  `description` Sorts by the component description.
    #  *  `name` Sorts by component name.
    "description"|"-description"|"+description"|"name"|"-name"|"+name" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type ComponentJsonBean record {
    string ari?;
    string description?;
    string id?;
    record {|string...;|} metadata?;
    string name?;
    string self?;
};

public type JiraSingleGroupPickerField record {|
    string fieldId;
    JiraGroupInput group;
|};

# The metadata describing an issue field.
public type FieldMetadata record {|
    # The list of values allowed in the field.
    anydata[] allowedValues?;
    # The URL that can be used to automatically complete the field.
    string autoCompleteUrl?;
    # The configuration properties.
    record {} configuration?;
    # The default value of the field.
    anydata defaultValue?;
    # Whether the field has a default value.
    boolean hasDefaultValue?;
    # The key of the field.
    string 'key;
    # The name of the field.
    string name;
    # The list of operations that can be performed on the field.
    string[] operations;
    # Whether the field is required.
    boolean required;
    # The data type of the field.
    JsonTypeBean schema;
|};

# Details of an issue update request.
public type IssueUpdateDetails record {
    # List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
    record {} fields?;
    # Additional issue history details.
    HistoryMetadata historyMetadata?;
    # Details of issue properties to be add or update.
    EntityProperty[] properties?;
    # Details of a transition. Required when performing a transition, optional when creating or editing an issue.
    IssueTransition transition?;
    # A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
    record {|FieldUpdateOperation[]...;|} update?;
};

# A list of issue link type beans.
public type IssueLinkTypes record {|
    # The issue link type bean.
    IssueLinkType[] issueLinkTypes?;
|};

# Default value for a labels custom field.
public type CustomFieldContextDefaultValueLabels record {
    # The default labels value.
    string[] labels;
    string 'type;
};

# Represents the Queries record for the operation: getIssueTypeSchemesMapping
public type GetIssueTypeSchemesMappingQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
    int[] issueTypeSchemeId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: updateFilter
public type UpdateFilterQueries record {
    # EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideSharePermissions = false;
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# The result of a JQL search.
public type SearchResults record {|
    # Expand options that include additional search result details in the response.
    string expand?;
    # The list of issues found by the search.
    IssueBean[] issues?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The ID and name of each field in the search results.
    record {|string...;|} names?;
    # The schema describing the field types in the search results.
    record {|JsonTypeBean...;|} schema?;
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The number of results on the page.
    int:Signed32 total?;
    # Any warnings related to the JQL query.
    string[] warningMessages?;
|};

# Represents the Queries record for the operation: setFavouriteForFilter
public type SetFavouriteForFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

public type JiraNumberField record {|
    string fieldId;
    decimal value?;
|};

public type ActorsMap record {|
    # The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
    string[] group?;
    # The ID of the group to add. This parameter cannot be used with the `group` parameter.
    string[] groupId?;
    # The user account ID of the user to add.
    string[] user?;
|};

# Represents the Queries record for the operation: updateDashboard
public type UpdateDashboardQueries record {
    # Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
    boolean extendAdminPermissions = false;
};

# Details about a workflow scheme.
public type WorkflowScheme record {|
    # The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
    string defaultWorkflow?;
    # The description of the workflow scheme.
    string description?;
    # Whether the workflow scheme is a draft or not.
    boolean draft?;
    # The ID of the workflow scheme.
    int id?;
    # The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
    record {|string...;|} issueTypeMappings?;
    # The issue types available in Jira.
    record {|IssueTypeDetails...;|} issueTypes?;
    # The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
    string lastModified?;
    # The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
    User lastModifiedUser?;
    # The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
    string name?;
    # For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
    string originalDefaultWorkflow?;
    # For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
    record {|string...;|} originalIssueTypeMappings?;
    string self?;
    # Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
    # 
    #  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
    #  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
    #  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
    # 
    # Defaults to `false`.
    boolean updateDraftIfNeeded?;
|};

# Details about an project using security scheme mapping.
public type IssueSecuritySchemeToProjectMapping record {
    string issueSecuritySchemeId?;
    string projectId?;
};

# The default value for a project custom field.
public type CustomFieldContextDefaultValueProject record {
    # The ID of the context.
    string contextId;
    # The ID of the default project.
    string projectId;
    string 'type;
};

# The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. This bean will be replacing `JexpIssues` bean as part of new `evaluate` endpoint
public type JexpEvaluateCtxIssues record {|
    # The JQL query that specifies the set of issues available in the Jira expression.
    JexpEvaluateCtxJqlIssues jql?;
|};

# A time predicate for a temporal JQL clause.
public type JqlQueryClauseTimePredicate record {
    JqlQueryClauseOperand operand;
    # The operator between the field and the operand.
    "before"|"after"|"from"|"to"|"on"|"during"|"by" operator;
};

# A screen tab.
public type ScreenableTab record {|
    # The ID of the screen tab.
    int id?;
    # The name of the screen tab. The maximum length is 255 characters.
    string name;
|};

# Details of global permissions to look up and project permissions with associated projects and issues to look up.
public type BulkPermissionsRequestBean record {|
    # The account ID of a user.
    string accountId?;
    # Global permissions to look up.
    string[] globalPermissions?;
    # Project permissions with associated projects and issues to look up.
    BulkProjectPermissions[] projectPermissions?;
|};

# Details of the settings for a dashboard gadget.
public type DashboardGadgetSettings record {|
    # The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
    string color?;
    # Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
    boolean ignoreUriAndModuleKeyValidation?;
    # The module key of the gadget type. Can't be provided with `uri`.
    string moduleKey?;
    # The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
    DashboardGadgetPosition position?;
    # The title of the gadget.
    string title?;
    # The URI of the gadget type. Can't be provided with `moduleKey`.
    string uri?;
|};

# A page of items.
public type PageBeanResolutionJsonBean record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ResolutionJsonBean[] values?;
|};

# A compound workflow transition rule condition. This object returns `nodeType` as `compound`.
public type WorkflowCompoundCondition record {
    # The list of workflow conditions.
    WorkflowCondition[] conditions;
    string nodeType;
    # The compound condition operator.
    "AND"|"OR" operator;
};

# Meta data describing the `issues` context variable.This bean will be replacing IssuesMetaBean bean as part of new `evaluate` endpoint
public type JExpEvaluateIssuesMetaBean record {|
    JExpEvaluateIssuesJqlMetaDataBean jql?;
|};

# The ID and the name of the workflow scheme.
public type WorkflowSchemeIdName record {|
    # The ID of the workflow scheme.
    string id;
    # The name of the workflow scheme.
    string name;
|};

# Represents the Queries record for the operation: findUserKeysByQuery
public type FindUserKeysByQueryQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResult = 100;
    # The search query.
    string query;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The default value for a multiple version picker custom field.
public type CustomFieldContextDefaultValueMultipleVersionPicker record {
    string 'type;
    # The IDs of the default versions.
    string[] versionIds;
    # The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
    string versionOrder?;
};

# Represents the Queries record for the operation: findAssignableUsers
public type FindAssignableUsersQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The key of the issue. Required, unless `project` is specified.
    string issueKey?;
    # The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.
    string query?;
    # The project ID or project key (case sensitive). Required, unless `issueKey` is specified.
    string project?;
    boolean recommend = false;
    # The sessionId of this request. SessionId is the same until the assignee is set.
    string sessionId?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # The ID of the transition.
    int:Signed32 actionDescriptorId?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type JiraLabelsField record {|
    "ADD"|"REMOVE"|"REPLACE"|"REMOVE_ALL" bulkEditMultiSelectFieldOption;
    string fieldId;
    JiraLabelsInput[] labels;
|};

# Represents the Queries record for the operation: addComment
public type AddCommentQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
};

# Represents the Queries record for the operation: getStatusesById
public type GetStatusesByIdQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `usages` Returns the project and issue types that use the status in their workflow.
    #  *  `workflowUsages` Returns the workflows that use the status.
    string expand?;
    # The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.
    # 
    # Min items `1`, Max items `50`
    string[] id;
};

# The trigger rules available.
public type AvailableWorkflowTriggers record {|
    # The list of available trigger types.
    AvailableWorkflowTriggerTypes[] availableTypes;
    # The rule key of the rule.
    string ruleKey;
|};

# Represents the Queries record for the operation: deleteStatusesById
public type DeleteStatusesByIdQueries record {
    # The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.
    # 
    # Min items `1`, Max items `50`
    string[] id;
};

# Represents the Queries record for the operation: getFailedWebhooks
public type GetFailedWebhooksQueries record {
    # The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.
    int:Signed32 maxResults?;
    # The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.
    int after?;
};

# Lists of JQL reference data.
public type JQLReferenceData record {|
    # List of JQL query reserved words.
    string[] jqlReservedWords?;
    # List of fields usable in JQL queries.
    FieldReferenceData[] visibleFieldNames?;
    # List of functions usable in JQL queries.
    FunctionReferenceData[] visibleFunctionNames?;
|};

# Details of an issue type screen scheme.
public type IssueTypeScreenScheme record {|
    # The description of the issue type screen scheme.
    string description?;
    # The ID of the issue type screen scheme.
    string id;
    # The name of the issue type screen scheme.
    string name;
|};

# Details of a screen.
public type ScreenDetails record {|
    # The description of the screen. The maximum length is 255 characters.
    string description?;
    # The name of the screen. The name must be unique. The maximum length is 255 characters.
    string name;
|};

# Identifiers for a project.
public type ProjectIdentifiers record {|
    # The ID of the created project.
    int id;
    # The key of the created project.
    string 'key;
    # The URL of the created project.
    string self;
|};

# Represents the Queries record for the operation: getUserPropertyKeys
public type GetUserPropertyKeysQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type SubmittedBulkOperation record {|
    string taskId?;
|};

# Represents the Queries record for the operation: getProjectContextMapping
public type GetProjectContextMappingQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.
    int[] contextId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Mapping of issue priorities for changes in priority schemes.
public type PriorityMapping record {|
    # The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme).
    record {|int...;|} 'in?;
    # The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme.
    record {|int...;|} out?;
|};

# Details of the contextual configuration for a custom field.
public type ContextualConfiguration record {|
    # The field configuration.
    anydata configuration?;
    # The ID of the field context the configuration is associated with.
    string fieldContextId;
    # The ID of the configuration.
    string id;
    # The field value schema.
    anydata schema?;
|};

# ID of a registered webhook or error messages explaining why a webhook wasn't registered.
public type RegisteredWebhook record {|
    # The ID of the webhook. Returned if the webhook is created.
    int createdWebhookId?;
    # Error messages specifying why the webhook creation failed.
    string[] errors?;
|};

# Details of functions that can be used in advanced searches.
public type FunctionReferenceData record {|
    # The display name of the function.
    string displayName?;
    # Whether the function can take a list of arguments.
    "true"|"false" isList?;
    # Whether the function supports both single and list value operators.
    "true"|"false" supportsListAndSingleValueOperators?;
    # The data types returned by the function.
    string[] types?;
    # The function identifier.
    string value?;
|};

# Details of a context to project association.
public type CustomFieldContextProjectMapping record {|
    # The ID of the context.
    string contextId;
    # Whether context is global.
    boolean isGlobalContext?;
    # The ID of the project.
    string projectId?;
|};

# A page of items.
public type PageBeanString record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    string[] values?;
|};

# Details of the order-by JQL clause.
public type JqlQueryOrderByClause record {|
    # The list of order-by clause fields and their ordering directives.
    JqlQueryOrderByClauseElement[] fields;
|};

# A list of changelog IDs.
public type IssueChangelogIds record {|
    # The list of changelog IDs.
    int[] changelogIds;
|};

# Represents the Queries record for the operation: bulkGetUsersMigration
public type BulkGetUsersMigrationQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 10;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.
    string[] 'key?;
    # Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.
    string[] username?;
};

# Represents the Queries record for the operation: replaceCustomFieldOption
public type ReplaceCustomFieldOptionQueries record {
    # A JQL query that specifies the issues to be updated. For example, *project=10000*.
    string jql?;
    # The ID of the option that will replace the currently selected option.
    int replaceWith?;
};

# Classification mapping for classifications in source issues to respective target classification.
public type targetClassification record {|
    # An object with the key as the ID of the target classification and value with the list of the IDs of the current source classifications.
    record {|string[]...;|} classifications;
    # ID of the source issueType to which issues present in `issueIdOrKeys` belongs.
    string issueType?;
    # ID or key of the source project to which issues present in `issueIdOrKeys` belongs.
    string projectKeyOrId?;
|};

# A page of items.
public type PageBeanVersion record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    Version[] values?;
|};

# Information about the most recent use of a field.
public type FieldLastUsed record {|
    # Last used value type:
    # 
    #  *  *TRACKED*: field is tracked and a last used date is available.
    #  *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
    #  *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
    "TRACKED"|"NOT_TRACKED"|"NO_INFORMATION" 'type?;
    # The date when the value of the field last changed.
    string value?;
|};

# A page of items.
public type PageBeanUserKey record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    UserKey[] values?;
|};

# A page of items.
public type PageBeanScreenScheme record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ScreenScheme[] values?;
|};

# Details about a permission granted to a user or group.
public type PermissionGrant record {
    # The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    PermissionHolder holder?;
    # The ID of the permission granted details.
    int id?;
    # The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions.
    string permission?;
    # The URL of the permission granted details.
    string self?;
};

# Represents the Queries record for the operation: findUsersByQuery
public type FindUsersByQueryQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The search query.
    string query;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getAssignedPermissionScheme
public type GetAssignedPermissionSchemeQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    # 
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# A workflow transition rule condition. This object returns `nodeType` as `simple`.
public type WorkflowSimpleCondition record {
    # EXPERIMENTAL. The configuration of the transition rule.
    record {} configuration?;
    string nodeType;
    # The type of the transition rule.
    string 'type;
};

# The starting point for the statuses in the workflow.
public type WorkflowLayout record {|
    # The x axis location.
    decimal x?;
    # The y axis location.
    decimal y?;
|};

# Represents the Queries record for the operation: getCommentsByIds
public type GetCommentsByIdsQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `renderedBody` Returns the comment body rendered in HTML.
    #  *  `properties` Returns the comment's properties.
    string expand?;
};

# Represents the Queries record for the operation: setPreference
public type SetPreferenceQueries record {
    # The key of the preference. The maximum length is 255 characters.
    string 'key;
};

# Field mapping for mandatory fields in target
public type targetMandatoryFields record {|
    # Contains the value of mandatory fields
    record {|fields...;|} fields;
|};

# Count of issues assigned to a component.
public type ComponentIssuesCount record {|
    # The count of issues assigned to a component.
    int issueCount?;
    # The URL for this count of issues for a component.
    string self?;
|};

# Represents the Queries record for the operation: searchProjects
public type SearchProjectsQueries record {
    # Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.
    string typeKey?;
    # The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.
    string[] keys?;
    # Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).
    string query?;
    # [Order](#ordering) the results by a field.
    # 
    #  *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).
    #  *  `issueCount` Sorts by the total number of issues in each project.
    #  *  `key` Sorts by project key.
    #  *  `lastIssueUpdatedTime` Sorts by the last issue update time.
    #  *  `name` Sorts by project name.
    #  *  `owner` Sorts by project lead.
    #  *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
    #  *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.
    "category"|"-category"|"+category"|"key"|"-key"|"+key"|"name"|"-name"|"+name"|"owner"|"-owner"|"+owner"|"issueCount"|"-issueCount"|"+issueCount"|"lastIssueUpdatedDate"|"-lastIssueUpdatedDate"|"+lastIssueUpdatedDate"|"archivedDate"|"+archivedDate"|"-archivedDate"|"deletedDate"|"+deletedDate"|"-deletedDate" orderBy = "key";
    # EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.
    string propertyQuery?;
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
    # 
    #  *  `description` Returns the project description.
    #  *  `projectKeys` Returns all project keys associated with a project.
    #  *  `lead` Returns information about the project lead.
    #  *  `issueTypes` Returns all issue types associated with the project.
    #  *  `url` Returns the URL associated with the project.
    #  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter results by projects for which the user can:
    # 
    #  *  `view` the project, meaning that they have one of the following permissions:
    #     
    #      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    #  *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #  *  `edit` the project, meaning that they have one of the following permissions:
    #     
    #      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    #  *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.
    "view"|"browse"|"edit"|"create" action = "view";
    # The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
    int categoryId?;
    # EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.
    StringList[] properties?;
    # EXPERIMENTAL. Filter results by project status:
    # 
    #  *  `live` Search live projects.
    #  *  `archived` Search archived projects.
    #  *  `deleted` Search deleted projects, those in the recycle bin.
    ("live"|"archived"|"deleted")[] status?;
};

# A page of items.
public type PageBeanContextualConfiguration record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    ContextualConfiguration[] values?;
|};

# Details of a project feature.
public type ProjectFeature record {|
    # The key of the feature.
    string feature?;
    # URI for the image representing the feature.
    string imageUri?;
    # Localized display description for the feature.
    string localisedDescription?;
    # Localized display name for the feature.
    string localisedName?;
    # List of keys of the features required to enable the feature.
    string[] prerequisites?;
    # The ID of the project.
    int projectId?;
    # The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
    "ENABLED"|"DISABLED"|"COMING_SOON" state?;
    # Whether the state of the feature can be updated.
    boolean toggleLocked?;
|};

# Details of the name, description, and default issue type for an issue type scheme.
public type IssueTypeSchemeUpdateDetails record {|
    # The ID of the default issue type of the issue type scheme.
    string defaultIssueTypeId?;
    # The description of the issue type scheme. The maximum length is 4000 characters.
    string description?;
    # The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
    string name?;
|};

# The trigger configuration associated with a workflow.
public type WorkflowTrigger record {|
    # The ID of the trigger.
    string id?;
    # The parameters of the trigger.
    record {|string...;|} parameters;
    # The rule key of the trigger.
    string ruleKey;
|};

public type JiraDateTimeInput record {|
    string formattedDateTime;
|};

# Represents the Queries record for the operation: getPrioritySchemes
public type GetPrioritySchemesQueries record {
    # A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.
    string expand?;
    # Whether only the default priority is returned.
    boolean onlyDefault = false;
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The name of scheme to search for.
    string schemeName = "";
    # The ordering to return the priority schemes by.
    "name"|"+name"|"-name" orderBy = "+name";
    # A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
    int[] schemeId?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
    # A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
    int[] priorityId?;
};

# Details of an entity property.
public type JqlQueryFieldEntityProperty record {
    # The object on which the property is set.
    string entity;
    # The key of the property.
    string 'key;
    # The path in the property value to query.
    string path;
    # The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
    "number"|"string"|"text"|"date"|"user" 'type?;
};

# Represents the Queries record for the operation: deleteComponent
public type DeleteComponentQueries record {
    # The ID of the component to replace the deleted component. If this value is null no replacement is made.
    string moveIssuesTo?;
};

# Represents the Queries record for the operation: findBulkAssignableUsers
public type FindBulkAssignableUsersQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
    string query?;
    # A list of project keys (case sensitive). This parameter accepts a comma-separated list.
    string projectKeys;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# A page of items.
public type PageBeanWorkflowScheme record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    WorkflowScheme[] values?;
|};

public type WorkflowUpdateResponse record {|
    # List of updated statuses.
    JiraWorkflowStatus[] statuses?;
    # If there is a [asynchronous task](#async-operations) operation, as a result of this update.
    string? taskId?;
    # List of updated workflows.
    JiraWorkflow[] workflows?;
|};

# A page of CreateMetaIssueTypes.
public type PageOfCreateMetaIssueTypes record {
    IssueTypeIssueCreateMetadata[] createMetaIssueType?;
    # The list of CreateMetaIssueType.
    IssueTypeIssueCreateMetadata[] issueTypes?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The total number of items in all pages.
    int total?;
};

# Details of the group associated with the role.
public type ProjectRoleGroup record {|
    # The display name of the group.
    string displayName?;
    # The ID of the group.
    string groupId?;
    # The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group.
    string name?;
|};

# Metadata for an archive (for example a zip) and its contents.
public type AttachmentArchiveMetadataReadable record {|
    # The list of the items included in the archive.
    AttachmentArchiveItemReadable[] entries?;
    # The ID of the attachment.
    int id?;
    # The MIME type of the attachment.
    string mediaType?;
    # The name of the archive file.
    string name?;
    # The number of items included in the archive.
    int totalEntryCount?;
|};

public type JiraDateField record {|
    JiraDateInput date?;
    string fieldId;
|};

# Represents the Queries record for the operation: deleteWorkflowMapping
public type DeleteWorkflowMappingQueries record {
    # Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
    boolean updateDraftIfNeeded = false;
    # The name of the workflow.
    string workflowName;
};

# Details of user or system associated with a issue history metadata item.
public type HistoryMetadataParticipant record {
    # The URL to an avatar for the user or system associated with a history record.
    string avatarUrl?;
    # The display name of the user or system associated with a history record.
    string displayName?;
    # The key of the display name of the user or system associated with a history record.
    string displayNameKey?;
    # The ID of the user or system associated with a history record.
    string id?;
    # The type of the user or system associated with a history record.
    string 'type?;
    # The URL of the user or system associated with a history record.
    string url?;
};

# An issue suggested for use in the issue picker auto-completion.
public type SuggestedIssue record {|
    # The ID of the issue.
    int id?;
    # The URL of the issue type's avatar.
    string img?;
    # The key of the issue.
    string 'key?;
    # The key of the issue in HTML format.
    string keyHtml?;
    # The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
    string summary?;
    # The phrase containing the query string, as plain text.
    string summaryText?;
|};

# The mapping of old to new status ID.
public type StatusMigration record {
    # The new status ID.
    string newStatusReference;
    # The old status ID.
    string oldStatusReference;
};

# Represents the Queries record for the operation: getUser
public type GetUserQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
    # 
    #  *  `groups` includes all groups and nested groups to which the user belongs.
    #  *  `applicationRoles` includes details of all the applications to which the user has access.
    string expand?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
    string 'key?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
    string username?;
};

# Represents the Queries record for the operation: copyDashboard
public type CopyDashboardQueries record {
    # Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
    boolean extendAdminPermissions = false;
};

# A page of items.
public type PageBeanCustomFieldContextOption record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    CustomFieldContextOption[] values?;
|};

public type UnrestrictedUserEmail record {
    # The accountId of the user
    string accountId?;
    # The email of the user
    string email?;
};

public type IssuesUpdateBean record {
    IssueUpdateDetails[] issueUpdates?;
};

public type JiraLabelsInput record {|
    string name;
|};

# Represents the Queries record for the operation: getAllScreenTabs
public type GetAllScreenTabsQueries record {
    # The key of the project.
    string projectKey?;
};

# Details about a component with a count of the issues it contains.
public type ComponentWithIssueCount record {|
    # The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
    User assignee?;
    # The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
    # 
    #  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
    #  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
    #  *  `UNASSIGNED` an assignee is not set for issues created with this component.
    #  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # The description for the component.
    string description?;
    # The unique identifier for the component.
    string id?;
    # Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
    boolean isAssigneeTypeValid?;
    # Count of issues for the component.
    int issueCount?;
    # The user details for the component's lead user.
    User lead?;
    # The name for the component.
    string name?;
    # The key of the project to which the component is assigned.
    string project?;
    # Not used.
    int projectId?;
    # The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
    User realAssignee?;
    # The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
    # 
    #  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
    #  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
    #  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
    #  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" realAssigneeType?;
    # The URL for this count of the issues contained in the component.
    string self?;
|};

# Default value for a float (number) custom field.
public type CustomFieldContextDefaultValueFloat record {
    # The default floating-point number.
    decimal number;
    string 'type;
};

# A list of custom field options for a context.
public type CustomFieldUpdatedContextOptionsList record {|
    # The updated custom field options.
    CustomFieldOptionUpdate[] options?;
|};

# Details about system and custom avatars.
public type Avatars record {|
    # Custom avatars list.
    Avatar[] custom?;
    # System avatars list.
    Avatar[] system?;
|};

# The conditions group associated with the transition.
public type ConditionGroupConfiguration record {|
    # The nested conditions of the condition group.
    ConditionGroupConfiguration[] conditionGroups?;
    # The rules for this condition.
    WorkflowRuleConfiguration[] conditions?;
    # Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
    "ANY"|"ALL" operation?;
|};

# Represents the Queries record for the operation: publishDraftWorkflowScheme
public type PublishDraftWorkflowSchemeQueries record {
    # Whether the request only performs a validation.
    boolean validateOnly = false;
};

# The scope of the workflow.
public type WorkflowScope record {|
    ProjectId? project?;
    # The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
    "PROJECT"|"GLOBAL" 'type;
|};

# The user details.
public type NewUserDetails record {
    # Deprecated, do not use.
    string[] applicationKeys?;
    # This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
    string displayName?;
    # The email address for the user.
    string emailAddress;
    # This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
    string password?;
    # Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array.
    string[] products;
    # The URL of the user.
    string self?;
};

# Details of a field configuration scheme.
public type FieldConfigurationScheme record {|
    # The description of the field configuration scheme.
    string description?;
    # The ID of the field configuration scheme.
    string id;
    # The name of the field configuration scheme.
    string name;
|};

# A user found in a search.
public type UserPickerUser record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    string accountId?;
    # The avatar URL of the user.
    string avatarUrl?;
    # The display name of the user. Depending on the user’s privacy setting, this may be returned as null.
    string displayName?;
    # The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
    string html?;
    # This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
|};

# An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
public type EntityProperty record {|
    # The key of the property. Required on create and update.
    string 'key?;
    # The value of the property. Required on create and update.
    anydata value?;
|};

# The explicit association between issue types and a workflow in a workflow scheme.
public type WorkflowSchemeAssociation record {|
    # The issue types assigned to the workflow.
    string[] issueTypeIds;
    # The ID of the workflow.
    string workflowId;
|};

# Meta data describing the `issues` context variable.
public type IssuesMetaBean record {|
    IssuesJqlMetaDataBean jql?;
|};

# Details of a user or group subscribing to a filter.
public type FilterSubscription record {|
    # The group subscribing to filter.
    GroupName group?;
    # The ID of the filter subscription.
    int id?;
    # The user subscribing to filter.
    User user?;
|};

# Represents the Queries record for the operation: getRemoteIssueLinks
public type GetRemoteIssueLinksQueries record {
    # The global ID of the remote issue link.
    string globalId?;
};

# Details of the workflow and its transition rules.
public type WorkflowRulesSearch record {
    # Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
    string expand?;
    # The list of workflow rule IDs.
    @constraint:Array {maxLength: 10, minLength: 1}
    string[] ruleIds;
    # The workflow ID.
    string workflowEntityId;
};

# A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated.
public type Changelog record {|
    # The user who made the change.
    UserDetails author?;
    # The date on which the change took place.
    string created?;
    # The history metadata associated with the changed.
    HistoryMetadata historyMetadata?;
    # The ID of the changelog.
    string id?;
    # The list of items changed.
    ChangeDetails[] items?;
|};

# A page of items.
public type PageBeanCustomFieldContext record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    CustomFieldContext[] values?;
|};

# Issue security scheme and it's details
public type CreateIssueSecuritySchemeDetails record {
    # The description of the issue security scheme.
    @constraint:String {maxLength: 255}
    string description?;
    # The list of scheme levels which should be added to the security scheme.
    SecuritySchemeLevelBean[] levels?;
    # The name of the issue security scheme. Must be unique (case-insensitive).
    @constraint:String {maxLength: 60}
    string name;
};

# Represents the Queries record for the operation: getEditIssueMeta
public type GetEditIssueMetaQueries record {
    # Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideScreenSecurity = false;
    # Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideEditableFlag = false;
};

# Details of an issue resolution.
public type CreateResolutionDetails record {
    # The description of the resolution.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the resolution. Must be unique (case-insensitive).
    @constraint:String {maxLength: 60}
    string name;
};

# Details of a gadget.
public type DashboardGadget record {|
    # The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
    "blue"|"red"|"yellow"|"green"|"cyan"|"purple"|"gray"|"white" color;
    # The ID of the gadget instance.
    int id;
    # The module key of the gadget type.
    string moduleKey?;
    # The position of the gadget.
    DashboardGadgetPosition position;
    # The title of the gadget.
    string title;
    # The URI of the gadget type.
    string uri?;
|};

public type WorkflowReadRequest record {|
    # The list of projects and issue types to query.
    ProjectAndIssueTypePair[] projectAndIssueTypes?;
    # The list of workflow IDs to query.
    string[] workflowIds?;
    # The list of workflow names to query.
    string[] workflowNames?;
|};

# The data classification.
public type DataClassificationLevelsBean record {|
    # The data classifications.
    DataClassificationTagBean[] classifications?;
|};

# The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones.
public type ServerInformation_serverTimeZone record {
    string displayName?;
    int:Signed32 dstsavings?;
    string id?;
    int:Signed32 rawOffset?;
};

# The project and issue type mappings.
public type ProjectIssueTypeMappings record {|
    # The project and issue type mappings.
    ProjectIssueTypeMapping[] mappings;
|};

# Represents the Queries record for the operation: setUserProperty
public type SetUserPropertyQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# A screen tab field.
public type ScreenableField record {|
    # The ID of the screen tab field.
    string id?;
    # The name of the screen tab field. Required on create and update. The maximum length is 255 characters.
    string name?;
|};

# Represents the Queries record for the operation: getComment
public type GetCommentQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
};

# Represents the Queries record for the operation: getProjectRole
public type GetProjectRoleQueries record {
    # Exclude inactive users.
    boolean excludeInactiveUsers = false;
};

# Details about a project component.
public type ProjectComponent record {|
    # Compass component's ID. Can't be updated. Not required for creating a Project Component.
    string ari?;
    # The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
    User assignee?;
    # The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
    # 
    #  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
    #  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
    #  *  `UNASSIGNED` an assignee is not set for issues created with this component.
    #  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
    # 
    # Default value: `PROJECT_DEFAULT`.  
    # Optional when creating or updating a component.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # The description for the component. Optional when creating or updating a component.
    string description?;
    # The unique identifier for the component.
    string id?;
    # Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
    boolean isAssigneeTypeValid?;
    # The user details for the component's lead user.
    User lead?;
    # The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string leadAccountId?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string leadUserName?;
    # Compass component's metadata. Can't be updated. Not required for creating a Project Component.
    record {|string...;|} metadata?;
    # The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
    string name?;
    # The key of the project the component is assigned to. Required when creating a component. Can't be updated.
    string project?;
    # The ID of the project the component is assigned to.
    int projectId?;
    # The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
    User realAssignee?;
    # The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
    # 
    #  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
    #  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
    #  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
    #  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" realAssigneeType?;
    # The URL of the component.
    string self?;
|};

public type JiraSingleLineTextField record {|
    string fieldId;
    string text;
|};

# Details of issue history metadata.
public type HistoryMetadata record {
    # The activity described in the history record.
    string activityDescription?;
    # The key of the activity described in the history record.
    string activityDescriptionKey?;
    # Details of the user whose action created the history record.
    HistoryMetadataParticipant actor?;
    # Details of the cause that triggered the creation the history record.
    HistoryMetadataParticipant cause?;
    # The description of the history record.
    string description?;
    # The description key of the history record.
    string descriptionKey?;
    # The description of the email address associated the history record.
    string emailDescription?;
    # The description key of the email address associated the history record.
    string emailDescriptionKey?;
    # Additional arbitrary information about the history record.
    record {|string...;|} extraData?;
    # Details of the system that generated the history record.
    HistoryMetadataParticipant generator?;
    # The type of the history record.
    string 'type?;
};

public type JiraPriorityField record {|
    string priorityId;
|};

# A page of failed webhooks.
public type FailedWebhooks record {|
    # The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
    int:Signed32 maxResults;
    # The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
    string next?;
    # The list of webhooks.
    FailedWebhook[] values;
|};

# Details of a request to bulk edit shareable entity.
public type BulkEditShareableEntityResponse record {|
    # Allowed action for bulk edit shareable entity
    "changeOwner"|"changePermission"|"addPermission"|"removePermission" action;
    # The mapping dashboard id to errors if any.
    record {|BulkEditActionError...;|} entityErrors?;
|};

public type ListWrapperCallbackApplicationRole record {|
|};

# Represents the Queries record for the operation: getCustomFieldConfiguration
public type GetCustomFieldConfigurationQueries record {
    # The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
    int[] fieldContextId?;
    # The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.
    int issueId?;
    # The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.
    string issueTypeId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.
    string projectKeyOrId?;
    # The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getFieldConfigurationSchemeMappings
public type GetFieldConfigurationSchemeMappingsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.
    @constraint:Array {maxLength: 50, minLength: 1}
    int[] fieldConfigurationSchemeId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Associated issue type screen scheme and project.
public type IssueTypeScreenSchemeProjectAssociation record {|
    # The ID of the issue type screen scheme.
    string issueTypeScreenSchemeId?;
    # The ID of the project.
    string projectId?;
|};

# Issue type scheme with a list of the projects that use it.
public type IssueTypeSchemeProjects record {|
    # Details of an issue type scheme.
    IssueTypeScheme issueTypeScheme;
    # The IDs of the projects using the issue type scheme.
    string[] projectIds;
|};

# The project issue type hierarchy.
public type Hierarchy record {|
    # The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int baseLevelId?;
    # Details about the hierarchy level.
    SimplifiedHierarchyLevel[] levels?;
|};

# Details of a screen scheme.
public type UpdateScreenSchemeDetails record {|
    # The description of the screen scheme. The maximum length is 255 characters.
    string description?;
    # The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
    string name?;
    # The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
    UpdateScreenTypes screens?;
|};

# Details of updates for a custom field.
public type CustomFieldValueUpdateDetails record {|
    # The list of custom field update details.
    CustomFieldValueUpdate[] updates?;
|};

# A container for the watch status of a list of issues.
public type BulkIssueIsWatching record {|
    # The map of issue ID to boolean watch status.
    record {|boolean...;|} issuesIsWatching?;
|};

# The default value for a Date custom field.
public type CustomFieldContextDefaultValueDate record {
    # The default date in ISO format. Ignored if `useCurrent` is true.
    string date?;
    string 'type;
    # Whether to use the current date.
    boolean useCurrent = false;
};

# Precomputation id and its new value.
public type JqlFunctionPrecomputationUpdateBean record {|
    # The error message to be displayed to the user if the given function clause is no longer valid during recalculation of the precomputation.
    string 'error?;
    # The id of the precomputation to update.
    string id;
    # The new value of the precomputation.
    string value?;
|};

# Details about the project.
public type CreateProjectDetails record {|
    # The default assignee when creating issues for this project.
    "PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # An integer value for the project's avatar.
    int avatarId?;
    # The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
    int categoryId?;
    # A brief description of the project.
    string description?;
    # The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
    int fieldConfigurationScheme?;
    # The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
    int issueSecurityScheme?;
    # The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
    int issueTypeScheme?;
    # The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
    int issueTypeScreenScheme?;
    # Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
    string 'key;
    # This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
    string lead?;
    # The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
    @constraint:String {maxLength: 128}
    string leadAccountId?;
    # The name of the project.
    string name;
    # The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
    int notificationScheme?;
    # The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
    int permissionScheme?;
    # A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
    "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban"|"com.pyxis.greenhopper.jira:gh-simplified-agility-scrum"|"com.pyxis.greenhopper.jira:gh-simplified-basic"|"com.pyxis.greenhopper.jira:gh-simplified-kanban-classic"|"com.pyxis.greenhopper.jira:gh-simplified-scrum-classic"|"com.pyxis.greenhopper.jira:gh-cross-team-template"|"com.pyxis.greenhopper.jira:gh-cross-team-planning-template"|"com.atlassian.servicedesk:simplified-it-service-management"|"com.atlassian.servicedesk:simplified-it-service-management-basic"|"com.atlassian.servicedesk:simplified-general-service-desk"|"com.atlassian.servicedesk:simplified-general-service-desk-it"|"com.atlassian.servicedesk:simplified-general-service-desk-business"|"com.atlassian.servicedesk:simplified-internal-service-desk"|"com.atlassian.servicedesk:simplified-external-service-desk"|"com.atlassian.servicedesk:simplified-hr-service-desk"|"com.atlassian.servicedesk:simplified-facilities-service-desk"|"com.atlassian.servicedesk:simplified-legal-service-desk"|"com.atlassian.servicedesk:simplified-marketing-service-desk"|"com.atlassian.servicedesk:simplified-finance-service-desk"|"com.atlassian.servicedesk:simplified-analytics-service-desk"|"com.atlassian.servicedesk:simplified-design-service-desk"|"com.atlassian.servicedesk:simplified-sales-service-desk"|"com.atlassian.servicedesk:simplified-halp-service-desk"|"com.atlassian.servicedesk:simplified-blank-project-it"|"com.atlassian.servicedesk:simplified-blank-project-business"|"com.atlassian.servicedesk:next-gen-it-service-desk"|"com.atlassian.servicedesk:next-gen-hr-service-desk"|"com.atlassian.servicedesk:next-gen-legal-service-desk"|"com.atlassian.servicedesk:next-gen-marketing-service-desk"|"com.atlassian.servicedesk:next-gen-facilities-service-desk"|"com.atlassian.servicedesk:next-gen-general-service-desk"|"com.atlassian.servicedesk:next-gen-general-it-service-desk"|"com.atlassian.servicedesk:next-gen-general-business-service-desk"|"com.atlassian.servicedesk:next-gen-analytics-service-desk"|"com.atlassian.servicedesk:next-gen-finance-service-desk"|"com.atlassian.servicedesk:next-gen-design-service-desk"|"com.atlassian.servicedesk:next-gen-sales-service-desk"|"com.atlassian.jira-core-project-templates:jira-core-simplified-content-management"|"com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval"|"com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking"|"com.atlassian.jira-core-project-templates:jira-core-simplified-process-control"|"com.atlassian.jira-core-project-templates:jira-core-simplified-procurement"|"com.atlassian.jira-core-project-templates:jira-core-simplified-project-management"|"com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment"|"com.atlassian.jira-core-project-templates:jira-core-simplified-task-" projectTemplateKey?;
    # The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
    "software"|"service_desk"|"business" projectTypeKey?;
    # A link to information about this project, such as project documentation
    string url?;
    # The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
    int workflowScheme?;
|};

# The default value for a date time custom field.
public type CustomFieldContextDefaultValueDateTime record {
    # The default date-time in ISO format. Ignored if `useCurrent` is true.
    string dateTime?;
    string 'type;
    # Whether to use the current date.
    boolean useCurrent = false;
};

# Represents the Queries record for the operation: getAllDashboards
public type GetAllDashboardsQueries record {
    # The filter applied to the list of dashboards. Valid values are:
    # 
    #  *  `favourite` Returns dashboards the user has marked as favorite.
    #  *  `my` Returns dashboards owned by the user.
    "my"|"favourite" filter?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 20;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
};

# Various counts of issues within a version.
public type VersionIssueCounts record {|
    # List of custom fields using the version.
    VersionUsageInCustomField[] customFieldUsage?;
    # Count of issues where a version custom field is set to the version.
    int issueCountWithCustomFieldsShowingVersion?;
    # Count of issues where the `affectedVersion` is set to the version.
    int issuesAffectedCount?;
    # Count of issues where the `fixVersion` is set to the version.
    int issuesFixedCount?;
    # The URL of these count details.
    string self?;
|};

# Describes the error that occurred when retrieving data for a particular issue.
public type IssueError record {|
    # The error that occurred when fetching this issue.
    string errorMessage?;
    # The ID of the issue.
    string id?;
|};

# Details of project permissions and associated issues and projects to look up.
public type BulkProjectPermissions record {|
    # List of issue IDs.
    int[] issues?;
    # List of project permissions.
    string[] permissions;
    # List of project IDs.
    int[] projects?;
|};

# The ID of an issue type screen scheme.
public type IssueTypeScreenSchemeId record {|
    # The ID of the issue type screen scheme.
    string id;
|};

# Represents the Queries record for the operation: bulkGetUsers
public type BulkGetUsersQueries record {
    # The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
    BulkGetUsersQueriesAccountIdItemsString[] accountId;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 10;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string[] 'key?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string[] username?;
};

# Add or clear a single select field:
# 
#  *  To add, specify the option with an `optionId`.
#  *  To clear, pass an option with `optionId` as `-1`.
public type JiraSingleSelectField record {|
    string fieldId;
    JiraSelectedOptionField option;
|};

# A JSON object with custom content.
public type JsonContextVariable record {
    # Type of custom context variable.
    string 'type;
    # A JSON object containing custom content.
    record {} value?;
};

# Details of workflows and related statuses.
public type WorkflowReadResponse record {|
    # List of statuses.
    JiraWorkflowStatus[] statuses?;
    # List of workflows.
    JiraWorkflow[] workflows?;
|};

public type UpdateIssueSecuritySchemeRequestBean record {|
    # The description of the security scheme scheme.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the security scheme scheme. Must be unique.
    @constraint:String {maxLength: 60}
    string name?;
|};

# The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable.
public type JexpIssues record {|
    # The JQL query that specifies the set of issues available in the Jira expression.
    JexpJqlIssues jql?;
|};

public type Errors record {|
    Error issueIsSubtask?;
    Error issuesInArchivedProjects?;
    Error issuesInUnlicensedProjects?;
    Error issuesNotFound?;
    Error userDoesNotHavePermission?;
|};

# Key fields from the linked issue.
public type Fields record {|
    # The assignee of the linked issue.
    UserDetails assignee?;
    # The type of the linked issue.
    IssueTypeDetails issueType?;
    IssueTypeDetails issuetype?;
    # The priority of the linked issue.
    Priority priority?;
    # The status of the linked issue.
    StatusDetails status?;
    # The summary description of the linked issue.
    string summary?;
    # The time tracking of the linked issue.
    TimeTrackingDetails timetracking?;
|};

# Details about a task.
public type TaskProgressBeanObject record {|
    # The description of the task.
    string description?;
    # The execution time of the task, in milliseconds.
    int elapsedRuntime;
    # A timestamp recording when the task was finished.
    int finished?;
    # The ID of the task.
    string id;
    # A timestamp recording when the task progress was last updated.
    int lastUpdate;
    # Information about the progress of the task.
    string message?;
    # The progress of the task, as a percentage complete.
    int progress;
    # The result of the task execution.
    anydata result?;
    # The URL of the task.
    string self;
    # A timestamp recording when the task was started.
    int started?;
    # The status of the task.
    "ENQUEUED"|"RUNNING"|"COMPLETE"|"FAILED"|"CANCEL_REQUESTED"|"CANCELLED"|"DEAD" status;
    # A timestamp recording when the task was submitted.
    int submitted;
    # The ID of the user who submitted the task.
    int submittedBy;
|};

# List of property keys.
public type PropertyKeys record {|
    # Property key details.
    PropertyKey[] keys?;
|};

# Represents the Queries record for the operation: editIssue
public type EditIssueQueries record {
    # The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.
    string expand = "";
    # Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideScreenSecurity = false;
    # Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    boolean overrideEditableFlag = false;
    # Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).
    boolean returnIssue = false;
    # Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.
    boolean notifyUsers = true;
};

# A status.
public type StatusDetails record {
    # The description of the status.
    string description?;
    # The URL of the icon used to represent the status.
    string iconUrl?;
    # The ID of the status.
    string id?;
    # The name of the status.
    string name?;
    # The scope of the field.
    Scope scope?;
    # The URL of the status.
    string self?;
    # The category assigned to the status.
    StatusCategory statusCategory?;
};

# Identifiers for a UI modification.
public type UiModificationIdentifiers record {|
    # The ID of the UI modification.
    string id;
    # The URL of the UI modification.
    string self;
|};

public type OperationMessage record {|
    # The human-readable message that describes the result.
    string message;
    # The status code of the response.
    int statusCode;
|};

# A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
# 
#  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
#  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
#  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
public type User record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The user account type. Can take the following values:
    # 
    #  *  `atlassian` regular Atlassian user account
    #  *  `app` system account used for Connect applications and OAuth to represent external systems
    #  *  `customer` Jira Service Desk account representing an external service desk
    "atlassian"|"app"|"customer"|"unknown" accountType?;
    # Whether the user is active.
    boolean active?;
    # The application roles the user is assigned to.
    SimpleListWrapperApplicationRole applicationRoles?;
    # The avatars of the user.
    AvatarUrlsBean avatarUrls?;
    # The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
    string displayName?;
    # The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
    string emailAddress?;
    # Expand options that include additional user details in the response.
    string expand?;
    # The groups that the user belongs to.
    SimpleListWrapperGroupName groups?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
    string locale?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # The URL of the user.
    string self?;
    # The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
    string timeZone?;
|};

public type ActorInputBean record {|
    # The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`.
    string[] group?;
    # The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`.
    string[] groupId?;
    # The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`.
    string[] user?;
|};

# A screen.
public type Screen record {|
    # The description of the screen.
    string description?;
    # The ID of the screen.
    int id?;
    # The name of the screen.
    string name?;
    # The scope of the screen.
    Scope scope?;
|};

# List of Issue Ids Or Keys that are to be archived or unarchived
public type IssueArchivalSyncRequest record {|
    string[] issueIdsOrKeys?;
|};

# A page of items.
public type PageBeanPriorityWithSequence record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    PriorityWithSequence[] values?;
|};

# Represents the Queries record for the operation: getBulkEditableFields
public type GetBulkEditableFieldsQueries record {
    # (Optional)The text to search for in the editable fields.
    string searchText?;
    # (Optional)The start cursor for use in pagination.
    string startingAfter?;
    # The IDs or keys of the issues to get editable fields from.
    string issueIdsOrKeys;
    # (Optional)The end cursor for use in pagination.
    string endingBefore?;
};

# Details a link group, which defines issue operations.
public type LinkGroup record {|
    LinkGroup[] groups?;
    SimpleLink header?;
    string id?;
    SimpleLink[] links?;
    string styleClass?;
    int:Signed32 weight?;
|};

# The details of the workflows to create.
public type WorkflowCreate record {|
    # The description of the workflow to create.
    string description?;
    # The name of the workflow to create.
    string name;
    WorkflowLayout? startPointLayout?;
    # The statuses associated with this workflow.
    StatusLayoutUpdate[] statuses;
    # The transitions of this workflow.
    TransitionUpdateDTO[] transitions;
|};

public type JiraDurationField record {|
    string originalEstimateField;
|};

# Details about a project role.
public type ProjectRoleDetails record {|
    # Whether this role is the admin role for the project.
    boolean admin?;
    # Whether this role is the default role for the project.
    boolean default?;
    # The description of the project role.
    string description?;
    # The ID of the project role.
    int id?;
    # The name of the project role.
    string name?;
    # Whether the roles are configurable for this project.
    boolean roleConfigurable?;
    # The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    Scope scope?;
    # The URL the project role details.
    string self?;
    # The translated name of the project role.
    string translatedName?;
|};

# Represents the Queries record for the operation: resetUserColumns
public type ResetUserColumnsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type IssueBulkEditField record {|
    # Description of the field.
    string description?;
    # A list of options related to the field, applicable in contexts where multiple selections are allowed.
    IssueBulkOperationsFieldOption[] fieldOptions?;
    # The unique ID of the field.
    string id?;
    # Indicates whether the field is mandatory for the operation.
    boolean isRequired?;
    # Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
    ("ADD"|"REMOVE"|"REPLACE"|"REMOVE_ALL")[] multiSelectFieldOptions?;
    # The display name of the field.
    string name?;
    # A URL to fetch additional data for the field
    string searchUrl?;
    # The type of the field.
    string 'type?;
    # A message indicating why the field is unavailable for editing.
    string unavailableMessage?;
|};

# Represents the Queries record for the operation: findUsersForPicker
public type FindUsersForPickerQueries record {
    # A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.
    string[] excludeAccountIds?;
    # The maximum number of items to return. The total number of matched users is returned in `total`.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.
    string query;
    # This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string[] exclude?;
    # Include the URI to the user's avatar.
    boolean showAvatar = false;
    boolean excludeConnectUsers = false;
    string avatarSize?;
};

# Represents the Queries record for the operation: updateCustomFieldValue
public type UpdateCustomFieldValueQueries record {
    # Whether to generate a changelog for this update.
    boolean generateChangelog = true;
};

public type JiraRichTextField record {|
    string fieldId;
    JiraRichTextInput richText;
|};

# Additional details about a project.
public type ProjectInsight record {|
    # The last issue update time.
    string lastIssueUpdateTime?;
    # Total issue count.
    int totalIssueCount?;
|};

# Represents the Headers record for the operation: MigrationResource.updateEntityPropertiesValue_put
public type MigrationresourceUpdateentitypropertiesvalue_putHeaders record {
    # The app migration transfer ID.
    string Atlassian\-Transfer\-Id;
};

# Details of a field configuration.
public type FieldConfigurationDetails record {|
    # The description of the field configuration.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the field configuration. Must be unique.
    @constraint:String {maxLength: 255}
    string name;
|};

public type CustomFieldContextDefaultValue CustomFieldContextDefaultValueCascadingOption|CustomFieldContextDefaultValueMultipleOption|CustomFieldContextDefaultValueSingleOption|CustomFieldContextSingleUserPickerDefaults|CustomFieldContextDefaultValueMultiUserPicker|CustomFieldContextDefaultValueSingleGroupPicker|CustomFieldContextDefaultValueMultipleGroupPicker|CustomFieldContextDefaultValueDate|CustomFieldContextDefaultValueDateTime|CustomFieldContextDefaultValueURL|CustomFieldContextDefaultValueProject|CustomFieldContextDefaultValueFloat|CustomFieldContextDefaultValueLabels|CustomFieldContextDefaultValueTextField|CustomFieldContextDefaultValueTextArea|CustomFieldContextDefaultValueReadOnly|CustomFieldContextDefaultValueSingleVersionPicker|CustomFieldContextDefaultValueMultipleVersionPicker|CustomFieldContextDefaultValueForgeStringField|CustomFieldContextDefaultValueForgeMultiStringField|CustomFieldContextDefaultValueForgeObjectField|CustomFieldContextDefaultValueForgeDateTimeField|CustomFieldContextDefaultValueForgeGroupField|CustomFieldContextDefaultValueForgeMultiGroupField|CustomFieldContextDefaultValueForgeNumberField|CustomFieldContextDefaultValueForgeUserField|CustomFieldContextDefaultValueForgeMultiUserField;

# The schema of a field.
public type JsonTypeBean record {|
    # If the field is a custom field, the configuration of the field.
    record {} configuration?;
    # If the field is a custom field, the URI of the field.
    string custom?;
    # If the field is a custom field, the custom ID of the field.
    int customId?;
    # When the data type is an array, the name of the field items within the array.
    string items?;
    # If the field is a system field, the name of the field.
    string system?;
    # The data type of the field.
    string 'type;
|};

# Details about a notification event.
public type NotificationEvent record {|
    # The description of the event.
    string description?;
    # The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
    int id?;
    # The name of the event.
    string name?;
    # The template of the event. Only custom events configured by Jira administrators have template.
    NotificationEvent templateEvent?;
|};

# A page of items.
public type PageBeanBulkContextualConfiguration record {|
    # Whether this is the last page.
    boolean isLast?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The URL of the page.
    string self?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # The list of items.
    BulkContextualConfiguration[] values?;
|};

# Represents the Queries record for the operation: removeLevel
public type RemoveLevelQueries record {
    # The ID of the issue security level that will replace the currently selected level.
    string replaceWith?;
};

# Represents the Queries record for the operation: getIssueTypesForProject
public type GetIssueTypesForProjectQueries record {
    # The level of the issue type to filter by. Use:
    # 
    #  *  `-1` for Subtask.
    #  *  `0` for Base.
    #  *  `1` for Epic.
    int:Signed32 level?;
    # The ID of the project.
    int projectId;
};

# Represents the Queries record for the operation: searchSecuritySchemes
public type SearchSecuritySchemesQueries record {
    # The maximum number of items to return per page.
    string maxResults = "50";
    # The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.
    string[] id?;
    # The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.
    string[] projectId?;
    # The index of the first item to return in a page of results (page offset).
    string startAt = "0";
};

type ErrorCollectionUnauthorized record {
    string errorMessage;
    string errorCode;
};
